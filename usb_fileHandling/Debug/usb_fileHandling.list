
usb_fileHandling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0800f730  0800f730  0001f730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fec4  0800fec4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800fec4  0800fec4  0001fec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fecc  0800fecc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fecc  0800fecc  0001fecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fed0  0800fed0  0001fed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800fed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f70  20000098  0800ff68  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003008  0800ff68  00023008  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c234  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000051db  00000000  00000000  0004c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001850  00000000  00000000  000514d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  00052d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c6f  00000000  00000000  000543a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a2d9  00000000  00000000  0007c017  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1817  00000000  00000000  000962f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167b07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006668  00000000  00000000  00167b84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800f718 	.word	0x0800f718

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800f718 	.word	0x0800f718

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <GLCD_Init>:
};
*/
static const char cursor[5]={0x7F,0x3E,0x1C,0x08,0x00};

void GLCD_Init(void)	// GLCD Initialization function
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	GLCD_Initialize_handle(); //
 80004dc:	f000 f830 	bl	8000540 <GLCD_Initialize_handle>
		rst_high();                                   // Make reset pin High 
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	4814      	ldr	r0, [pc, #80]	; (8000538 <GLCD_Init+0x60>)
 80004e6:	f001 fbef 	bl	8001cc8 <HAL_GPIO_WritePin>
    GLCD_segmentSelect(glcd_handle.current_segment); //Select Left half and right half of display 
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <GLCD_Init+0x64>)
 80004ec:	799b      	ldrb	r3, [r3, #6]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f83e 	bl	8000570 <GLCD_segmentSelect>
    HAL_Delay(20);																//MSdelay(20);
 80004f4:	2014      	movs	r0, #20
 80004f6:	f001 f8e9 	bl	80016cc <HAL_Delay>
    GLCD_SendCommand(GLCD_CMD_OFF);		            // Display OFF 
 80004fa:	213e      	movs	r1, #62	; 0x3e
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 f881 	bl	8000604 <GLCD_writeDataLine>
    GLCD_SendCommand(glcd_handle.current_column);	// Set Y address (column=0) 
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <GLCD_Init+0x64>)
 8000504:	785b      	ldrb	r3, [r3, #1]
 8000506:	4619      	mov	r1, r3
 8000508:	2000      	movs	r0, #0
 800050a:	f000 f87b 	bl	8000604 <GLCD_writeDataLine>
    GLCD_SendCommand(glcd_handle.current_page);		// Set x address (page=0) 
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <GLCD_Init+0x64>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4619      	mov	r1, r3
 8000514:	2000      	movs	r0, #0
 8000516:	f000 f875 	bl	8000604 <GLCD_writeDataLine>
    GLCD_SendCommand(glcd_handle.start_line);		  // Set z address (start line=0) 
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <GLCD_Init+0x64>)
 800051c:	789b      	ldrb	r3, [r3, #2]
 800051e:	4619      	mov	r1, r3
 8000520:	2000      	movs	r0, #0
 8000522:	f000 f86f 	bl	8000604 <GLCD_writeDataLine>
    GLCD_SendCommand(GLCD_CMD_ON);		            // Display ON
 8000526:	213f      	movs	r1, #63	; 0x3f
 8000528:	2000      	movs	r0, #0
 800052a:	f000 f86b 	bl	8000604 <GLCD_writeDataLine>
	glcd_handle.current_segment=left_segment;
 800052e:	4b03      	ldr	r3, [pc, #12]	; (800053c <GLCD_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	719a      	strb	r2, [r3, #6]
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40020400 	.word	0x40020400
 800053c:	200000b4 	.word	0x200000b4

08000540 <GLCD_Initialize_handle>:

static void GLCD_Initialize_handle(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	glcd_handle.current_column = 0;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <GLCD_Initialize_handle+0x2c>)
 8000546:	2200      	movs	r2, #0
 8000548:	705a      	strb	r2, [r3, #1]
	glcd_handle.current_page = 0;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <GLCD_Initialize_handle+0x2c>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
	glcd_handle.current_segment = both_segment;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <GLCD_Initialize_handle+0x2c>)
 8000552:	2202      	movs	r2, #2
 8000554:	719a      	strb	r2, [r3, #6]
	glcd_handle.start_line = 0;
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <GLCD_Initialize_handle+0x2c>)
 8000558:	2200      	movs	r2, #0
 800055a:	709a      	strb	r2, [r3, #2]
	glcd_handle.text_buf = NULL;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <GLCD_Initialize_handle+0x2c>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	200000b4 	.word	0x200000b4

08000570 <GLCD_segmentSelect>:

static void GLCD_segmentSelect(chip_select config)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	switch(config) {
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d00f      	beq.n	80005a0 <GLCD_segmentSelect+0x30>
 8000580:	2b02      	cmp	r3, #2
 8000582:	d018      	beq.n	80005b6 <GLCD_segmentSelect+0x46>
 8000584:	2b00      	cmp	r3, #0
 8000586:	d000      	beq.n	800058a <GLCD_segmentSelect+0x1a>
		case left_segment: {cs1_high();cs2_low(); break;}
		case right_segment: {cs1_low();cs2_high(); break;}
		case both_segment:  {cs1_high();cs2_high(); break;}
	}
}
 8000588:	e020      	b.n	80005cc <GLCD_segmentSelect+0x5c>
		case left_segment: {cs1_high();cs2_low(); break;}
 800058a:	2201      	movs	r2, #1
 800058c:	2140      	movs	r1, #64	; 0x40
 800058e:	4811      	ldr	r0, [pc, #68]	; (80005d4 <GLCD_segmentSelect+0x64>)
 8000590:	f001 fb9a 	bl	8001cc8 <HAL_GPIO_WritePin>
 8000594:	2200      	movs	r2, #0
 8000596:	2120      	movs	r1, #32
 8000598:	480e      	ldr	r0, [pc, #56]	; (80005d4 <GLCD_segmentSelect+0x64>)
 800059a:	f001 fb95 	bl	8001cc8 <HAL_GPIO_WritePin>
 800059e:	e015      	b.n	80005cc <GLCD_segmentSelect+0x5c>
		case right_segment: {cs1_low();cs2_high(); break;}
 80005a0:	2200      	movs	r2, #0
 80005a2:	2140      	movs	r1, #64	; 0x40
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <GLCD_segmentSelect+0x64>)
 80005a6:	f001 fb8f 	bl	8001cc8 <HAL_GPIO_WritePin>
 80005aa:	2201      	movs	r2, #1
 80005ac:	2120      	movs	r1, #32
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <GLCD_segmentSelect+0x64>)
 80005b0:	f001 fb8a 	bl	8001cc8 <HAL_GPIO_WritePin>
 80005b4:	e00a      	b.n	80005cc <GLCD_segmentSelect+0x5c>
		case both_segment:  {cs1_high();cs2_high(); break;}
 80005b6:	2201      	movs	r2, #1
 80005b8:	2140      	movs	r1, #64	; 0x40
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <GLCD_segmentSelect+0x64>)
 80005bc:	f001 fb84 	bl	8001cc8 <HAL_GPIO_WritePin>
 80005c0:	2201      	movs	r2, #1
 80005c2:	2120      	movs	r1, #32
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <GLCD_segmentSelect+0x64>)
 80005c6:	f001 fb7f 	bl	8001cc8 <HAL_GPIO_WritePin>
 80005ca:	bf00      	nop
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40020400 	.word	0x40020400

080005d8 <GLCD_segmentToggle>:

static void GLCD_segmentToggle(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	if(glcd_handle.current_segment == left_segment)
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <GLCD_segmentToggle+0x28>)
 80005de:	799b      	ldrb	r3, [r3, #6]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d103      	bne.n	80005ec <GLCD_segmentToggle+0x14>
		glcd_handle.current_segment = right_segment;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <GLCD_segmentToggle+0x28>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	719a      	strb	r2, [r3, #6]
 80005ea:	e002      	b.n	80005f2 <GLCD_segmentToggle+0x1a>
	else
		glcd_handle.current_segment = left_segment;
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <GLCD_segmentToggle+0x28>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	719a      	strb	r2, [r3, #6]
		
	GLCD_segmentSelect(glcd_handle.current_segment);
 80005f2:	4b03      	ldr	r3, [pc, #12]	; (8000600 <GLCD_segmentToggle+0x28>)
 80005f4:	799b      	ldrb	r3, [r3, #6]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffba 	bl	8000570 <GLCD_segmentSelect>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200000b4 	.word	0x200000b4

08000604 <GLCD_writeDataLine>:

static void GLCD_writeDataLine(cmd_or_data flag, uint8_t value)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	460a      	mov	r2, r1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	4613      	mov	r3, r2
 8000612:	71bb      	strb	r3, [r7, #6]
	port_data(value);	      // Copy command or data to the LCD data pins 
 8000614:	4a13      	ldr	r2, [pc, #76]	; (8000664 <GLCD_writeDataLine+0x60>)
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	6153      	str	r3, [r2, #20]
	if(flag == cmd_mode)
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d106      	bne.n	800062e <GLCD_writeDataLine+0x2a>
		rs_low();			        // Make RS LOW for command register
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000626:	4810      	ldr	r0, [pc, #64]	; (8000668 <GLCD_writeDataLine+0x64>)
 8000628:	f001 fb4e 	bl	8001cc8 <HAL_GPIO_WritePin>
 800062c:	e005      	b.n	800063a <GLCD_writeDataLine+0x36>
	else
		rs_high();		        // Make RS HIGH for data register
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <GLCD_writeDataLine+0x64>)
 8000636:	f001 fb47 	bl	8001cc8 <HAL_GPIO_WritePin>
	
	en_high();              // Make HIGH-LOW transition on Enable
 800063a:	2201      	movs	r2, #1
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <GLCD_writeDataLine+0x64>)
 8000640:	f001 fb42 	bl	8001cc8 <HAL_GPIO_WritePin>
	delay_us(2);
 8000644:	2002      	movs	r0, #2
 8000646:	f000 f839 	bl	80006bc <delay_us>
	en_low();
 800064a:	2200      	movs	r2, #0
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <GLCD_writeDataLine+0x64>)
 8000650:	f001 fb3a 	bl	8001cc8 <HAL_GPIO_WritePin>
	delay_us(2);
 8000654:	2002      	movs	r0, #2
 8000656:	f000 f831 	bl	80006bc <delay_us>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020c00 	.word	0x40020c00
 8000668:	40020400 	.word	0x40020400

0800066c <config_GLCD>:

static void config_GLCD(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	GLCD_SendCommand(GLCD_CMD_ON);
 8000670:	213f      	movs	r1, #63	; 0x3f
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff ffc6 	bl	8000604 <GLCD_writeDataLine>
	GLCD_SendCommand(GLCD_CMD_COL0 + glcd_handle.current_column);
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <config_GLCD+0x4c>)
 800067a:	785b      	ldrb	r3, [r3, #1]
 800067c:	3340      	adds	r3, #64	; 0x40
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff ffbe 	bl	8000604 <GLCD_writeDataLine>
	GLCD_SendCommand(GLCD_CMD_PAGE0 + glcd_handle.current_page);
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <config_GLCD+0x4c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	3b48      	subs	r3, #72	; 0x48
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff ffb6 	bl	8000604 <GLCD_writeDataLine>
	GLCD_SendCommand(GLCD_CMD_STRT_LINE + glcd_handle.start_line);
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <config_GLCD+0x4c>)
 800069a:	789b      	ldrb	r3, [r3, #2]
 800069c:	3b40      	subs	r3, #64	; 0x40
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4619      	mov	r1, r3
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff ffae 	bl	8000604 <GLCD_writeDataLine>
	GLCD_segmentSelect(glcd_handle.current_segment);
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <config_GLCD+0x4c>)
 80006aa:	799b      	ldrb	r3, [r3, #6]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff5f 	bl	8000570 <GLCD_segmentSelect>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000b4 	.word	0x200000b4

080006bc <delay_us>:
static void delay_us(uint16_t us)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <delay_us+0x2c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80006ce:	bf00      	nop
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <delay_us+0x2c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d3f9      	bcc.n	80006d0 <delay_us+0x14>
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	20000730 	.word	0x20000730

080006ec <GLCD_Clear_All>:

void GLCD_Clear_All(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	glcd_handle.current_page=0;
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <GLCD_Clear_All+0x80>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	glcd_handle.current_column=0;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <GLCD_Clear_All+0x80>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	705a      	strb	r2, [r3, #1]
	glcd_handle.current_segment=both_segment;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <GLCD_Clear_All+0x80>)
 80006fe:	2202      	movs	r2, #2
 8000700:	719a      	strb	r2, [r3, #6]

	for(;glcd_handle.current_page<8;glcd_handle.current_page++)
 8000702:	e019      	b.n	8000738 <GLCD_Clear_All+0x4c>
	{
		config_GLCD();
 8000704:	f7ff ffb2 	bl	800066c <config_GLCD>
		for(;glcd_handle.current_column<64;glcd_handle.current_column++)
 8000708:	e009      	b.n	800071e <GLCD_Clear_All+0x32>
			GLCD_SendData(0);
 800070a:	2100      	movs	r1, #0
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff ff79 	bl	8000604 <GLCD_writeDataLine>
		for(;glcd_handle.current_column<64;glcd_handle.current_column++)
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <GLCD_Clear_All+0x80>)
 8000714:	785b      	ldrb	r3, [r3, #1]
 8000716:	3301      	adds	r3, #1
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <GLCD_Clear_All+0x80>)
 800071c:	705a      	strb	r2, [r3, #1]
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <GLCD_Clear_All+0x80>)
 8000720:	785b      	ldrb	r3, [r3, #1]
 8000722:	2b3f      	cmp	r3, #63	; 0x3f
 8000724:	d9f1      	bls.n	800070a <GLCD_Clear_All+0x1e>
		
		glcd_handle.current_column=0;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <GLCD_Clear_All+0x80>)
 8000728:	2200      	movs	r2, #0
 800072a:	705a      	strb	r2, [r3, #1]
	for(;glcd_handle.current_page<8;glcd_handle.current_page++)
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <GLCD_Clear_All+0x80>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <GLCD_Clear_All+0x80>)
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <GLCD_Clear_All+0x80>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b07      	cmp	r3, #7
 800073e:	d9e1      	bls.n	8000704 <GLCD_Clear_All+0x18>
	}

	glcd_handle.current_page=0;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <GLCD_Clear_All+0x80>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
	GLCD_SendCommand(GLCD_CMD_COL0 + glcd_handle.current_column);
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <GLCD_Clear_All+0x80>)
 8000748:	785b      	ldrb	r3, [r3, #1]
 800074a:	3340      	adds	r3, #64	; 0x40
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff57 	bl	8000604 <GLCD_writeDataLine>
	GLCD_SendCommand(GLCD_CMD_PAGE0 + glcd_handle.current_page);
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <GLCD_Clear_All+0x80>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	3b48      	subs	r3, #72	; 0x48
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff4f 	bl	8000604 <GLCD_writeDataLine>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000b4 	.word	0x200000b4

08000770 <GLCD_printLine>:

void GLCD_printLine(uint8_t page_num, char* str) //printing the data in the corresponding page
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
	glcd_handle.current_page= page_num;
 800077c:	4a43      	ldr	r2, [pc, #268]	; (800088c <GLCD_printLine+0x11c>)
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	7013      	strb	r3, [r2, #0]
	glcd_handle.current_column = 0;
 8000782:	4b42      	ldr	r3, [pc, #264]	; (800088c <GLCD_printLine+0x11c>)
 8000784:	2200      	movs	r2, #0
 8000786:	705a      	strb	r2, [r3, #1]
	glcd_handle.current_segment = left_segment;
 8000788:	4b40      	ldr	r3, [pc, #256]	; (800088c <GLCD_printLine+0x11c>)
 800078a:	2200      	movs	r2, #0
 800078c:	719a      	strb	r2, [r3, #6]
	glcd_handle.text_buf = str;
 800078e:	4a3f      	ldr	r2, [pc, #252]	; (800088c <GLCD_printLine+0x11c>)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	6093      	str	r3, [r2, #8]
	
	uint16_t max_chars=strlen(glcd_handle.text_buf), char_column = 0;
 8000794:	4b3d      	ldr	r3, [pc, #244]	; (800088c <GLCD_printLine+0x11c>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fd15 	bl	80001c8 <strlen>
 800079e:	4603      	mov	r3, r0
 80007a0:	817b      	strh	r3, [r7, #10]
 80007a2:	2300      	movs	r3, #0
 80007a4:	81fb      	strh	r3, [r7, #14]
	/* char_column' controls the column data of a character */

	for(uint8_t count=0; count<2; count++)		//run once for left-half, once for right-half
 80007a6:	2300      	movs	r3, #0
 80007a8:	737b      	strb	r3, [r7, #13]
 80007aa:	e067      	b.n	800087c <GLCD_printLine+0x10c>
	{
		if(glcd_handle.current_segment == left_segment)
 80007ac:	4b37      	ldr	r3, [pc, #220]	; (800088c <GLCD_printLine+0x11c>)
 80007ae:	799b      	ldrb	r3, [r3, #6]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d102      	bne.n	80007ba <GLCD_printLine+0x4a>
			glcd_handle.current_column = 5;
 80007b4:	4b35      	ldr	r3, [pc, #212]	; (800088c <GLCD_printLine+0x11c>)
 80007b6:	2205      	movs	r2, #5
 80007b8:	705a      	strb	r2, [r3, #1]

		config_GLCD();
 80007ba:	f7ff ff57 	bl	800066c <config_GLCD>
		while(glcd_handle.current_column<64 && ((char_column/5)<max_chars))
 80007be:	e048      	b.n	8000852 <GLCD_printLine+0xe2>
		{
			//print 1 column of the selected page at a time
			GLCD_SendData(font[(glcd_handle.text_buf[char_column/5] - 32)][char_column%5]);
 80007c0:	4b32      	ldr	r3, [pc, #200]	; (800088c <GLCD_printLine+0x11c>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	89fa      	ldrh	r2, [r7, #14]
 80007c6:	4932      	ldr	r1, [pc, #200]	; (8000890 <GLCD_printLine+0x120>)
 80007c8:	fba1 1202 	umull	r1, r2, r1, r2
 80007cc:	0892      	lsrs	r2, r2, #2
 80007ce:	b292      	uxth	r2, r2
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f1a3 0120 	sub.w	r1, r3, #32
 80007d8:	89fa      	ldrh	r2, [r7, #14]
 80007da:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <GLCD_printLine+0x120>)
 80007dc:	fba3 0302 	umull	r0, r3, r3, r2
 80007e0:	0898      	lsrs	r0, r3, #2
 80007e2:	4603      	mov	r3, r0
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4403      	add	r3, r0
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	4a29      	ldr	r2, [pc, #164]	; (8000894 <GLCD_printLine+0x124>)
 80007f0:	460b      	mov	r3, r1
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	440b      	add	r3, r1
 80007f6:	4413      	add	r3, r2
 80007f8:	4403      	add	r3, r0
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff ff00 	bl	8000604 <GLCD_writeDataLine>
			
			if(char_column%5 == 4)
 8000804:	89fa      	ldrh	r2, [r7, #14]
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <GLCD_printLine+0x120>)
 8000808:	fba3 1302 	umull	r1, r3, r3, r2
 800080c:	0899      	lsrs	r1, r3, #2
 800080e:	460b      	mov	r3, r1
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	440b      	add	r3, r1
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	b29b      	uxth	r3, r3
 8000818:	2b04      	cmp	r3, #4
 800081a:	d111      	bne.n	8000840 <GLCD_printLine+0xd0>
			{	
				glcd_handle.current_column++;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <GLCD_printLine+0x11c>)
 800081e:	785b      	ldrb	r3, [r3, #1]
 8000820:	3301      	adds	r3, #1
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <GLCD_printLine+0x11c>)
 8000826:	705a      	strb	r2, [r3, #1]
				GLCD_SendCommand(GLCD_CMD_COL0 + glcd_handle.current_column);
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <GLCD_printLine+0x11c>)
 800082a:	785b      	ldrb	r3, [r3, #1]
 800082c:	3340      	adds	r3, #64	; 0x40
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4619      	mov	r1, r3
 8000832:	2000      	movs	r0, #0
 8000834:	f7ff fee6 	bl	8000604 <GLCD_writeDataLine>
				GLCD_SendData(0x00);
 8000838:	2100      	movs	r1, #0
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff fee2 	bl	8000604 <GLCD_writeDataLine>
			}
			glcd_handle.current_column++; char_column++;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <GLCD_printLine+0x11c>)
 8000842:	785b      	ldrb	r3, [r3, #1]
 8000844:	3301      	adds	r3, #1
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <GLCD_printLine+0x11c>)
 800084a:	705a      	strb	r2, [r3, #1]
 800084c:	89fb      	ldrh	r3, [r7, #14]
 800084e:	3301      	adds	r3, #1
 8000850:	81fb      	strh	r3, [r7, #14]
		while(glcd_handle.current_column<64 && ((char_column/5)<max_chars))
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <GLCD_printLine+0x11c>)
 8000854:	785b      	ldrb	r3, [r3, #1]
 8000856:	2b3f      	cmp	r3, #63	; 0x3f
 8000858:	d808      	bhi.n	800086c <GLCD_printLine+0xfc>
 800085a:	89fb      	ldrh	r3, [r7, #14]
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <GLCD_printLine+0x120>)
 800085e:	fba2 2303 	umull	r2, r3, r2, r3
 8000862:	089b      	lsrs	r3, r3, #2
 8000864:	b29b      	uxth	r3, r3
 8000866:	897a      	ldrh	r2, [r7, #10]
 8000868:	429a      	cmp	r2, r3
 800086a:	d8a9      	bhi.n	80007c0 <GLCD_printLine+0x50>
		}
		GLCD_segmentToggle();		// select the right segment
 800086c:	f7ff feb4 	bl	80005d8 <GLCD_segmentToggle>
		glcd_handle.current_column = 0;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <GLCD_printLine+0x11c>)
 8000872:	2200      	movs	r2, #0
 8000874:	705a      	strb	r2, [r3, #1]
	for(uint8_t count=0; count<2; count++)		//run once for left-half, once for right-half
 8000876:	7b7b      	ldrb	r3, [r7, #13]
 8000878:	3301      	adds	r3, #1
 800087a:	737b      	strb	r3, [r7, #13]
 800087c:	7b7b      	ldrb	r3, [r7, #13]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d994      	bls.n	80007ac <GLCD_printLine+0x3c>
		
		//GLCD_SendCommand(GLCD_CMD_COL0);
	}
	//glcd_handle.current_page=0;
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000b4 	.word	0x200000b4
 8000890:	cccccccd 	.word	0xcccccccd
 8000894:	0800f870 	.word	0x0800f870

08000898 <GLCD_Cursor_update>:

// Need to create a pop up function in order to print for certain notification and returns to orginal state
// In this function previous state of glcd is saved so that glcd_handle will return back to state

void GLCD_Cursor_update(cursor_modify value)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	glcd_handle.current_page = glcd_handle.cursor_pos;	//for clearing prev cursor position
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <GLCD_Cursor_update+0xc4>)
 80008a4:	78da      	ldrb	r2, [r3, #3]
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <GLCD_Cursor_update+0xc4>)
 80008a8:	701a      	strb	r2, [r3, #0]
	glcd_handle.current_column=0;
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <GLCD_Cursor_update+0xc4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	705a      	strb	r2, [r3, #1]
	glcd_handle.current_segment=left_segment;
 80008b0:	4b2a      	ldr	r3, [pc, #168]	; (800095c <GLCD_Cursor_update+0xc4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	719a      	strb	r2, [r3, #6]
	config_GLCD();
 80008b6:	f7ff fed9 	bl	800066c <config_GLCD>
	for(;glcd_handle.current_column<5;glcd_handle.current_column++)
 80008ba:	e009      	b.n	80008d0 <GLCD_Cursor_update+0x38>
		GLCD_SendData(0);
 80008bc:	2100      	movs	r1, #0
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fea0 	bl	8000604 <GLCD_writeDataLine>
	for(;glcd_handle.current_column<5;glcd_handle.current_column++)
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <GLCD_Cursor_update+0xc4>)
 80008c6:	785b      	ldrb	r3, [r3, #1]
 80008c8:	3301      	adds	r3, #1
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <GLCD_Cursor_update+0xc4>)
 80008ce:	705a      	strb	r2, [r3, #1]
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <GLCD_Cursor_update+0xc4>)
 80008d2:	785b      	ldrb	r3, [r3, #1]
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d9f1      	bls.n	80008bc <GLCD_Cursor_update+0x24>

	if(value == clr)	// return if only clearing the cursor
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e0:	d103      	bne.n	80008ea <GLCD_Cursor_update+0x52>
	{
		glcd_handle.current_column=0;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <GLCD_Cursor_update+0xc4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	705a      	strb	r2, [r3, #1]
		return;
 80008e8:	e034      	b.n	8000954 <GLCD_Cursor_update+0xbc>
	}

	switch(value) {
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d009      	beq.n	8000906 <GLCD_Cursor_update+0x6e>
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d000      	beq.n	80008f8 <GLCD_Cursor_update+0x60>
		case incr: glcd_handle.cursor_pos++; break;
		case decr: glcd_handle.cursor_pos--; break;
		default: break;
 80008f6:	e00d      	b.n	8000914 <GLCD_Cursor_update+0x7c>
		case incr: glcd_handle.cursor_pos++; break;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <GLCD_Cursor_update+0xc4>)
 80008fa:	78db      	ldrb	r3, [r3, #3]
 80008fc:	3301      	adds	r3, #1
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <GLCD_Cursor_update+0xc4>)
 8000902:	70da      	strb	r2, [r3, #3]
 8000904:	e006      	b.n	8000914 <GLCD_Cursor_update+0x7c>
		case decr: glcd_handle.cursor_pos--; break;
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <GLCD_Cursor_update+0xc4>)
 8000908:	78db      	ldrb	r3, [r3, #3]
 800090a:	3b01      	subs	r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <GLCD_Cursor_update+0xc4>)
 8000910:	70da      	strb	r2, [r3, #3]
 8000912:	bf00      	nop
	}

	glcd_handle.current_page = glcd_handle.cursor_pos;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <GLCD_Cursor_update+0xc4>)
 8000916:	78da      	ldrb	r2, [r3, #3]
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <GLCD_Cursor_update+0xc4>)
 800091a:	701a      	strb	r2, [r3, #0]
	glcd_handle.current_column=0;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <GLCD_Cursor_update+0xc4>)
 800091e:	2200      	movs	r2, #0
 8000920:	705a      	strb	r2, [r3, #1]
	config_GLCD();
 8000922:	f7ff fea3 	bl	800066c <config_GLCD>
	for(;glcd_handle.current_column<5;glcd_handle.current_column++)
 8000926:	e00e      	b.n	8000946 <GLCD_Cursor_update+0xae>
		GLCD_SendData(cursor[glcd_handle.current_column]);
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <GLCD_Cursor_update+0xc4>)
 800092a:	785b      	ldrb	r3, [r3, #1]
 800092c:	461a      	mov	r2, r3
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <GLCD_Cursor_update+0xc8>)
 8000930:	5c9b      	ldrb	r3, [r3, r2]
 8000932:	4619      	mov	r1, r3
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff fe65 	bl	8000604 <GLCD_writeDataLine>
	for(;glcd_handle.current_column<5;glcd_handle.current_column++)
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <GLCD_Cursor_update+0xc4>)
 800093c:	785b      	ldrb	r3, [r3, #1]
 800093e:	3301      	adds	r3, #1
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <GLCD_Cursor_update+0xc4>)
 8000944:	705a      	strb	r2, [r3, #1]
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <GLCD_Cursor_update+0xc4>)
 8000948:	785b      	ldrb	r3, [r3, #1]
 800094a:	2b04      	cmp	r3, #4
 800094c:	d9ec      	bls.n	8000928 <GLCD_Cursor_update+0x90>

	glcd_handle.current_column=0;
 800094e:	4b03      	ldr	r3, [pc, #12]	; (800095c <GLCD_Cursor_update+0xc4>)
 8000950:	2200      	movs	r2, #0
 8000952:	705a      	strb	r2, [r3, #1]
}
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000b4 	.word	0x200000b4
 8000960:	0800fa50 	.word	0x0800fa50

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f000 fe3d 	bl	80015e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f873 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f000 f989 	bl	8000c88 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000976:	f000 f937 	bl	8000be8 <MX_TIM1_Init>
  MX_FATFS_Init();
 800097a:	f006 fbab 	bl	80070d4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800097e:	f00e fa75 	bl	800ee6c <MX_USB_HOST_Init>
  MX_I2C2_Init();
 8000982:	f000 f8d1 	bl	8000b28 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000986:	f000 f8ff 	bl	8000b88 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800098a:	482e      	ldr	r0, [pc, #184]	; (8000a44 <main+0xe0>)
 800098c:	f005 f9c3 	bl	8005d16 <HAL_TIM_Base_Start>
  GLCD_Init();
 8000990:	f7ff fda2 	bl	80004d8 <GLCD_Init>
  GLCD_Clear_All();
 8000994:	f7ff feaa 	bl	80006ec <GLCD_Clear_All>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(select_flag==down_button){
 8000998:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <main+0xe4>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d10e      	bne.n	80009be <main+0x5a>
	  	  		if(glcd_handle.cursor_pos<(glcd_handle.listCount-1)){
 80009a0:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <main+0xe8>)
 80009a2:	78db      	ldrb	r3, [r3, #3]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <main+0xe8>)
 80009a8:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 80009ac:	3b01      	subs	r3, #1
 80009ae:	429a      	cmp	r2, r3
 80009b0:	da02      	bge.n	80009b8 <main+0x54>
	  	  			GLCD_Cursor_update(incr);
 80009b2:	2002      	movs	r0, #2
 80009b4:	f7ff ff70 	bl	8000898 <GLCD_Cursor_update>
	  	  		}
	  	  		else//update new content
	  	  			;
	  	  		select_flag=no_button;
 80009b8:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <main+0xe4>)
 80009ba:	22ff      	movs	r2, #255	; 0xff
 80009bc:	701a      	strb	r2, [r3, #0]
	  	  	}
	  	  	if(select_flag==up_button){
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <main+0xe4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d109      	bne.n	80009da <main+0x76>
	  	  		if(glcd_handle.cursor_pos>0){
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <main+0xe8>)
 80009c8:	78db      	ldrb	r3, [r3, #3]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <main+0x70>
	  	  			GLCD_Cursor_update(decr);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff ff62 	bl	8000898 <GLCD_Cursor_update>
	  	  		}
	  	  		else
	  	  		    ;
	  	  		select_flag=no_button;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <main+0xe4>)
 80009d6:	22ff      	movs	r2, #255	; 0xff
 80009d8:	701a      	strb	r2, [r3, #0]
	  	  	}if(select_flag==select_button){// here there is a bug what happen if initially press the button it reset to no_button so next time new file selected
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <main+0xe4>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d12c      	bne.n	8000a3c <main+0xd8>
	  	  		if(Appli_state == APPLICATION_READY){
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <main+0xec>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d128      	bne.n	8000a3c <main+0xd8>
	  	  			char buf[8];
	  	  			 static uint16_t offset=0;//need to make it 0 when new file selected
	  	  			Open_File(glcd_handle.display_list[glcd_handle.cursor_pos]);
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <main+0xe8>)
 80009ec:	78db      	ldrb	r3, [r3, #3]
 80009ee:	461a      	mov	r2, r3
 80009f0:	4613      	mov	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	009a      	lsls	r2, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	3308      	adds	r3, #8
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <main+0xe8>)
 80009fe:	4413      	add	r3, r2
 8000a00:	3304      	adds	r3, #4
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fd32 	bl	800146c <Open_File>
	  	  			Lseek_File(offset);
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <main+0xf0>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fd9b 	bl	8001548 <Lseek_File>
	  	  			Read_File(buf,2);
 8000a12:	463b      	mov	r3, r7
 8000a14:	2102      	movs	r1, #2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fd64 	bl	80014e4 <Read_File>
	  	  			offset+=2;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <main+0xf0>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	3302      	adds	r3, #2
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <main+0xf0>)
 8000a26:	801a      	strh	r2, [r3, #0]
	  	  			GLCD_Clear_All();
 8000a28:	f7ff fe60 	bl	80006ec <GLCD_Clear_All>
	  	  			GLCD_printLine(1,buf);
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff fe9d 	bl	8000770 <GLCD_printLine>
	  	  		    select_flag=no_button;
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <main+0xe4>)
 8000a38:	22ff      	movs	r2, #255	; 0xff
 8000a3a:	701a      	strb	r2, [r3, #0]
	  	  		}
	  	  		//select_flag=no_button;//for time being we will comment this to sort it
	  	  	}
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a3c:	f00e fa3c 	bl	800eeb8 <MX_USB_HOST_Process>
	  if(select_flag==down_button){
 8000a40:	e7aa      	b.n	8000998 <main+0x34>
 8000a42:	bf00      	nop
 8000a44:	20000730 	.word	0x20000730
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	200000b4 	.word	0x200000b4
 8000a50:	20000678 	.word	0x20000678
 8000a54:	2000018c 	.word	0x2000018c

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b094      	sub	sp, #80	; 0x50
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	2230      	movs	r2, #48	; 0x30
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f00e fd8b 	bl	800f582 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <SystemClock_Config+0xc8>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <SystemClock_Config+0xc8>)
 8000a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <SystemClock_Config+0xc8>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <SystemClock_Config+0xcc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <SystemClock_Config+0xcc>)
 8000aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <SystemClock_Config+0xcc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000acc:	2348      	movs	r3, #72	; 0x48
 8000ace:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fca1 	bl	8005424 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae8:	f000 f9b8 	bl	8000e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	230f      	movs	r3, #15
 8000aee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af0:	2302      	movs	r3, #2
 8000af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	2102      	movs	r1, #2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 fefb 	bl	8005904 <HAL_RCC_ClockConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b14:	f000 f9a2 	bl	8000e5c <Error_Handler>
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3750      	adds	r7, #80	; 0x50
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_I2C2_Init+0x54>)
 8000b2e:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <MX_I2C2_Init+0x58>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_I2C2_Init+0x54>)
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <MX_I2C2_Init+0x5c>)
 8000b36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000b38:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MX_I2C2_Init+0x54>)
 8000b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_I2C2_Init+0x54>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <MX_I2C2_Init+0x54>)
 8000b48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_I2C2_Init+0x54>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_I2C2_Init+0x54>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_I2C2_Init+0x54>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_I2C2_Init+0x54>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_I2C2_Init+0x54>)
 8000b68:	f002 fdd2 	bl	8003710 <HAL_I2C_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000b72:	f000 f973 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200006d8 	.word	0x200006d8
 8000b80:	40005800 	.word	0x40005800
 8000b84:	00061a80 	.word	0x00061a80

08000b88 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_I2C3_Init+0x54>)
 8000b8e:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <MX_I2C3_Init+0x58>)
 8000b90:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_I2C3_Init+0x54>)
 8000b94:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <MX_I2C3_Init+0x5c>)
 8000b96:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_I2C3_Init+0x54>)
 8000b9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b9e:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_I2C3_Init+0x54>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <MX_I2C3_Init+0x54>)
 8000ba8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_I2C3_Init+0x54>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_I2C3_Init+0x54>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_I2C3_Init+0x54>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_I2C3_Init+0x54>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_I2C3_Init+0x54>)
 8000bc8:	f002 fda2 	bl	8003710 <HAL_I2C_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2C3_Init+0x4e>
  {
    Error_Handler();
 8000bd2:	f000 f943 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000684 	.word	0x20000684
 8000be0:	40005c00 	.word	0x40005c00
 8000be4:	00061a80 	.word	0x00061a80

08000be8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <MX_TIM1_Init+0x98>)
 8000c06:	4a1f      	ldr	r2, [pc, #124]	; (8000c84 <MX_TIM1_Init+0x9c>)
 8000c08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_TIM1_Init+0x98>)
 8000c0c:	2247      	movs	r2, #71	; 0x47
 8000c0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_TIM1_Init+0x98>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_TIM1_Init+0x98>)
 8000c18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_TIM1_Init+0x98>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MX_TIM1_Init+0x98>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_TIM1_Init+0x98>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c30:	4813      	ldr	r0, [pc, #76]	; (8000c80 <MX_TIM1_Init+0x98>)
 8000c32:	f005 f845 	bl	8005cc0 <HAL_TIM_Base_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c3c:	f000 f90e 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_TIM1_Init+0x98>)
 8000c4e:	f005 f886 	bl	8005d5e <HAL_TIM_ConfigClockSource>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c58:	f000 f900 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_TIM1_Init+0x98>)
 8000c6a:	f005 fa69 	bl	8006140 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c74:	f000 f8f2 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000730 	.word	0x20000730
 8000c84:	40010000 	.word	0x40010000

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b58      	ldr	r3, [pc, #352]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a57      	ldr	r2, [pc, #348]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b55      	ldr	r3, [pc, #340]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b51      	ldr	r3, [pc, #324]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a50      	ldr	r2, [pc, #320]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b4e      	ldr	r3, [pc, #312]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a49      	ldr	r2, [pc, #292]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b47      	ldr	r3, [pc, #284]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a42      	ldr	r2, [pc, #264]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a3b      	ldr	r2, [pc, #236]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <MX_GPIO_Init+0x17c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4836      	ldr	r0, [pc, #216]	; (8000e08 <MX_GPIO_Init+0x180>)
 8000d30:	f000 ffca 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000d34:	2200      	movs	r2, #0
 8000d36:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 8000d3a:	4834      	ldr	r0, [pc, #208]	; (8000e0c <MX_GPIO_Init+0x184>)
 8000d3c:	f000 ffc4 	bl	8001cc8 <HAL_GPIO_WritePin>
                          |GLCD_DB0_Pin|GLCD_DB1_Pin|GLCD_DB2_Pin|GLCD_DB3_Pin
                          |GLCD_DB4_Pin|GLCD_DB5_Pin|GLCD_DB6_Pin|GLCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GLCD_RST_Pin|GLCD_CS2_Pin|GLCD_CS1_Pin|GLCD_EN_Pin
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000d46:	4832      	ldr	r0, [pc, #200]	; (8000e10 <MX_GPIO_Init+0x188>)
 8000d48:	f000 ffbe 	bl	8001cc8 <HAL_GPIO_WritePin>
                          |GLCD_RW_Pin|GLCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4829      	ldr	r0, [pc, #164]	; (8000e08 <MX_GPIO_Init+0x180>)
 8000d64:	f000 fe16 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d68:	230f      	movs	r3, #15
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <MX_GPIO_Init+0x18c>)
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4827      	ldr	r0, [pc, #156]	; (8000e18 <MX_GPIO_Init+0x190>)
 8000d7c:	f000 fe0a 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin
                           GLCD_DB0_Pin GLCD_DB1_Pin GLCD_DB2_Pin GLCD_DB3_Pin
                           GLCD_DB4_Pin GLCD_DB5_Pin GLCD_DB6_Pin GLCD_DB7_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000d80:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8000d84:	617b      	str	r3, [r7, #20]
                          |GLCD_DB0_Pin|GLCD_DB1_Pin|GLCD_DB2_Pin|GLCD_DB3_Pin
                          |GLCD_DB4_Pin|GLCD_DB5_Pin|GLCD_DB6_Pin|GLCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	481c      	ldr	r0, [pc, #112]	; (8000e0c <MX_GPIO_Init+0x184>)
 8000d9a:	f000 fdfb 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCD_RST_Pin GLCD_CS2_Pin GLCD_CS1_Pin GLCD_EN_Pin
                           GLCD_RW_Pin GLCD_RS_Pin */
  GPIO_InitStruct.Pin = GLCD_RST_Pin|GLCD_CS2_Pin|GLCD_CS1_Pin|GLCD_EN_Pin
 8000d9e:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000da2:	617b      	str	r3, [r7, #20]
                          |GLCD_RW_Pin|GLCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4816      	ldr	r0, [pc, #88]	; (8000e10 <MX_GPIO_Init+0x188>)
 8000db8:	f000 fdec 	bl	8001994 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2006      	movs	r0, #6
 8000dc2:	f000 fd80 	bl	80018c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dc6:	2006      	movs	r0, #6
 8000dc8:	f000 fd99 	bl	80018fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2007      	movs	r0, #7
 8000dd2:	f000 fd78 	bl	80018c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000dd6:	2007      	movs	r0, #7
 8000dd8:	f000 fd91 	bl	80018fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2008      	movs	r0, #8
 8000de2:	f000 fd70 	bl	80018c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000de6:	2008      	movs	r0, #8
 8000de8:	f000 fd89 	bl	80018fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2009      	movs	r0, #9
 8000df2:	f000 fd68 	bl	80018c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000df6:	2009      	movs	r0, #9
 8000df8:	f000 fd81 	bl	80018fe <HAL_NVIC_EnableIRQ>

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	40020c00 	.word	0x40020c00
 8000e10:	40020400 	.word	0x40020400
 8000e14:	10110000 	.word	0x10110000
 8000e18:	40020000 	.word	0x40020000

08000e1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_0){
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d102      	bne.n	8000e32 <HAL_GPIO_EXTI_Callback+0x16>
		select_flag=down_button;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]

	}
	if(GPIO_Pin==GPIO_PIN_1){
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d102      	bne.n	8000e3e <HAL_GPIO_EXTI_Callback+0x22>
		select_flag=up_button;
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin==GPIO_PIN_2)
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d102      	bne.n	8000e4a <HAL_GPIO_EXTI_Callback+0x2e>
	{
		select_flag=select_button;
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000e46:	2202      	movs	r2, #2
 8000e48:	701a      	strb	r2, [r3, #0]

	}
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000000 	.word	0x20000000

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <Error_Handler+0x6>

08000e64 <HAL_I2C_MasterTxCpltCallback>:
		return HAL_OK;
}


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	PCA9698_t *active_line;
	//point to the appropriate slave_line
	if(hi2c->Instance==I2C1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <HAL_I2C_MasterTxCpltCallback+0x8c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d101      	bne.n	8000e7a <HAL_I2C_MasterTxCpltCallback+0x16>
		active_line = &slave_lines[0];
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <HAL_I2C_MasterTxCpltCallback+0x90>)
 8000e78:	60fb      	str	r3, [r7, #12]
	if(hi2c->Instance==I2C2)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <HAL_I2C_MasterTxCpltCallback+0x94>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d101      	bne.n	8000e88 <HAL_I2C_MasterTxCpltCallback+0x24>
		active_line = &slave_lines[1];
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <HAL_I2C_MasterTxCpltCallback+0x98>)
 8000e86:	60fb      	str	r3, [r7, #12]
	if(hi2c->Instance==I2C3)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <HAL_I2C_MasterTxCpltCallback+0x9c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_I2C_MasterTxCpltCallback+0x32>
		active_line = &slave_lines[2];
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_I2C_MasterTxCpltCallback+0xa0>)
 8000e94:	60fb      	str	r3, [r7, #12]

	if(active_line->selected_slave - active_line->slaveAddress_base ==	\
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	105b      	asrs	r3, r3, #1
 8000ea4:	461a      	mov	r2, r3
			(active_line->number_of_slaves-1))
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	7b1b      	ldrb	r3, [r3, #12]
 8000eaa:	3b01      	subs	r3, #1
	if(active_line->selected_slave - active_line->slaveAddress_base ==	\
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d108      	bne.n	8000ec2 <HAL_I2C_MasterTxCpltCallback+0x5e>
	{
	  /* Control reaches when all the slaves have been communicated with */
	  active_line->selected_slave = active_line->slaveAddress_base;	//reset the pointer to point to first slave
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	609a      	str	r2, [r3, #8]
	  active_line->selected_data_to_write = active_line->data_to_write_base; // reset pointer to point to first data element
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	615a      	str	r2, [r3, #20]
	  active_line->selected_slave++;	//point to the next slave in the line
	  active_line->selected_data_to_write += 6; // modify data pointer for the next slave device
	  HAL_I2C_Master_Transmit_IT(hi2c, *(active_line->selected_slave),	\
				active_line->selected_data_to_write, 6);
	}
}
 8000ec0:	e012      	b.n	8000ee8 <HAL_I2C_MasterTxCpltCallback+0x84>
	  active_line->selected_slave++;	//point to the next slave in the line
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	1c9a      	adds	r2, r3, #2
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	609a      	str	r2, [r3, #8]
	  active_line->selected_data_to_write += 6; // modify data pointer for the next slave device
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	1d9a      	adds	r2, r3, #6
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	615a      	str	r2, [r3, #20]
	  HAL_I2C_Master_Transmit_IT(hi2c, *(active_line->selected_slave),	\
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	8819      	ldrh	r1, [r3, #0]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	695a      	ldr	r2, [r3, #20]
 8000ee0:	2306      	movs	r3, #6
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f002 fd4c 	bl	8003980 <HAL_I2C_Master_Transmit_IT>
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	20000190 	.word	0x20000190
 8000ef8:	40005800 	.word	0x40005800
 8000efc:	200001a8 	.word	0x200001a8
 8000f00:	40005c00 	.word	0x40005c00
 8000f04:	200001c0 	.word	0x200001c0

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a4e      	ldr	r2, [pc, #312]	; (80010b0 <HAL_I2C_MspInit+0x158>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d135      	bne.n	8000fe6 <HAL_I2C_MspInit+0x8e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	4b4d      	ldr	r3, [pc, #308]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b4a      	ldr	r3, [pc, #296]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4841      	ldr	r0, [pc, #260]	; (80010b8 <HAL_I2C_MspInit+0x160>)
 8000fb4:	f000 fcee 	bl	8001994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	4a3c      	ldr	r2, [pc, #240]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8000fc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc8:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	697b      	ldr	r3, [r7, #20]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2021      	movs	r0, #33	; 0x21
 8000fda:	f000 fc74 	bl	80018c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000fde:	2021      	movs	r0, #33	; 0x21
 8000fe0:	f000 fc8d 	bl	80018fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000fe4:	e060      	b.n	80010a8 <HAL_I2C_MspInit+0x150>
  else if(hi2c->Instance==I2C3)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a34      	ldr	r2, [pc, #208]	; (80010bc <HAL_I2C_MspInit+0x164>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d15b      	bne.n	80010a8 <HAL_I2C_MspInit+0x150>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102e:	2312      	movs	r3, #18
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001032:	2301      	movs	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800103a:	2304      	movs	r3, #4
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	481e      	ldr	r0, [pc, #120]	; (80010c0 <HAL_I2C_MspInit+0x168>)
 8001046:	f000 fca5 	bl	8001994 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800104a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001050:	2312      	movs	r3, #18
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001054:	2301      	movs	r3, #1
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800105c:	2304      	movs	r3, #4
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4817      	ldr	r0, [pc, #92]	; (80010c4 <HAL_I2C_MspInit+0x16c>)
 8001068:	f000 fc94 	bl	8001994 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 8001076:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800107a:	6413      	str	r3, [r2, #64]	; 0x40
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_I2C_MspInit+0x15c>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2048      	movs	r0, #72	; 0x48
 800108e:	f000 fc1a 	bl	80018c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001092:	2048      	movs	r0, #72	; 0x48
 8001094:	f000 fc33 	bl	80018fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2049      	movs	r0, #73	; 0x49
 800109e:	f000 fc12 	bl	80018c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80010a2:	2049      	movs	r0, #73	; 0x49
 80010a4:	f000 fc2b 	bl	80018fe <HAL_NVIC_EnableIRQ>
}
 80010a8:	bf00      	nop
 80010aa:	3730      	adds	r7, #48	; 0x30
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40005800 	.word	0x40005800
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40005c00 	.word	0x40005c00
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020000 	.word	0x40020000

080010c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <HAL_TIM_Base_MspInit+0x3c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d10d      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_TIM_Base_MspInit+0x40>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <HAL_TIM_Base_MspInit+0x40>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_TIM_Base_MspInit+0x40>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40010000 	.word	0x40010000
 8001108:	40023800 	.word	0x40023800

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 fa98 	bl	800168c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001164:	2001      	movs	r0, #1
 8001166:	f000 fdc9 	bl	8001cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}

0800116e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001172:	2002      	movs	r0, #2
 8001174:	f000 fdc2 	bl	8001cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001180:	2004      	movs	r0, #4
 8001182:	f000 fdbb 	bl	8001cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}

0800118a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800118e:	2008      	movs	r0, #8
 8001190:	f000 fdb4 	bl	8001cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <I2C2_EV_IRQHandler+0x10>)
 800119e:	f002 fc95 	bl	8003acc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200006d8 	.word	0x200006d8

080011ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <OTG_FS_IRQHandler+0x10>)
 80011b2:	f001 f84b 	bl	800224c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20002d40 	.word	0x20002d40

080011c0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <I2C3_EV_IRQHandler+0x10>)
 80011c6:	f002 fc81 	bl	8003acc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000684 	.word	0x20000684

080011d4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <I2C3_ER_IRQHandler+0x10>)
 80011da:	f002 fde4 	bl	8003da6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000684 	.word	0x20000684

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f00e f96e 	bl	800f4f8 <__errno>
 800121c:	4602      	mov	r2, r0
 800121e:	230c      	movs	r3, #12
 8001220:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20020000 	.word	0x20020000
 8001248:	00000400 	.word	0x00000400
 800124c:	200001d8 	.word	0x200001d8
 8001250:	20003008 	.word	0x20003008

08001254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <SystemInit+0x28>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a07      	ldr	r2, [pc, #28]	; (800127c <SystemInit+0x28>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <SystemInit+0x28>)
 800126a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800126e:	609a      	str	r2, [r3, #8]
#endif
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <Mount_USB>:

FILINFO USBHfno;
FRESULT fresult;

void Mount_USB (void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	490c      	ldr	r1, [pc, #48]	; (80012b8 <Mount_USB+0x38>)
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <Mount_USB+0x3c>)
 800128a:	f00c fbe5 	bl	800da58 <f_mount>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <Mount_USB+0x40>)
 8001294:	701a      	strb	r2, [r3, #0]
	GLCD_Clear_All();
 8001296:	f7ff fa29 	bl	80006ec <GLCD_Clear_All>
	if (fresult != FR_OK)
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <Mount_USB+0x40>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <Mount_USB+0x2c>
		GLCD_printLine(2, "USB drive mount error!");
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <Mount_USB+0x44>)
 80012a4:	2002      	movs	r0, #2
 80012a6:	f7ff fa63 	bl	8000770 <GLCD_printLine>
	else
		GLCD_printLine(2, "USB drive mounted!");
}
 80012aa:	e003      	b.n	80012b4 <Mount_USB+0x34>
		GLCD_printLine(2, "USB drive mounted!");
 80012ac:	4906      	ldr	r1, [pc, #24]	; (80012c8 <Mount_USB+0x48>)
 80012ae:	2002      	movs	r0, #2
 80012b0:	f7ff fa5e 	bl	8000770 <GLCD_printLine>
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200008c8 	.word	0x200008c8
 80012bc:	20001928 	.word	0x20001928
 80012c0:	20000798 	.word	0x20000798
 80012c4:	0800f730 	.word	0x0800f730
 80012c8:	0800f748 	.word	0x0800f748

080012cc <Unmount_USB>:

void Unmount_USB (void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	490c      	ldr	r1, [pc, #48]	; (8001304 <Unmount_USB+0x38>)
 80012d4:	2000      	movs	r0, #0
 80012d6:	f00c fbbf 	bl	800da58 <f_mount>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <Unmount_USB+0x3c>)
 80012e0:	701a      	strb	r2, [r3, #0]
	GLCD_Clear_All();
 80012e2:	f7ff fa03 	bl	80006ec <GLCD_Clear_All>
	if (fresult == FR_OK)
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <Unmount_USB+0x3c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d104      	bne.n	80012f8 <Unmount_USB+0x2c>
		GLCD_printLine(2, "USB drive unmounted!");
 80012ee:	4907      	ldr	r1, [pc, #28]	; (800130c <Unmount_USB+0x40>)
 80012f0:	2002      	movs	r0, #2
 80012f2:	f7ff fa3d 	bl	8000770 <GLCD_printLine>
	else
		GLCD_printLine(2, "USB drive unmount error!");
}
 80012f6:	e003      	b.n	8001300 <Unmount_USB+0x34>
		GLCD_printLine(2, "USB drive unmount error!");
 80012f8:	4905      	ldr	r1, [pc, #20]	; (8001310 <Unmount_USB+0x44>)
 80012fa:	2002      	movs	r0, #2
 80012fc:	f7ff fa38 	bl	8000770 <GLCD_printLine>
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200008c8 	.word	0x200008c8
 8001308:	20000798 	.word	0x20000798
 800130c:	0800f75c 	.word	0x0800f75c
 8001310:	0800f774 	.word	0x0800f774

08001314 <getfilename>:
	sprintf(buf,"file count is %d", filecount);
	//GLCD_printLine(1,buf);
}

void getfilename(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	USB_GetFileName("/");
 800131a:	4916      	ldr	r1, [pc, #88]	; (8001374 <getfilename+0x60>)
 800131c:	2001      	movs	r0, #1
 800131e:	f000 f82d 	bl	800137c <Scan_USB>
	GLCD_Clear_All();
 8001322:	f7ff f9e3 	bl	80006ec <GLCD_Clear_All>
	for(int cnt=0; cnt<glcd_handle.listCount; cnt++)
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	e011      	b.n	8001350 <getfilename+0x3c>
	{
		GLCD_printLine(cnt,glcd_handle.display_list[cnt]);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	b2d8      	uxtb	r0, r3
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	009a      	lsls	r2, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3308      	adds	r3, #8
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <getfilename+0x64>)
 8001340:	4413      	add	r3, r2
 8001342:	3304      	adds	r3, #4
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fa13 	bl	8000770 <GLCD_printLine>
	for(int cnt=0; cnt<glcd_handle.listCount; cnt++)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3301      	adds	r3, #1
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <getfilename+0x64>)
 8001352:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4293      	cmp	r3, r2
 800135c:	dbe6      	blt.n	800132c <getfilename+0x18>
	}
	glcd_handle.cursor_pos = 0;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <getfilename+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	70da      	strb	r2, [r3, #3]
	GLCD_Cursor_update(curr);
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff fa97 	bl	8000898 <GLCD_Cursor_update>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	0800f790 	.word	0x0800f790
 8001378:	200000b4 	.word	0x200000b4

0800137c <Scan_USB>:


FRESULT Scan_USB (count_or_name flag, char* pat)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b096      	sub	sp, #88	; 0x58
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
    DIR dir;
    sprintf (path, "%s",pat);
 8001388:	6839      	ldr	r1, [r7, #0]
 800138a:	4831      	ldr	r0, [pc, #196]	; (8001450 <Scan_USB+0xd4>)
 800138c:	f00e f9ba 	bl	800f704 <strcpy>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	492e      	ldr	r1, [pc, #184]	; (8001450 <Scan_USB+0xd4>)
 8001396:	4618      	mov	r0, r3
 8001398:	f00d fb01 	bl	800e99e <f_opendir>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <Scan_USB+0xd8>)
 80013a2:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80013a4:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <Scan_USB+0xd8>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d14a      	bne.n	8001442 <Scan_USB+0xc6>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4929      	ldr	r1, [pc, #164]	; (8001458 <Scan_USB+0xdc>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00d fbc1 	bl	800eb3a <f_readdir>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <Scan_USB+0xd8>)
 80013be:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <Scan_USB+0xd8>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d132      	bne.n	800142e <Scan_USB+0xb2>
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <Scan_USB+0xdc>)
 80013ca:	7e9b      	ldrb	r3, [r3, #26]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d02e      	beq.n	800142e <Scan_USB+0xb2>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <Scan_USB+0xdc>)
 80013d2:	7b1b      	ldrb	r3, [r3, #12]
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e7      	bne.n	80013ac <Scan_USB+0x30>
                path[i] = 0;
                */
            }
            else
            {   /* It is a file. */
            	if(flag == file_count)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d104      	bne.n	80013ec <Scan_USB+0x70>
					filecount++;//filecount// not necessary
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <Scan_USB+0xe0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a1c      	ldr	r2, [pc, #112]	; (800145c <Scan_USB+0xe0>)
 80013ea:	6013      	str	r3, [r2, #0]
				if(flag == file_name)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d1dc      	bne.n	80013ac <Scan_USB+0x30>
				{
					sprintf(buf,"%s", USBHfno.fname);
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <Scan_USB+0xe4>)
 80013f4:	481b      	ldr	r0, [pc, #108]	; (8001464 <Scan_USB+0xe8>)
 80013f6:	f00e f985 	bl	800f704 <strcpy>
					strcpy(glcd_handle.display_list[glcd_handle.listCount], buf);
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <Scan_USB+0xec>)
 80013fc:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8001400:	461a      	mov	r2, r3
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	009a      	lsls	r2, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	3308      	adds	r3, #8
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <Scan_USB+0xec>)
 8001410:	4413      	add	r3, r2
 8001412:	3304      	adds	r3, #4
 8001414:	4913      	ldr	r1, [pc, #76]	; (8001464 <Scan_USB+0xe8>)
 8001416:	4618      	mov	r0, r3
 8001418:	f00e f974 	bl	800f704 <strcpy>
					glcd_handle.listCount++;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <Scan_USB+0xec>)
 800141e:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8001422:	3301      	adds	r3, #1
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <Scan_USB+0xec>)
 8001428:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 800142c:	e7be      	b.n	80013ac <Scan_USB+0x30>
				}
            }
        }
        if(f_closedir(&dir)!=FR_OK)
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	4618      	mov	r0, r3
 8001434:	f00d fb5b 	bl	800eaee <f_closedir>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <Scan_USB+0xc6>
        	Error_Handler();
 800143e:	f7ff fd0d 	bl	8000e5c <Error_Handler>
    }
    return fresult;
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <Scan_USB+0xd8>)
 8001444:	781b      	ldrb	r3, [r3, #0]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3758      	adds	r7, #88	; 0x58
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000770 	.word	0x20000770
 8001454:	20000798 	.word	0x20000798
 8001458:	200007a0 	.word	0x200007a0
 800145c:	2000072c 	.word	0x2000072c
 8001460:	200007ba 	.word	0x200007ba
 8001464:	20000784 	.word	0x20000784
 8001468:	200000b4 	.word	0x200000b4

0800146c <Open_File>:


FRESULT Open_File(char *fname)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	fresult = f_stat (fname, &USBHfno);
 8001474:	4916      	ldr	r1, [pc, #88]	; (80014d0 <Open_File+0x64>)
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f00d fb9c 	bl	800ebb4 <f_stat>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <Open_File+0x68>)
 8001482:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <Open_File+0x68>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <Open_File+0x32>
	{
		GLCD_Clear_All();
 800148c:	f7ff f92e 	bl	80006ec <GLCD_Clear_All>
		GLCD_printLine(1, "File error!");
 8001490:	4911      	ldr	r1, [pc, #68]	; (80014d8 <Open_File+0x6c>)
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff f96c 	bl	8000770 <GLCD_printLine>
		return fresult;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <Open_File+0x68>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	e014      	b.n	80014c8 <Open_File+0x5c>
	}

	fresult = f_open(&USBHFile, fname, FA_READ);
 800149e:	2201      	movs	r2, #1
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	480e      	ldr	r0, [pc, #56]	; (80014dc <Open_File+0x70>)
 80014a4:	f00c fb1e 	bl	800dae4 <f_open>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <Open_File+0x68>)
 80014ae:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <Open_File+0x68>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <Open_File+0x58>
	{
		GLCD_Clear_All();
 80014b8:	f7ff f918 	bl	80006ec <GLCD_Clear_All>
		GLCD_printLine(1,"Error Opening file!");
 80014bc:	4908      	ldr	r1, [pc, #32]	; (80014e0 <Open_File+0x74>)
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff f956 	bl	8000770 <GLCD_printLine>
	}
	return fresult;
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <Open_File+0x68>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200007a0 	.word	0x200007a0
 80014d4:	20000798 	.word	0x20000798
 80014d8:	0800f7a8 	.word	0x0800f7a8
 80014dc:	200008d0 	.word	0x200008d0
 80014e0:	0800f7b4 	.word	0x0800f7b4

080014e4 <Read_File>:



FRESULT Read_File (char *buffer, uint8_t readSize)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
	static UINT br;
	fresult = f_read (&USBHFile, buffer, readSize, &br);
 80014f0:	78fa      	ldrb	r2, [r7, #3]
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <Read_File+0x54>)
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4811      	ldr	r0, [pc, #68]	; (800153c <Read_File+0x58>)
 80014f8:	f00c fdaf 	bl	800e05a <f_read>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <Read_File+0x5c>)
 8001502:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <Read_File+0x5c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <Read_File+0x34>
	{
		GLCD_Clear_All();
 800150c:	f7ff f8ee 	bl	80006ec <GLCD_Clear_All>
		GLCD_printLine(1,"Error Reading file!");
 8001510:	490c      	ldr	r1, [pc, #48]	; (8001544 <Read_File+0x60>)
 8001512:	2001      	movs	r0, #1
 8001514:	f7ff f92c 	bl	8000770 <GLCD_printLine>
	}
	if (fresult == FR_OK)
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <Read_File+0x5c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d105      	bne.n	800152c <Read_File+0x48>
		{
			GLCD_Clear_All();
 8001520:	f7ff f8e4 	bl	80006ec <GLCD_Clear_All>
			GLCD_printLine(1,buffer);
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff f922 	bl	8000770 <GLCD_printLine>
		}

	return fresult;
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <Read_File+0x5c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200001dc 	.word	0x200001dc
 800153c:	200008d0 	.word	0x200008d0
 8001540:	20000798 	.word	0x20000798
 8001544:	0800f7c8 	.word	0x0800f7c8

08001548 <Lseek_File>:
FRESULT Lseek_File(uint16_t offset){
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
	fresult = f_lseek(&USBHFile,offset);
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	f04f 0400 	mov.w	r4, #0
 8001558:	461a      	mov	r2, r3
 800155a:	4623      	mov	r3, r4
 800155c:	480a      	ldr	r0, [pc, #40]	; (8001588 <Lseek_File+0x40>)
 800155e:	f00c ff11 	bl	800e384 <f_lseek>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <Lseek_File+0x44>)
 8001568:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <Lseek_File+0x44>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <Lseek_File+0x36>
		{
			GLCD_Clear_All();
 8001572:	f7ff f8bb 	bl	80006ec <GLCD_Clear_All>
			GLCD_printLine(1,"Error lseek file!");
 8001576:	4906      	ldr	r1, [pc, #24]	; (8001590 <Lseek_File+0x48>)
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff f8f9 	bl	8000770 <GLCD_printLine>
		}
}
 800157e:	bf00      	nop
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}
 8001588:	200008d0 	.word	0x200008d0
 800158c:	20000798 	.word	0x20000798
 8001590:	0800f7dc 	.word	0x0800f7dc

08001594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001598:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800159a:	e003      	b.n	80015a4 <LoopCopyDataInit>

0800159c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800159e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015a2:	3104      	adds	r1, #4

080015a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015a4:	480b      	ldr	r0, [pc, #44]	; (80015d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015ac:	d3f6      	bcc.n	800159c <CopyDataInit>
  ldr  r2, =_sbss
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015b0:	e002      	b.n	80015b8 <LoopFillZerobss>

080015b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015b4:	f842 3b04 	str.w	r3, [r2], #4

080015b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015bc:	d3f9      	bcc.n	80015b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015be:	f7ff fe49 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c2:	f00d ff9f 	bl	800f504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c6:	f7ff f9cd 	bl	8000964 <main>
  bx  lr    
 80015ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015d0:	0800fed4 	.word	0x0800fed4
  ldr  r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015d8:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80015dc:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 80015e0:	20003008 	.word	0x20003008

080015e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC_IRQHandler>
	...

080015e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <HAL_Init+0x40>)
 80015f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_Init+0x40>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_Init+0x40>)
 80015fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001602:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_Init+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <HAL_Init+0x40>)
 800160a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001610:	2003      	movs	r0, #3
 8001612:	f000 f94d 	bl	80018b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001616:	2000      	movs	r0, #0
 8001618:	f000 f808 	bl	800162c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800161c:	f7ff fc74 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023c00 	.word	0x40023c00

0800162c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_InitTick+0x54>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_InitTick+0x58>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001642:	fbb3 f3f1 	udiv	r3, r3, r1
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f965 	bl	800191a <HAL_SYSTICK_Config>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e00e      	b.n	8001678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d80a      	bhi.n	8001676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001660:	2200      	movs	r2, #0
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f000 f92d 	bl	80018c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800166c:	4a06      	ldr	r2, [pc, #24]	; (8001688 <HAL_InitTick+0x5c>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e000      	b.n	8001678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000004 	.word	0x20000004
 8001684:	2000000c 	.word	0x2000000c
 8001688:	20000008 	.word	0x20000008

0800168c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x20>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x24>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_IncTick+0x24>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	2000000c 	.word	0x2000000c
 80016b0:	200008c0 	.word	0x200008c0

080016b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return uwTick;
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <HAL_GetTick+0x14>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	200008c0 	.word	0x200008c0

080016cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff ffee 	bl	80016b4 <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e4:	d005      	beq.n	80016f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_Delay+0x40>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016f2:	bf00      	nop
 80016f4:	f7ff ffde 	bl	80016b4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f7      	bhi.n	80016f4 <HAL_Delay+0x28>
  {
  }
}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000000c 	.word	0x2000000c

08001710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800173c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <__NVIC_GetPriorityGrouping+0x18>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	f003 0307 	and.w	r3, r3, #7
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	2b00      	cmp	r3, #0
 8001784:	db0b      	blt.n	800179e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	f003 021f 	and.w	r2, r3, #31
 800178c:	4907      	ldr	r1, [pc, #28]	; (80017ac <__NVIC_EnableIRQ+0x38>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	2001      	movs	r0, #1
 8001796:	fa00 f202 	lsl.w	r2, r0, r2
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	; (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	; (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800187c:	d301      	bcc.n	8001882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187e:	2301      	movs	r3, #1
 8001880:	e00f      	b.n	80018a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <SysTick_Config+0x40>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188a:	210f      	movs	r1, #15
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f7ff ff8e 	bl	80017b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <SysTick_Config+0x40>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <SysTick_Config+0x40>)
 800189c:	2207      	movs	r2, #7
 800189e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	e000e010 	.word	0xe000e010

080018b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff29 	bl	8001710 <__NVIC_SetPriorityGrouping>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d8:	f7ff ff3e 	bl	8001758 <__NVIC_GetPriorityGrouping>
 80018dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f7ff ff8e 	bl	8001804 <NVIC_EncodePriority>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff5d 	bl	80017b0 <__NVIC_SetPriority>
}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff31 	bl	8001774 <__NVIC_EnableIRQ>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffa2 	bl	800186c <SysTick_Config>
 8001928:	4603      	mov	r3, r0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d004      	beq.n	8001950 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e00c      	b.n	800196a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2205      	movs	r2, #5
 8001954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001984:	b2db      	uxtb	r3, r3
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	e16b      	b.n	8001c88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b0:	2201      	movs	r2, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f040 815a 	bne.w	8001c82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d00b      	beq.n	80019ee <HAL_GPIO_Init+0x5a>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d007      	beq.n	80019ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e2:	2b11      	cmp	r3, #17
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	d130      	bne.n	8001a50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 0201 	and.w	r2, r3, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0xfc>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b12      	cmp	r3, #18
 8001a8e:	d123      	bne.n	8001ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	08da      	lsrs	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3208      	adds	r2, #8
 8001a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	08da      	lsrs	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3208      	adds	r2, #8
 8001ad2:	69b9      	ldr	r1, [r7, #24]
 8001ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0203 	and.w	r2, r3, #3
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80b4 	beq.w	8001c82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b5f      	ldr	r3, [pc, #380]	; (8001c9c <HAL_GPIO_Init+0x308>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a5e      	ldr	r2, [pc, #376]	; (8001c9c <HAL_GPIO_Init+0x308>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b5c      	ldr	r3, [pc, #368]	; (8001c9c <HAL_GPIO_Init+0x308>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b36:	4a5a      	ldr	r2, [pc, #360]	; (8001ca0 <HAL_GPIO_Init+0x30c>)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a51      	ldr	r2, [pc, #324]	; (8001ca4 <HAL_GPIO_Init+0x310>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d02b      	beq.n	8001bba <HAL_GPIO_Init+0x226>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a50      	ldr	r2, [pc, #320]	; (8001ca8 <HAL_GPIO_Init+0x314>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d025      	beq.n	8001bb6 <HAL_GPIO_Init+0x222>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4f      	ldr	r2, [pc, #316]	; (8001cac <HAL_GPIO_Init+0x318>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <HAL_GPIO_Init+0x21e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4e      	ldr	r2, [pc, #312]	; (8001cb0 <HAL_GPIO_Init+0x31c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x21a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4d      	ldr	r2, [pc, #308]	; (8001cb4 <HAL_GPIO_Init+0x320>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x216>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4c      	ldr	r2, [pc, #304]	; (8001cb8 <HAL_GPIO_Init+0x324>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x212>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4b      	ldr	r2, [pc, #300]	; (8001cbc <HAL_GPIO_Init+0x328>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x20e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4a      	ldr	r2, [pc, #296]	; (8001cc0 <HAL_GPIO_Init+0x32c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x20a>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e00e      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	e00c      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	e00a      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	e008      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001baa:	2304      	movs	r3, #4
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e004      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_GPIO_Init+0x228>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f002 0203 	and.w	r2, r2, #3
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	4093      	lsls	r3, r2
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bcc:	4934      	ldr	r1, [pc, #208]	; (8001ca0 <HAL_GPIO_Init+0x30c>)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bda:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfe:	4a31      	ldr	r2, [pc, #196]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c04:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c28:	4a26      	ldr	r2, [pc, #152]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2e:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c52:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c58:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c7c:	4a11      	ldr	r2, [pc, #68]	; (8001cc4 <HAL_GPIO_Init+0x330>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3301      	adds	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	f67f ae90 	bls.w	80019b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	3724      	adds	r7, #36	; 0x24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020c00 	.word	0x40020c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40021400 	.word	0x40021400
 8001cbc:	40021800 	.word	0x40021800
 8001cc0:	40021c00 	.word	0x40021c00
 8001cc4:	40013c00 	.word	0x40013c00

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce4:	e003      	b.n	8001cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	041a      	lsls	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	619a      	str	r2, [r3, #24]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f87e 	bl	8000e1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40013c00 	.word	0x40013c00

08001d2c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	b08f      	sub	sp, #60	; 0x3c
 8001d30:	af0a      	add	r7, sp, #40	; 0x28
 8001d32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e054      	b.n	8001de8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d106      	bne.n	8001d5e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f00d f8ef 	bl	800ef3c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2203      	movs	r2, #3
 8001d62:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 facd 	bl	800631c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	687e      	ldr	r6, [r7, #4]
 8001d8a:	466d      	mov	r5, sp
 8001d8c:	f106 0410 	add.w	r4, r6, #16
 8001d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001da0:	1d33      	adds	r3, r6, #4
 8001da2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da4:	6838      	ldr	r0, [r7, #0]
 8001da6:	f004 fa47 	bl	8006238 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2101      	movs	r1, #1
 8001db0:	4618      	mov	r0, r3
 8001db2:	f004 fac4 	bl	800633e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	687e      	ldr	r6, [r7, #4]
 8001dbe:	466d      	mov	r5, sp
 8001dc0:	f106 0410 	add.w	r4, r6, #16
 8001dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dd4:	1d33      	adds	r3, r6, #4
 8001dd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dd8:	6838      	ldr	r0, [r7, #0]
 8001dda:	f004 fbd7 	bl	800658c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001df0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af04      	add	r7, sp, #16
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	4608      	mov	r0, r1
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	70fb      	strb	r3, [r7, #3]
 8001e02:	460b      	mov	r3, r1
 8001e04:	70bb      	strb	r3, [r7, #2]
 8001e06:	4613      	mov	r3, r2
 8001e08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_HCD_HC_Init+0x28>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e07f      	b.n	8001f18 <HAL_HCD_HC_Init+0x128>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	333d      	adds	r3, #61	; 0x3d
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	3338      	adds	r3, #56	; 0x38
 8001e44:	787a      	ldrb	r2, [r7, #1]
 8001e46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e48:	78fa      	ldrb	r2, [r7, #3]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	3340      	adds	r3, #64	; 0x40
 8001e58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e5a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	3339      	adds	r3, #57	; 0x39
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	440b      	add	r3, r1
 8001e7e:	333f      	adds	r3, #63	; 0x3f
 8001e80:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	78bb      	ldrb	r3, [r7, #2]
 8001e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e8e:	b2d8      	uxtb	r0, r3
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	333a      	adds	r3, #58	; 0x3a
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ea2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	da0a      	bge.n	8001ec0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	333b      	adds	r3, #59	; 0x3b
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	e009      	b.n	8001ed4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	333b      	adds	r3, #59	; 0x3b
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	440b      	add	r3, r1
 8001ee2:	333c      	adds	r3, #60	; 0x3c
 8001ee4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ee8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	787c      	ldrb	r4, [r7, #1]
 8001ef0:	78ba      	ldrb	r2, [r7, #2]
 8001ef2:	78f9      	ldrb	r1, [r7, #3]
 8001ef4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ef6:	9302      	str	r3, [sp, #8]
 8001ef8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	4623      	mov	r3, r4
 8001f06:	f004 fcc3 	bl	8006890 <USB_HC_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd90      	pop	{r4, r7, pc}

08001f20 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_HCD_HC_Halt+0x1e>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e00f      	b.n	8001f5e <HAL_HCD_HC_Halt+0x3e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 feff 	bl	8006d52 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	70fb      	strb	r3, [r7, #3]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70bb      	strb	r3, [r7, #2]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	333b      	adds	r3, #59	; 0x3b
 8001f92:	78ba      	ldrb	r2, [r7, #2]
 8001f94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	440b      	add	r3, r1
 8001fa4:	333f      	adds	r3, #63	; 0x3f
 8001fa6:	787a      	ldrb	r2, [r7, #1]
 8001fa8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001faa:	7c3b      	ldrb	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d114      	bne.n	8001fda <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3342      	adds	r3, #66	; 0x42
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	333d      	adds	r3, #61	; 0x3d
 8001fd4:	7f3a      	ldrb	r2, [r7, #28]
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	e009      	b.n	8001fee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fda:	78fa      	ldrb	r2, [r7, #3]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3342      	adds	r3, #66	; 0x42
 8001fea:	2202      	movs	r2, #2
 8001fec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001fee:	787b      	ldrb	r3, [r7, #1]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	f200 80d6 	bhi.w	80021a2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001ff6:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <HAL_HCD_HC_SubmitRequest+0x94>)
 8001ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffc:	0800200d 	.word	0x0800200d
 8002000:	0800218d 	.word	0x0800218d
 8002004:	08002079 	.word	0x08002079
 8002008:	08002103 	.word	0x08002103
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800200c:	7c3b      	ldrb	r3, [r7, #16]
 800200e:	2b01      	cmp	r3, #1
 8002010:	f040 80c9 	bne.w	80021a6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002014:	78bb      	ldrb	r3, [r7, #2]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 80c5 	bne.w	80021a6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800201c:	8b3b      	ldrh	r3, [r7, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	3351      	adds	r3, #81	; 0x51
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	3351      	adds	r3, #81	; 0x51
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10a      	bne.n	8002062 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3342      	adds	r3, #66	; 0x42
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002060:	e0a1      	b.n	80021a6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	3342      	adds	r3, #66	; 0x42
 8002072:	2202      	movs	r2, #2
 8002074:	701a      	strb	r2, [r3, #0]
      break;
 8002076:	e096      	b.n	80021a6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002078:	78bb      	ldrb	r3, [r7, #2]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d120      	bne.n	80020c0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800207e:	78fa      	ldrb	r2, [r7, #3]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	3351      	adds	r3, #81	; 0x51
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	3342      	adds	r3, #66	; 0x42
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80020a8:	e07e      	b.n	80021a8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	3342      	adds	r3, #66	; 0x42
 80020ba:	2202      	movs	r2, #2
 80020bc:	701a      	strb	r2, [r3, #0]
      break;
 80020be:	e073      	b.n	80021a8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	3350      	adds	r3, #80	; 0x50
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10a      	bne.n	80020ec <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	3342      	adds	r3, #66	; 0x42
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
      break;
 80020ea:	e05d      	b.n	80021a8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	3342      	adds	r3, #66	; 0x42
 80020fc:	2202      	movs	r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]
      break;
 8002100:	e052      	b.n	80021a8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002102:	78bb      	ldrb	r3, [r7, #2]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d120      	bne.n	800214a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	3351      	adds	r3, #81	; 0x51
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10a      	bne.n	8002134 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	3342      	adds	r3, #66	; 0x42
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002132:	e039      	b.n	80021a8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	3342      	adds	r3, #66	; 0x42
 8002144:	2202      	movs	r2, #2
 8002146:	701a      	strb	r2, [r3, #0]
      break;
 8002148:	e02e      	b.n	80021a8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	3350      	adds	r3, #80	; 0x50
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10a      	bne.n	8002176 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002160:	78fa      	ldrb	r2, [r7, #3]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	3342      	adds	r3, #66	; 0x42
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
      break;
 8002174:	e018      	b.n	80021a8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	3342      	adds	r3, #66	; 0x42
 8002186:	2202      	movs	r2, #2
 8002188:	701a      	strb	r2, [r3, #0]
      break;
 800218a:	e00d      	b.n	80021a8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	3342      	adds	r3, #66	; 0x42
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
      break;
 80021a0:	e002      	b.n	80021a8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80021a2:	bf00      	nop
 80021a4:	e000      	b.n	80021a8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80021a6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	3344      	adds	r3, #68	; 0x44
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	8b39      	ldrh	r1, [r7, #24]
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4403      	add	r3, r0
 80021cc:	3348      	adds	r3, #72	; 0x48
 80021ce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	335c      	adds	r3, #92	; 0x5c
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	334c      	adds	r3, #76	; 0x4c
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	3339      	adds	r3, #57	; 0x39
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	335d      	adds	r3, #93	; 0x5d
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	3338      	adds	r3, #56	; 0x38
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	18d1      	adds	r1, r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	f004 fc32 	bl	8006aa4 <USB_HC_StartXfer>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop

0800224c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f004 f94f 	bl	8006506 <USB_GetMode>
 8002268:	4603      	mov	r3, r0
 800226a:	2b01      	cmp	r3, #1
 800226c:	f040 80ef 	bne.w	800244e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f004 f933 	bl	80064e0 <USB_ReadInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80e5 	beq.w	800244c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f004 f92a 	bl	80064e0 <USB_ReadInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002292:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002296:	d104      	bne.n	80022a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80022a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 f91a 	bl	80064e0 <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b6:	d104      	bne.n	80022c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 f90a 	bl	80064e0 <USB_ReadInterrupts>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022d6:	d104      	bne.n	80022e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 f8fa 	bl	80064e0 <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d103      	bne.n	80022fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2202      	movs	r2, #2
 80022fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f004 f8ec 	bl	80064e0 <USB_ReadInterrupts>
 8002308:	4603      	mov	r3, r0
 800230a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800230e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002312:	d115      	bne.n	8002340 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800231c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d108      	bne.n	8002340 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f00c fe82 	bl	800f038 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2101      	movs	r1, #1
 800233a:	4618      	mov	r0, r3
 800233c:	f004 f9e2 	bl	8006704 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f004 f8cb 	bl	80064e0 <USB_ReadInterrupts>
 800234a:	4603      	mov	r3, r0
 800234c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002354:	d102      	bne.n	800235c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f001 f966 	bl	8003628 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f004 f8bd 	bl	80064e0 <USB_ReadInterrupts>
 8002366:	4603      	mov	r3, r0
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b08      	cmp	r3, #8
 800236e:	d106      	bne.n	800237e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f00c fe45 	bl	800f000 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2208      	movs	r2, #8
 800237c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f004 f8ac 	bl	80064e0 <USB_ReadInterrupts>
 8002388:	4603      	mov	r3, r0
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002392:	d138      	bne.n	8002406 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f004 fcc9 	bl	8006d30 <USB_HC_ReadInterrupt>
 800239e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	e025      	b.n	80023f2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	fa22 f303 	lsr.w	r3, r2, r3
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d018      	beq.n	80023ec <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023d0:	d106      	bne.n	80023e0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4619      	mov	r1, r3
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f8cf 	bl	800257c <HCD_HC_IN_IRQHandler>
 80023de:	e005      	b.n	80023ec <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fcfd 	bl	8002de6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3301      	adds	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d3d4      	bcc.n	80023a6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002404:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f004 f868 	bl	80064e0 <USB_ReadInterrupts>
 8002410:	4603      	mov	r3, r0
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	2b10      	cmp	r3, #16
 8002418:	d101      	bne.n	800241e <HAL_HCD_IRQHandler+0x1d2>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_HCD_IRQHandler+0x1d4>
 800241e:	2300      	movs	r3, #0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d014      	beq.n	800244e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0210 	bic.w	r2, r2, #16
 8002432:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f001 f84b 	bl	80034d0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0210 	orr.w	r2, r2, #16
 8002448:	619a      	str	r2, [r3, #24]
 800244a:	e000      	b.n	800244e <HAL_HCD_IRQHandler+0x202>
      return;
 800244c:	bf00      	nop
    }
  }
}
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_HCD_Start+0x16>
 8002466:	2302      	movs	r3, #2
 8002468:	e013      	b.n	8002492 <HAL_HCD_Start+0x3e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f003 ff3f 	bl	80062fa <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2101      	movs	r1, #1
 8002482:	4618      	mov	r0, r3
 8002484:	f004 f9a2 	bl	80067cc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_HCD_Stop+0x16>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e00d      	b.n	80024cc <HAL_HCD_Stop+0x32>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f004 fd83 	bl	8006fc8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 f949 	bl	8006778 <USB_ResetPort>
 80024e6:	4603      	mov	r3, r0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	335c      	adds	r3, #92	; 0x5c
 800250c:	781b      	ldrb	r3, [r3, #0]
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	334c      	adds	r3, #76	; 0x4c
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f004 f98b 	bl	800686c <USB_GetCurrentFrame>
 8002556:	4603      	mov	r3, r0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f004 f966 	bl	800683e <USB_GetHostSpeed>
 8002572:	4603      	mov	r3, r0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d119      	bne.n	80025e0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	461a      	mov	r2, r3
 80025ba:	2304      	movs	r3, #4
 80025bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	0151      	lsls	r1, r2, #5
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	440a      	add	r2, r1
 80025d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	60d3      	str	r3, [r2, #12]
 80025de:	e0ce      	b.n	800277e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f6:	d12c      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	461a      	mov	r2, r3
 8002606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800260a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	335d      	adds	r3, #93	; 0x5d
 800261c:	2207      	movs	r2, #7
 800261e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	0151      	lsls	r1, r2, #5
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	440a      	add	r2, r1
 8002636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263a:	f043 0302 	orr.w	r3, r3, #2
 800263e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f004 fb81 	bl	8006d52 <USB_HC_Halt>
 8002650:	e095      	b.n	800277e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b20      	cmp	r3, #32
 8002666:	d109      	bne.n	800267c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	2320      	movs	r3, #32
 8002678:	6093      	str	r3, [r2, #8]
 800267a:	e080      	b.n	800277e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b08      	cmp	r3, #8
 8002690:	d134      	bne.n	80026fc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	0151      	lsls	r1, r2, #5
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	440a      	add	r2, r1
 80026a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	440b      	add	r3, r1
 80026c0:	335d      	adds	r3, #93	; 0x5d
 80026c2:	2205      	movs	r2, #5
 80026c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	461a      	mov	r2, r3
 80026d4:	2310      	movs	r3, #16
 80026d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	461a      	mov	r2, r3
 80026e6:	2308      	movs	r3, #8
 80026e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f004 fb2c 	bl	8006d52 <USB_HC_Halt>
 80026fa:	e040      	b.n	800277e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002712:	d134      	bne.n	800277e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	0151      	lsls	r1, r2, #5
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	440a      	add	r2, r1
 800272a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800272e:	f043 0302 	orr.w	r3, r3, #2
 8002732:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f004 fb07 	bl	8006d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	461a      	mov	r2, r3
 8002752:	2310      	movs	r3, #16
 8002754:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	440b      	add	r3, r1
 8002764:	335d      	adds	r3, #93	; 0x5d
 8002766:	2208      	movs	r2, #8
 8002768:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	461a      	mov	r2, r3
 8002778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002794:	d122      	bne.n	80027dc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	0151      	lsls	r1, r2, #5
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	440a      	add	r2, r1
 80027ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f004 fac6 	bl	8006d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	461a      	mov	r2, r3
 80027d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80027da:	e300      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	f040 80fd 	bne.w	80029ee <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01b      	beq.n	8002834 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	3348      	adds	r3, #72	; 0x48
 800280c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	0159      	lsls	r1, r3, #5
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	440b      	add	r3, r1
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002820:	1ad1      	subs	r1, r2, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4403      	add	r3, r0
 8002830:	334c      	adds	r3, #76	; 0x4c
 8002832:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	335d      	adds	r3, #93	; 0x5d
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	3358      	adds	r3, #88	; 0x58
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	461a      	mov	r2, r3
 800286a:	2301      	movs	r3, #1
 800286c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	333f      	adds	r3, #63	; 0x3f
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	333f      	adds	r3, #63	; 0x3f
 8002894:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002896:	2b02      	cmp	r3, #2
 8002898:	d121      	bne.n	80028de <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	0151      	lsls	r1, r2, #5
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	440a      	add	r2, r1
 80028b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 fa44 	bl	8006d52 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	461a      	mov	r2, r3
 80028d8:	2310      	movs	r3, #16
 80028da:	6093      	str	r3, [r2, #8]
 80028dc:	e070      	b.n	80029c0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	333f      	adds	r3, #63	; 0x3f
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d12a      	bne.n	800294a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	0151      	lsls	r1, r2, #5
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	440a      	add	r2, r1
 800290a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800290e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002912:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	335c      	adds	r3, #92	; 0x5c
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	b2d8      	uxtb	r0, r3
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	335c      	adds	r3, #92	; 0x5c
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	4601      	mov	r1, r0
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f00c fb86 	bl	800f054 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002948:	e03a      	b.n	80029c0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	333f      	adds	r3, #63	; 0x3f
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d12f      	bne.n	80029c0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	440b      	add	r3, r1
 800296e:	335c      	adds	r3, #92	; 0x5c
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	440b      	add	r3, r1
 8002982:	3350      	adds	r3, #80	; 0x50
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	f083 0301 	eor.w	r3, r3, #1
 800298a:	b2d8      	uxtb	r0, r3
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	3350      	adds	r3, #80	; 0x50
 800299c:	4602      	mov	r2, r0
 800299e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	b2d8      	uxtb	r0, r3
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	335c      	adds	r3, #92	; 0x5c
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	4601      	mov	r1, r0
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f00c fb4a 	bl	800f054 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	440b      	add	r3, r1
 80029ce:	3350      	adds	r3, #80	; 0x50
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	f083 0301 	eor.w	r3, r3, #1
 80029d6:	b2d8      	uxtb	r0, r3
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	440b      	add	r3, r1
 80029e6:	3350      	adds	r3, #80	; 0x50
 80029e8:	4602      	mov	r2, r0
 80029ea:	701a      	strb	r2, [r3, #0]
}
 80029ec:	e1f7      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	f040 811a 	bne.w	8002c3a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	0151      	lsls	r1, r2, #5
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	440a      	add	r2, r1
 8002a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a20:	f023 0302 	bic.w	r3, r3, #2
 8002a24:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	335d      	adds	r3, #93	; 0x5d
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d10a      	bne.n	8002a52 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	440b      	add	r3, r1
 8002a4a:	335c      	adds	r3, #92	; 0x5c
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e0d9      	b.n	8002c06 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	335d      	adds	r3, #93	; 0x5d
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d10a      	bne.n	8002a7e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	335c      	adds	r3, #92	; 0x5c
 8002a78:	2205      	movs	r2, #5
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	e0c3      	b.n	8002c06 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	335d      	adds	r3, #93	; 0x5d
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b06      	cmp	r3, #6
 8002a92:	d00a      	beq.n	8002aaa <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	335d      	adds	r3, #93	; 0x5d
 8002aa4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d156      	bne.n	8002b58 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3358      	adds	r3, #88	; 0x58
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1c59      	adds	r1, r3, #1
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4403      	add	r3, r0
 8002acc:	3358      	adds	r3, #88	; 0x58
 8002ace:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	3358      	adds	r3, #88	; 0x58
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d914      	bls.n	8002b10 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	3358      	adds	r3, #88	; 0x58
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	335c      	adds	r3, #92	; 0x5c
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e009      	b.n	8002b24 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	335c      	adds	r3, #92	; 0x5c
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b3a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b42:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	461a      	mov	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e056      	b.n	8002c06 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	335d      	adds	r3, #93	; 0x5d
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d123      	bne.n	8002bb6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	335c      	adds	r3, #92	; 0x5c
 8002b7e:	2202      	movs	r2, #2
 8002b80:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b98:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ba0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	e027      	b.n	8002c06 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	335d      	adds	r3, #93	; 0x5d
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b07      	cmp	r3, #7
 8002bca:	d11c      	bne.n	8002c06 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	3358      	adds	r3, #88	; 0x58
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	1c59      	adds	r1, r3, #1
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4403      	add	r3, r0
 8002bee:	3358      	adds	r3, #88	; 0x58
 8002bf0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	335c      	adds	r3, #92	; 0x5c
 8002c02:	2204      	movs	r2, #4
 8002c04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c12:	461a      	mov	r2, r3
 8002c14:	2302      	movs	r3, #2
 8002c16:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	b2d8      	uxtb	r0, r3
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	335c      	adds	r3, #92	; 0x5c
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4601      	mov	r1, r0
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f00c fa0e 	bl	800f054 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c38:	e0d1      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4c:	2b80      	cmp	r3, #128	; 0x80
 8002c4e:	d13e      	bne.n	8002cce <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	0151      	lsls	r1, r2, #5
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	440a      	add	r2, r1
 8002c66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c6a:	f043 0302 	orr.w	r3, r3, #2
 8002c6e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3358      	adds	r3, #88	; 0x58
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	1c59      	adds	r1, r3, #1
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4403      	add	r3, r0
 8002c92:	3358      	adds	r3, #88	; 0x58
 8002c94:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	335d      	adds	r3, #93	; 0x5d
 8002ca6:	2206      	movs	r2, #6
 8002ca8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f004 f84c 	bl	8006d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	6093      	str	r3, [r2, #8]
}
 8002ccc:	e087      	b.n	8002dde <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d17c      	bne.n	8002dde <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	333f      	adds	r3, #63	; 0x3f
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d122      	bne.n	8002d40 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	3358      	adds	r3, #88	; 0x58
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	0151      	lsls	r1, r2, #5
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	440a      	add	r2, r1
 8002d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 f80a 	bl	8006d52 <USB_HC_Halt>
 8002d3e:	e045      	b.n	8002dcc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	333f      	adds	r3, #63	; 0x3f
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	440b      	add	r3, r1
 8002d64:	333f      	adds	r3, #63	; 0x3f
 8002d66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d12f      	bne.n	8002dcc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	440b      	add	r3, r1
 8002d7a:	3358      	adds	r3, #88	; 0x58
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d121      	bne.n	8002dcc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	440b      	add	r3, r1
 8002d96:	335d      	adds	r3, #93	; 0x5d
 8002d98:	2203      	movs	r2, #3
 8002d9a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	0151      	lsls	r1, r2, #5
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	440a      	add	r2, r1
 8002db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002db6:	f043 0302 	orr.w	r3, r3, #2
 8002dba:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 ffc3 	bl	8006d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2310      	movs	r3, #16
 8002ddc:	6093      	str	r3, [r2, #8]
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b086      	sub	sp, #24
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	460b      	mov	r3, r1
 8002df0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d119      	bne.n	8002e4a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e22:	461a      	mov	r2, r3
 8002e24:	2304      	movs	r3, #4
 8002e26:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	0151      	lsls	r1, r2, #5
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	440a      	add	r2, r1
 8002e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e42:	f043 0302 	orr.w	r3, r3, #2
 8002e46:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002e48:	e33e      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d141      	bne.n	8002ee4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2320      	movs	r3, #32
 8002e70:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	333d      	adds	r3, #61	; 0x3d
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	f040 831f 	bne.w	80034c8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	440b      	add	r3, r1
 8002e98:	333d      	adds	r3, #61	; 0x3d
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	440b      	add	r3, r1
 8002eac:	335c      	adds	r3, #92	; 0x5c
 8002eae:	2202      	movs	r2, #2
 8002eb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	0151      	lsls	r1, r2, #5
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	440a      	add	r2, r1
 8002ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ecc:	f043 0302 	orr.w	r3, r3, #2
 8002ed0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 ff38 	bl	8006d52 <USB_HC_Halt>
}
 8002ee2:	e2f1      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d13f      	bne.n	8002f7a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	440b      	add	r3, r1
 8002f08:	335d      	adds	r3, #93	; 0x5d
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	333d      	adds	r3, #61	; 0x3d
 8002f1e:	2201      	movs	r2, #1
 8002f20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	440b      	add	r3, r1
 8002f30:	3358      	adds	r3, #88	; 0x58
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	0151      	lsls	r1, r2, #5
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	440a      	add	r2, r1
 8002f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fef6 	bl	8006d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f72:	461a      	mov	r2, r3
 8002f74:	2340      	movs	r3, #64	; 0x40
 8002f76:	6093      	str	r3, [r2, #8]
}
 8002f78:	e2a6      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f90:	d122      	bne.n	8002fd8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	0151      	lsls	r1, r2, #5
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	440a      	add	r2, r1
 8002fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 fec8 	bl	8006d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd4:	6093      	str	r3, [r2, #8]
}
 8002fd6:	e277      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d135      	bne.n	800305a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3358      	adds	r3, #88	; 0x58
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	0151      	lsls	r1, r2, #5
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	440a      	add	r2, r1
 8003018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f003 fe90 	bl	8006d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	461a      	mov	r2, r3
 8003040:	2301      	movs	r3, #1
 8003042:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	440b      	add	r3, r1
 8003052:	335d      	adds	r3, #93	; 0x5d
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
}
 8003058:	e236      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b08      	cmp	r3, #8
 800306e:	d12b      	bne.n	80030c8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	461a      	mov	r2, r3
 800307e:	2308      	movs	r3, #8
 8003080:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	0151      	lsls	r1, r2, #5
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	440a      	add	r2, r1
 8003098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f003 fe50 	bl	8006d52 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	440b      	add	r3, r1
 80030c0:	335d      	adds	r3, #93	; 0x5d
 80030c2:	2205      	movs	r2, #5
 80030c4:	701a      	strb	r2, [r3, #0]
}
 80030c6:	e1ff      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d155      	bne.n	800318a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	3358      	adds	r3, #88	; 0x58
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	335d      	adds	r3, #93	; 0x5d
 8003102:	2203      	movs	r2, #3
 8003104:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	440b      	add	r3, r1
 8003114:	333d      	adds	r3, #61	; 0x3d
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d114      	bne.n	8003146 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	333c      	adds	r3, #60	; 0x3c
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	440b      	add	r3, r1
 8003140:	333d      	adds	r3, #61	; 0x3d
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4413      	add	r3, r2
 800314e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	0151      	lsls	r1, r2, #5
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	440a      	add	r2, r1
 800315c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f003 fdee 	bl	8006d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003182:	461a      	mov	r2, r3
 8003184:	2310      	movs	r3, #16
 8003186:	6093      	str	r3, [r2, #8]
}
 8003188:	e19e      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319c:	2b80      	cmp	r3, #128	; 0x80
 800319e:	d12b      	bne.n	80031f8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	0151      	lsls	r1, r2, #5
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	440a      	add	r2, r1
 80031b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 fdc1 	bl	8006d52 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	335d      	adds	r3, #93	; 0x5d
 80031e0:	2206      	movs	r2, #6
 80031e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	461a      	mov	r2, r3
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	6093      	str	r3, [r2, #8]
}
 80031f6:	e167      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320e:	d135      	bne.n	800327c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	0151      	lsls	r1, r2, #5
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	440a      	add	r2, r1
 8003226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800322a:	f043 0302 	orr.w	r3, r3, #2
 800322e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f003 fd89 	bl	8006d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324c:	461a      	mov	r2, r3
 800324e:	2310      	movs	r3, #16
 8003250:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	461a      	mov	r2, r3
 8003260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003264:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	335d      	adds	r3, #93	; 0x5d
 8003276:	2208      	movs	r2, #8
 8003278:	701a      	strb	r2, [r3, #0]
}
 800327a:	e125      	b.n	80034c8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b02      	cmp	r3, #2
 8003290:	f040 811a 	bne.w	80034c8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	0151      	lsls	r1, r2, #5
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	440a      	add	r2, r1
 80032aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ae:	f023 0302 	bic.w	r3, r3, #2
 80032b2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	440b      	add	r3, r1
 80032c2:	335d      	adds	r3, #93	; 0x5d
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d137      	bne.n	800333a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	440b      	add	r3, r1
 80032d8:	335c      	adds	r3, #92	; 0x5c
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	333f      	adds	r3, #63	; 0x3f
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d00b      	beq.n	800330c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	333f      	adds	r3, #63	; 0x3f
 8003304:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003306:	2b03      	cmp	r3, #3
 8003308:	f040 80c5 	bne.w	8003496 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	440b      	add	r3, r1
 800331a:	3351      	adds	r3, #81	; 0x51
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	f083 0301 	eor.w	r3, r3, #1
 8003322:	b2d8      	uxtb	r0, r3
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	440b      	add	r3, r1
 8003332:	3351      	adds	r3, #81	; 0x51
 8003334:	4602      	mov	r2, r0
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e0ad      	b.n	8003496 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	440b      	add	r3, r1
 8003348:	335d      	adds	r3, #93	; 0x5d
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d10a      	bne.n	8003366 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	440b      	add	r3, r1
 800335e:	335c      	adds	r3, #92	; 0x5c
 8003360:	2202      	movs	r2, #2
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	e097      	b.n	8003496 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	440b      	add	r3, r1
 8003374:	335d      	adds	r3, #93	; 0x5d
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b04      	cmp	r3, #4
 800337a:	d10a      	bne.n	8003392 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	335c      	adds	r3, #92	; 0x5c
 800338c:	2202      	movs	r2, #2
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e081      	b.n	8003496 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	440b      	add	r3, r1
 80033a0:	335d      	adds	r3, #93	; 0x5d
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d10a      	bne.n	80033be <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	335c      	adds	r3, #92	; 0x5c
 80033b8:	2205      	movs	r2, #5
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e06b      	b.n	8003496 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	335d      	adds	r3, #93	; 0x5d
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b06      	cmp	r3, #6
 80033d2:	d00a      	beq.n	80033ea <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	335d      	adds	r3, #93	; 0x5d
 80033e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d155      	bne.n	8003496 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	440b      	add	r3, r1
 80033f8:	3358      	adds	r3, #88	; 0x58
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1c59      	adds	r1, r3, #1
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4403      	add	r3, r0
 800340c:	3358      	adds	r3, #88	; 0x58
 800340e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	3358      	adds	r3, #88	; 0x58
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d914      	bls.n	8003450 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	440b      	add	r3, r1
 8003434:	3358      	adds	r3, #88	; 0x58
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	440b      	add	r3, r1
 8003448:	335c      	adds	r3, #92	; 0x5c
 800344a:	2204      	movs	r2, #4
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e009      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	440b      	add	r3, r1
 800345e:	335c      	adds	r3, #92	; 0x5c
 8003460:	2202      	movs	r2, #2
 8003462:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800347a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003482:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003490:	461a      	mov	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4413      	add	r3, r2
 800349e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a2:	461a      	mov	r2, r3
 80034a4:	2302      	movs	r3, #2
 80034a6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	b2d8      	uxtb	r0, r3
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	440b      	add	r3, r1
 80034ba:	335c      	adds	r3, #92	; 0x5c
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	4601      	mov	r1, r0
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f00b fdc6 	bl	800f054 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034c8:	bf00      	nop
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	0c5b      	lsrs	r3, r3, #17
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003504:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d003      	beq.n	8003514 <HCD_RXQLVL_IRQHandler+0x44>
 800350c:	2b05      	cmp	r3, #5
 800350e:	f000 8082 	beq.w	8003616 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003512:	e083      	b.n	800361c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d07f      	beq.n	800361a <HCD_RXQLVL_IRQHandler+0x14a>
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	3344      	adds	r3, #68	; 0x44
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d074      	beq.n	800361a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	3344      	adds	r3, #68	; 0x44
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	b292      	uxth	r2, r2
 800354a:	4619      	mov	r1, r3
 800354c:	f002 ff9f 	bl	800648e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	440b      	add	r3, r1
 800355e:	3344      	adds	r3, #68	; 0x44
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	18d1      	adds	r1, r2, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4403      	add	r3, r0
 8003574:	3344      	adds	r3, #68	; 0x44
 8003576:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	440b      	add	r3, r1
 8003586:	334c      	adds	r3, #76	; 0x4c
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	18d1      	adds	r1, r2, r3
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4403      	add	r3, r0
 800359c:	334c      	adds	r3, #76	; 0x4c
 800359e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HCD_RXQLVL_IRQHandler+0x154>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d031      	beq.n	800361a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035cc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035d4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	440b      	add	r3, r1
 80035f6:	3350      	adds	r3, #80	; 0x50
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	f083 0301 	eor.w	r3, r3, #1
 80035fe:	b2d8      	uxtb	r0, r3
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	3350      	adds	r3, #80	; 0x50
 8003610:	4602      	mov	r2, r0
 8003612:	701a      	strb	r2, [r3, #0]
      break;
 8003614:	e001      	b.n	800361a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003616:	bf00      	nop
 8003618:	e000      	b.n	800361c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800361a:	bf00      	nop
  }
}
 800361c:	bf00      	nop
 800361e:	3728      	adds	r7, #40	; 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	1ff80000 	.word	0x1ff80000

08003628 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003654:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b02      	cmp	r3, #2
 800365e:	d10b      	bne.n	8003678 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b01      	cmp	r3, #1
 8003668:	d102      	bne.n	8003670 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f00b fcd6 	bl	800f01c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b08      	cmp	r3, #8
 8003680:	d132      	bne.n	80036e8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f043 0308 	orr.w	r3, r3, #8
 8003688:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b04      	cmp	r3, #4
 8003692:	d126      	bne.n	80036e2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d113      	bne.n	80036c4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80036a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036a6:	d106      	bne.n	80036b6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 f828 	bl	8006704 <USB_InitFSLSPClkSel>
 80036b4:	e011      	b.n	80036da <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2101      	movs	r1, #1
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 f821 	bl	8006704 <USB_InitFSLSPClkSel>
 80036c2:	e00a      	b.n	80036da <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d106      	bne.n	80036da <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036d2:	461a      	mov	r2, r3
 80036d4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036d8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f00b fcc8 	bl	800f070 <HAL_HCD_PortEnabled_Callback>
 80036e0:	e002      	b.n	80036e8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f00b fcd2 	bl	800f08c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d103      	bne.n	80036fa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f043 0320 	orr.w	r3, r3, #32
 80036f8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003700:	461a      	mov	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	6013      	str	r3, [r2, #0]
}
 8003706:	bf00      	nop
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e11f      	b.n	8003962 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd fc0e 	bl	8000f58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	; 0x24
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003762:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003772:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003774:	f002 fa90 	bl	8005c98 <HAL_RCC_GetPCLK1Freq>
 8003778:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4a7b      	ldr	r2, [pc, #492]	; (800396c <HAL_I2C_Init+0x25c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d807      	bhi.n	8003794 <HAL_I2C_Init+0x84>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a7a      	ldr	r2, [pc, #488]	; (8003970 <HAL_I2C_Init+0x260>)
 8003788:	4293      	cmp	r3, r2
 800378a:	bf94      	ite	ls
 800378c:	2301      	movls	r3, #1
 800378e:	2300      	movhi	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e006      	b.n	80037a2 <HAL_I2C_Init+0x92>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4a77      	ldr	r2, [pc, #476]	; (8003974 <HAL_I2C_Init+0x264>)
 8003798:	4293      	cmp	r3, r2
 800379a:	bf94      	ite	ls
 800379c:	2301      	movls	r3, #1
 800379e:	2300      	movhi	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0db      	b.n	8003962 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a72      	ldr	r2, [pc, #456]	; (8003978 <HAL_I2C_Init+0x268>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	0c9b      	lsrs	r3, r3, #18
 80037b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a64      	ldr	r2, [pc, #400]	; (800396c <HAL_I2C_Init+0x25c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d802      	bhi.n	80037e4 <HAL_I2C_Init+0xd4>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	3301      	adds	r3, #1
 80037e2:	e009      	b.n	80037f8 <HAL_I2C_Init+0xe8>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	4a63      	ldr	r2, [pc, #396]	; (800397c <HAL_I2C_Init+0x26c>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	099b      	lsrs	r3, r3, #6
 80037f6:	3301      	adds	r3, #1
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800380a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4956      	ldr	r1, [pc, #344]	; (800396c <HAL_I2C_Init+0x25c>)
 8003814:	428b      	cmp	r3, r1
 8003816:	d80d      	bhi.n	8003834 <HAL_I2C_Init+0x124>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1e59      	subs	r1, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fbb1 f3f3 	udiv	r3, r1, r3
 8003826:	3301      	adds	r3, #1
 8003828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382c:	2b04      	cmp	r3, #4
 800382e:	bf38      	it	cc
 8003830:	2304      	movcc	r3, #4
 8003832:	e04f      	b.n	80038d4 <HAL_I2C_Init+0x1c4>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d111      	bne.n	8003860 <HAL_I2C_Init+0x150>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e58      	subs	r0, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	440b      	add	r3, r1
 800384a:	fbb0 f3f3 	udiv	r3, r0, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e012      	b.n	8003886 <HAL_I2C_Init+0x176>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e58      	subs	r0, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	0099      	lsls	r1, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	fbb0 f3f3 	udiv	r3, r0, r3
 8003876:	3301      	adds	r3, #1
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Init+0x17e>
 800388a:	2301      	movs	r3, #1
 800388c:	e022      	b.n	80038d4 <HAL_I2C_Init+0x1c4>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10e      	bne.n	80038b4 <HAL_I2C_Init+0x1a4>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1e58      	subs	r0, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	440b      	add	r3, r1
 80038a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b2:	e00f      	b.n	80038d4 <HAL_I2C_Init+0x1c4>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	0099      	lsls	r1, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	6809      	ldr	r1, [r1, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6911      	ldr	r1, [r2, #16]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68d2      	ldr	r2, [r2, #12]
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	430b      	orrs	r3, r1
 8003916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	000186a0 	.word	0x000186a0
 8003970:	001e847f 	.word	0x001e847f
 8003974:	003d08ff 	.word	0x003d08ff
 8003978:	431bde83 	.word	0x431bde83
 800397c:	10624dd3 	.word	0x10624dd3

08003980 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	461a      	mov	r2, r3
 800398c:	460b      	mov	r3, r1
 800398e:	817b      	strh	r3, [r7, #10]
 8003990:	4613      	mov	r3, r2
 8003992:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	f040 8085 	bne.w	8003ab0 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80039a6:	4b46      	ldr	r3, [pc, #280]	; (8003ac0 <HAL_I2C_Master_Transmit_IT+0x140>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	08db      	lsrs	r3, r3, #3
 80039ac:	4a45      	ldr	r2, [pc, #276]	; (8003ac4 <HAL_I2C_Master_Transmit_IT+0x144>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	0a1a      	lsrs	r2, r3, #8
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009a      	lsls	r2, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d116      	bne.n	80039fa <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e05b      	b.n	8003ab2 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d0db      	beq.n	80039c0 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_I2C_Master_Transmit_IT+0x96>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e04d      	b.n	8003ab2 <HAL_I2C_Master_Transmit_IT+0x132>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d007      	beq.n	8003a3c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2221      	movs	r2, #33	; 0x21
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2210      	movs	r2, #16
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	893a      	ldrh	r2, [r7, #8]
 8003a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <HAL_I2C_Master_Transmit_IT+0x148>)
 8003a7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003a7e:	897a      	ldrh	r2, [r7, #10]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a92:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003aaa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	e000      	b.n	8003ab2 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8003ab0:	2302      	movs	r3, #2
  }
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000004 	.word	0x20000004
 8003ac4:	14f8b589 	.word	0x14f8b589
 8003ac8:	ffff0000 	.word	0xffff0000

08003acc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d003      	beq.n	8003b04 <HAL_I2C_EV_IRQHandler+0x38>
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	f040 80bd 	bne.w	8003c7e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <HAL_I2C_EV_IRQHandler+0x6e>
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003b24:	d003      	beq.n	8003b2e <HAL_I2C_EV_IRQHandler+0x62>
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2C_EV_IRQHandler+0x66>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <HAL_I2C_EV_IRQHandler+0x68>
 8003b32:	2300      	movs	r3, #0
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	f000 812e 	beq.w	8003d96 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <HAL_I2C_EV_IRQHandler+0x92>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	0a5b      	lsrs	r3, r3, #9
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d006      	beq.n	8003b5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f001 fc4b 	bl	80053ec <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fd58 	bl	800460c <I2C_Master_SB>
 8003b5c:	e08e      	b.n	8003c7c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	08db      	lsrs	r3, r3, #3
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_I2C_EV_IRQHandler+0xb2>
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	0a5b      	lsrs	r3, r3, #9
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fdce 	bl	8004718 <I2C_Master_ADD10>
 8003b7c:	e07e      	b.n	8003c7c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <HAL_I2C_EV_IRQHandler+0xd2>
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	0a5b      	lsrs	r3, r3, #9
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fde8 	bl	800476c <I2C_Master_ADDR>
 8003b9c:	e06e      	b.n	8003c7c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d037      	beq.n	8003c1a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb8:	f000 80ef 	beq.w	8003d9a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	09db      	lsrs	r3, r3, #7
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00f      	beq.n	8003be8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	0a9b      	lsrs	r3, r3, #10
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d103      	bne.n	8003be8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f9e5 	bl	8003fb0 <I2C_MasterTransmit_TXE>
 8003be6:	e049      	b.n	8003c7c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80d2 	beq.w	8003d9a <HAL_I2C_EV_IRQHandler+0x2ce>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	0a5b      	lsrs	r3, r3, #9
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80cb 	beq.w	8003d9a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d103      	bne.n	8003c12 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fa6c 	bl	80040e8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c10:	e0c3      	b.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fad0 	bl	80041b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c18:	e0bf      	b.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c28:	f000 80b7 	beq.w	8003d9a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	099b      	lsrs	r3, r3, #6
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00f      	beq.n	8003c58 <HAL_I2C_EV_IRQHandler+0x18c>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	0a9b      	lsrs	r3, r3, #10
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d009      	beq.n	8003c58 <HAL_I2C_EV_IRQHandler+0x18c>
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d103      	bne.n	8003c58 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fb40 	bl	80042d6 <I2C_MasterReceive_RXNE>
 8003c56:	e011      	b.n	8003c7c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 809a 	beq.w	8003d9a <HAL_I2C_EV_IRQHandler+0x2ce>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	0a5b      	lsrs	r3, r3, #9
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8093 	beq.w	8003d9a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fbdf 	bl	8004438 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c7a:	e08e      	b.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2ce>
 8003c7c:	e08d      	b.n	8003d9a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	e007      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	085b      	lsrs	r3, r3, #1
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d012      	beq.n	8003cd2 <HAL_I2C_EV_IRQHandler+0x206>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	0a5b      	lsrs	r3, r3, #9
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00c      	beq.n	8003cd2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 ff9d 	bl	8004c0a <I2C_Slave_ADDR>
 8003cd0:	e066      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_I2C_EV_IRQHandler+0x226>
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	0a5b      	lsrs	r3, r3, #9
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 ffd2 	bl	8004c94 <I2C_Slave_STOPF>
 8003cf0:	e056      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cf2:	7bbb      	ldrb	r3, [r7, #14]
 8003cf4:	2b21      	cmp	r3, #33	; 0x21
 8003cf6:	d002      	beq.n	8003cfe <HAL_I2C_EV_IRQHandler+0x232>
 8003cf8:	7bbb      	ldrb	r3, [r7, #14]
 8003cfa:	2b29      	cmp	r3, #41	; 0x29
 8003cfc:	d125      	bne.n	8003d4a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	09db      	lsrs	r3, r3, #7
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00f      	beq.n	8003d2a <HAL_I2C_EV_IRQHandler+0x25e>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	0a9b      	lsrs	r3, r3, #10
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <HAL_I2C_EV_IRQHandler+0x25e>
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 feb3 	bl	8004a8e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d28:	e039      	b.n	8003d9e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	089b      	lsrs	r3, r3, #2
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d033      	beq.n	8003d9e <HAL_I2C_EV_IRQHandler+0x2d2>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	0a5b      	lsrs	r3, r3, #9
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d02d      	beq.n	8003d9e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fee0 	bl	8004b08 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d48:	e029      	b.n	8003d9e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	099b      	lsrs	r3, r3, #6
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00f      	beq.n	8003d76 <HAL_I2C_EV_IRQHandler+0x2aa>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	0a9b      	lsrs	r3, r3, #10
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HAL_I2C_EV_IRQHandler+0x2aa>
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 feeb 	bl	8004b4a <I2C_SlaveReceive_RXNE>
 8003d74:	e014      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00e      	beq.n	8003da0 <HAL_I2C_EV_IRQHandler+0x2d4>
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	0a5b      	lsrs	r3, r3, #9
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 ff19 	bl	8004bc6 <I2C_SlaveReceive_BTF>
 8003d94:	e004      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d9e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b08a      	sub	sp, #40	; 0x28
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00e      	beq.n	8003df4 <HAL_I2C_ER_IRQHandler+0x4e>
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003df2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	0a5b      	lsrs	r3, r3, #9
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00e      	beq.n	8003e1e <HAL_I2C_ER_IRQHandler+0x78>
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f043 0302 	orr.w	r3, r3, #2
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003e1c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	0a9b      	lsrs	r3, r3, #10
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d03f      	beq.n	8003eaa <HAL_I2C_ER_IRQHandler+0x104>
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	0a1b      	lsrs	r3, r3, #8
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d039      	beq.n	8003eaa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003e36:	7efb      	ldrb	r3, [r7, #27]
 8003e38:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003e50:	7ebb      	ldrb	r3, [r7, #26]
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d112      	bne.n	8003e7c <HAL_I2C_ER_IRQHandler+0xd6>
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10f      	bne.n	8003e7c <HAL_I2C_ER_IRQHandler+0xd6>
 8003e5c:	7cfb      	ldrb	r3, [r7, #19]
 8003e5e:	2b21      	cmp	r3, #33	; 0x21
 8003e60:	d008      	beq.n	8003e74 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003e62:	7cfb      	ldrb	r3, [r7, #19]
 8003e64:	2b29      	cmp	r3, #41	; 0x29
 8003e66:	d005      	beq.n	8003e74 <HAL_I2C_ER_IRQHandler+0xce>
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	2b28      	cmp	r3, #40	; 0x28
 8003e6c:	d106      	bne.n	8003e7c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b21      	cmp	r3, #33	; 0x21
 8003e72:	d103      	bne.n	8003e7c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f001 f83d 	bl	8004ef4 <I2C_Slave_AF>
 8003e7a:	e016      	b.n	8003eaa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e84:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e8e:	7efb      	ldrb	r3, [r7, #27]
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d002      	beq.n	8003e9a <HAL_I2C_ER_IRQHandler+0xf4>
 8003e94:	7efb      	ldrb	r3, [r7, #27]
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d107      	bne.n	8003eaa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	0adb      	lsrs	r3, r3, #11
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_I2C_ER_IRQHandler+0x12e>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003ed2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f001 f874 	bl	8004fd4 <I2C_ITError>
  }
}
 8003eec:	bf00      	nop
 8003eee:	3728      	adds	r7, #40	; 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	70fb      	strb	r3, [r7, #3]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d150      	bne.n	8004078 <I2C_MasterTransmit_TXE+0xc8>
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b21      	cmp	r3, #33	; 0x21
 8003fda:	d14d      	bne.n	8004078 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d01d      	beq.n	800401e <I2C_MasterTransmit_TXE+0x6e>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d01a      	beq.n	800401e <I2C_MasterTransmit_TXE+0x6e>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fee:	d016      	beq.n	800401e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ffe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2211      	movs	r2, #17
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fc ff24 	bl	8000e64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800401c:	e060      	b.n	80040e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800402c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d107      	bne.n	8004068 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff ff7d 	bl	8003f60 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004066:	e03b      	b.n	80040e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7fc fef7 	bl	8000e64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004076:	e033      	b.n	80040e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b21      	cmp	r3, #33	; 0x21
 800407c:	d005      	beq.n	800408a <I2C_MasterTransmit_TXE+0xda>
 800407e:	7bbb      	ldrb	r3, [r7, #14]
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d12d      	bne.n	80040e0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b22      	cmp	r3, #34	; 0x22
 8004088:	d12a      	bne.n	80040e0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d108      	bne.n	80040a6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80040a4:	e01c      	b.n	80040e0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d103      	bne.n	80040ba <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f880 	bl	80041b8 <I2C_MemoryTransmit_TXE_BTF>
}
 80040b8:	e012      	b.n	80040e0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	781a      	ldrb	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040de:	e7ff      	b.n	80040e0 <I2C_MasterTransmit_TXE+0x130>
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b21      	cmp	r3, #33	; 0x21
 8004100:	d156      	bne.n	80041b0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d012      	beq.n	8004132 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004130:	e03e      	b.n	80041b0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d01d      	beq.n	8004174 <I2C_MasterTransmit_BTF+0x8c>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b20      	cmp	r3, #32
 800413c:	d01a      	beq.n	8004174 <I2C_MasterTransmit_BTF+0x8c>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004144:	d016      	beq.n	8004174 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004154:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2211      	movs	r2, #17
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fc fe79 	bl	8000e64 <HAL_I2C_MasterTxCpltCallback>
}
 8004172:	e01d      	b.n	80041b0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004182:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004192:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fc fe5a 	bl	8000e64 <HAL_I2C_MasterTxCpltCallback>
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d11d      	bne.n	800420c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d10b      	bne.n	80041f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e8:	1c9a      	adds	r2, r3, #2
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80041ee:	e06e      	b.n	80042ce <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	121b      	asrs	r3, r3, #8
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	651a      	str	r2, [r3, #80]	; 0x50
}
 800420a:	e060      	b.n	80042ce <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004210:	2b01      	cmp	r3, #1
 8004212:	d10b      	bne.n	800422c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004218:	b2da      	uxtb	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	651a      	str	r2, [r3, #80]	; 0x50
}
 800422a:	e050      	b.n	80042ce <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004230:	2b02      	cmp	r3, #2
 8004232:	d14c      	bne.n	80042ce <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b22      	cmp	r3, #34	; 0x22
 8004238:	d108      	bne.n	800424c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	e040      	b.n	80042ce <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d015      	beq.n	8004282 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	2b21      	cmp	r3, #33	; 0x21
 800425a:	d112      	bne.n	8004282 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	781a      	ldrb	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004280:	e025      	b.n	80042ce <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d120      	bne.n	80042ce <I2C_MemoryTransmit_TXE_BTF+0x116>
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b21      	cmp	r3, #33	; 0x21
 8004290:	d11d      	bne.n	80042ce <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042a0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff fe49 	bl	8003f60 <HAL_I2C_MemTxCpltCallback>
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b22      	cmp	r3, #34	; 0x22
 80042e8:	f040 80a2 	bne.w	8004430 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d921      	bls.n	800433e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b03      	cmp	r3, #3
 8004328:	f040 8082 	bne.w	8004430 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800433a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800433c:	e078      	b.n	8004430 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	2b02      	cmp	r3, #2
 8004344:	d074      	beq.n	8004430 <I2C_MasterReceive_RXNE+0x15a>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d002      	beq.n	8004352 <I2C_MasterReceive_RXNE+0x7c>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d16e      	bne.n	8004430 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f001 f818 	bl	8005388 <I2C_WaitOnSTOPRequestThroughIT>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d142      	bne.n	80043e4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800437c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b40      	cmp	r3, #64	; 0x40
 80043b6:	d10a      	bne.n	80043ce <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fdd4 	bl	8003f74 <HAL_I2C_MemRxCpltCallback>
}
 80043cc:	e030      	b.n	8004430 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2212      	movs	r2, #18
 80043da:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff fd89 	bl	8003ef4 <HAL_I2C_MasterRxCpltCallback>
}
 80043e2:	e025      	b.n	8004430 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043f2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff fdac 	bl	8003f88 <HAL_I2C_ErrorCallback>
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b04      	cmp	r3, #4
 800444e:	d11b      	bne.n	8004488 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004486:	e0bd      	b.n	8004604 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b03      	cmp	r3, #3
 8004490:	d129      	bne.n	80044e6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d00a      	beq.n	80044be <I2C_MasterReceive_BTF+0x86>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d007      	beq.n	80044be <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044bc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044e4:	e08e      	b.n	8004604 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d176      	bne.n	80045de <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d002      	beq.n	80044fc <I2C_MasterReceive_BTF+0xc4>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d108      	bne.n	800450e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e019      	b.n	8004542 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d002      	beq.n	800451a <I2C_MasterReceive_BTF+0xe2>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d108      	bne.n	800452c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e00a      	b.n	8004542 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b10      	cmp	r3, #16
 8004530:	d007      	beq.n	8004542 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004540:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800459c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	d10a      	bne.n	80045c8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff fcd7 	bl	8003f74 <HAL_I2C_MemRxCpltCallback>
}
 80045c6:	e01d      	b.n	8004604 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2212      	movs	r2, #18
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff fc8c 	bl	8003ef4 <HAL_I2C_MasterRxCpltCallback>
}
 80045dc:	e012      	b.n	8004604 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d117      	bne.n	8004650 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	b2db      	uxtb	r3, r3
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004638:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800463a:	e067      	b.n	800470c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	b2da      	uxtb	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	611a      	str	r2, [r3, #16]
}
 800464e:	e05d      	b.n	800470c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004658:	d133      	bne.n	80046c2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b21      	cmp	r3, #33	; 0x21
 8004664:	d109      	bne.n	800467a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004676:	611a      	str	r2, [r3, #16]
 8004678:	e008      	b.n	800468c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <I2C_Master_SB+0x92>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d108      	bne.n	80046b0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d032      	beq.n	800470c <I2C_Master_SB+0x100>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d02d      	beq.n	800470c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046be:	605a      	str	r2, [r3, #4]
}
 80046c0:	e024      	b.n	800470c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10e      	bne.n	80046e8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	11db      	asrs	r3, r3, #7
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f003 0306 	and.w	r3, r3, #6
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f063 030f 	orn	r3, r3, #15
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]
}
 80046e6:	e011      	b.n	800470c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10d      	bne.n	800470c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	11db      	asrs	r3, r3, #7
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f003 0306 	and.w	r3, r3, #6
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f063 030e 	orn	r3, r3, #14
 8004704:	b2da      	uxtb	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	b2da      	uxtb	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <I2C_Master_ADD10+0x24>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	2b00      	cmp	r3, #0
 800473a:	d011      	beq.n	8004760 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <I2C_Master_ADD10+0x38>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800475e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800476c:	b480      	push	{r7}
 800476e:	b091      	sub	sp, #68	; 0x44
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800477a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b22      	cmp	r3, #34	; 0x22
 8004794:	f040 8169 	bne.w	8004a6a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10f      	bne.n	80047c0 <I2C_Master_ADDR+0x54>
 80047a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d10b      	bne.n	80047c0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a8:	2300      	movs	r3, #0
 80047aa:	633b      	str	r3, [r7, #48]	; 0x30
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	633b      	str	r3, [r7, #48]	; 0x30
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	e160      	b.n	8004a82 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d11d      	bne.n	8004804 <I2C_Master_ADDR+0x98>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047d0:	d118      	bne.n	8004804 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d2:	2300      	movs	r3, #0
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047f6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	651a      	str	r2, [r3, #80]	; 0x50
 8004802:	e13e      	b.n	8004a82 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d113      	bne.n	8004836 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480e:	2300      	movs	r3, #0
 8004810:	62bb      	str	r3, [r7, #40]	; 0x28
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e115      	b.n	8004a62 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	f040 808a 	bne.w	8004956 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004848:	d137      	bne.n	80048ba <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004858:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004868:	d113      	bne.n	8004892 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004878:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487a:	2300      	movs	r3, #0
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	e0e7      	b.n	8004a62 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004892:	2300      	movs	r3, #0
 8004894:	623b      	str	r3, [r7, #32]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	623b      	str	r3, [r7, #32]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	623b      	str	r3, [r7, #32]
 80048a6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	e0d3      	b.n	8004a62 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d02e      	beq.n	800491e <I2C_Master_ADDR+0x1b2>
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d02b      	beq.n	800491e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80048c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c8:	2b12      	cmp	r3, #18
 80048ca:	d102      	bne.n	80048d2 <I2C_Master_ADDR+0x166>
 80048cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d125      	bne.n	800491e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d00e      	beq.n	80048f6 <I2C_Master_ADDR+0x18a>
 80048d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d00b      	beq.n	80048f6 <I2C_Master_ADDR+0x18a>
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d008      	beq.n	80048f6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e007      	b.n	8004906 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004904:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	e0a1      	b.n	8004a62 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e085      	b.n	8004a62 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d14d      	bne.n	80049fc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004962:	2b04      	cmp	r3, #4
 8004964:	d016      	beq.n	8004994 <I2C_Master_ADDR+0x228>
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	2b02      	cmp	r3, #2
 800496a:	d013      	beq.n	8004994 <I2C_Master_ADDR+0x228>
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	2b10      	cmp	r3, #16
 8004970:	d010      	beq.n	8004994 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004980:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e007      	b.n	80049a4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049a2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b2:	d117      	bne.n	80049e4 <I2C_Master_ADDR+0x278>
 80049b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049ba:	d00b      	beq.n	80049d4 <I2C_Master_ADDR+0x268>
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d008      	beq.n	80049d4 <I2C_Master_ADDR+0x268>
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d005      	beq.n	80049d4 <I2C_Master_ADDR+0x268>
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	2b10      	cmp	r3, #16
 80049cc:	d002      	beq.n	80049d4 <I2C_Master_ADDR+0x268>
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d107      	bne.n	80049e4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049e2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	e032      	b.n	8004a62 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a0a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1a:	d117      	bne.n	8004a4c <I2C_Master_ADDR+0x2e0>
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a22:	d00b      	beq.n	8004a3c <I2C_Master_ADDR+0x2d0>
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d008      	beq.n	8004a3c <I2C_Master_ADDR+0x2d0>
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d005      	beq.n	8004a3c <I2C_Master_ADDR+0x2d0>
 8004a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a32:	2b10      	cmp	r3, #16
 8004a34:	d002      	beq.n	8004a3c <I2C_Master_ADDR+0x2d0>
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d107      	bne.n	8004a4c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a4a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a68:	e00b      	b.n	8004a82 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
}
 8004a80:	e7ff      	b.n	8004a82 <I2C_Master_ADDR+0x316>
 8004a82:	bf00      	nop
 8004a84:	3744      	adds	r7, #68	; 0x44
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02b      	beq.n	8004b00 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	781a      	ldrb	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d114      	bne.n	8004b00 <I2C_SlaveTransmit_TXE+0x72>
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	2b29      	cmp	r3, #41	; 0x29
 8004ada:	d111      	bne.n	8004b00 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2221      	movs	r2, #33	; 0x21
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2228      	movs	r2, #40	; 0x28
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fa04 	bl	8003f08 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b00:	bf00      	nop
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d011      	beq.n	8004b3e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	781a      	ldrb	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b58:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d02c      	beq.n	8004bbe <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d114      	bne.n	8004bbe <I2C_SlaveReceive_RXNE+0x74>
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	2b2a      	cmp	r3, #42	; 0x2a
 8004b98:	d111      	bne.n	8004bbe <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2222      	movs	r2, #34	; 0x22
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2228      	movs	r2, #40	; 0x28
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff f9af 	bl	8003f1c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d012      	beq.n	8004bfe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c24:	2b28      	cmp	r3, #40	; 0x28
 8004c26:	d127      	bne.n	8004c78 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c36:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	089b      	lsrs	r3, r3, #2
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	09db      	lsrs	r3, r3, #7
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d103      	bne.n	8004c5c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	81bb      	strh	r3, [r7, #12]
 8004c5a:	e002      	b.n	8004c62 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c6a:	89ba      	ldrh	r2, [r7, #12]
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff f95d 	bl	8003f30 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c76:	e008      	b.n	8004c8a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0202 	mvn.w	r2, #2
 8004c80:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf0:	d172      	bne.n	8004dd8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	2b22      	cmp	r3, #34	; 0x22
 8004cf6:	d002      	beq.n	8004cfe <I2C_Slave_STOPF+0x6a>
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8004cfc:	d135      	bne.n	8004d6a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f043 0204 	orr.w	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc fe1d 	bl	8001976 <HAL_DMA_GetState>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d049      	beq.n	8004dd6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	4a69      	ldr	r2, [pc, #420]	; (8004eec <I2C_Slave_STOPF+0x258>)
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fc fdef 	bl	8001932 <HAL_DMA_Abort_IT>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d03d      	beq.n	8004dd6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d64:	4610      	mov	r0, r2
 8004d66:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d68:	e035      	b.n	8004dd6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f043 0204 	orr.w	r2, r3, #4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fc fde7 	bl	8001976 <HAL_DMA_GetState>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d014      	beq.n	8004dd8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db2:	4a4e      	ldr	r2, [pc, #312]	; (8004eec <I2C_Slave_STOPF+0x258>)
 8004db4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fc fdb9 	bl	8001932 <HAL_DMA_Abort_IT>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4798      	blx	r3
 8004dd4:	e000      	b.n	8004dd8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dd6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d03e      	beq.n	8004e60 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d112      	bne.n	8004e16 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d112      	bne.n	8004e4a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e58:	f043 0204 	orr.w	r2, r3, #4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f8b3 	bl	8004fd4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e6e:	e039      	b.n	8004ee4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b2a      	cmp	r3, #42	; 0x2a
 8004e74:	d109      	bne.n	8004e8a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2228      	movs	r2, #40	; 0x28
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff f849 	bl	8003f1c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b28      	cmp	r3, #40	; 0x28
 8004e94:	d111      	bne.n	8004eba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <I2C_Slave_STOPF+0x25c>)
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff f84a 	bl	8003f4c <HAL_I2C_ListenCpltCallback>
}
 8004eb8:	e014      	b.n	8004ee4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	2b22      	cmp	r3, #34	; 0x22
 8004ec0:	d002      	beq.n	8004ec8 <I2C_Slave_STOPF+0x234>
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	2b22      	cmp	r3, #34	; 0x22
 8004ec6:	d10d      	bne.n	8004ee4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff f81c 	bl	8003f1c <HAL_I2C_SlaveRxCpltCallback>
}
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	08005239 	.word	0x08005239
 8004ef0:	ffff0000 	.word	0xffff0000

08004ef4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f02:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d002      	beq.n	8004f16 <I2C_Slave_AF+0x22>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d129      	bne.n	8004f6a <I2C_Slave_AF+0x76>
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	2b28      	cmp	r3, #40	; 0x28
 8004f1a:	d126      	bne.n	8004f6a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a2c      	ldr	r2, [pc, #176]	; (8004fd0 <I2C_Slave_AF+0xdc>)
 8004f20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f30:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f3a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fe fff2 	bl	8003f4c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004f68:	e02e      	b.n	8004fc8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b21      	cmp	r3, #33	; 0x21
 8004f6e:	d126      	bne.n	8004fbe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a17      	ldr	r2, [pc, #92]	; (8004fd0 <I2C_Slave_AF+0xdc>)
 8004f74:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2221      	movs	r2, #33	; 0x21
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f9a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fa4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fe ffa6 	bl	8003f08 <HAL_I2C_SlaveTxCpltCallback>
}
 8004fbc:	e004      	b.n	8004fc8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fc6:	615a      	str	r2, [r3, #20]
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	ffff0000 	.word	0xffff0000

08004fd4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fec:	7bbb      	ldrb	r3, [r7, #14]
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d002      	beq.n	8004ff8 <I2C_ITError+0x24>
 8004ff2:	7bbb      	ldrb	r3, [r7, #14]
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d10a      	bne.n	800500e <I2C_ITError+0x3a>
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b22      	cmp	r3, #34	; 0x22
 8004ffc:	d107      	bne.n	800500e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800500c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005014:	2b28      	cmp	r3, #40	; 0x28
 8005016:	d107      	bne.n	8005028 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2228      	movs	r2, #40	; 0x28
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005026:	e015      	b.n	8005054 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005036:	d00a      	beq.n	800504e <I2C_ITError+0x7a>
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b60      	cmp	r3, #96	; 0x60
 800503c:	d007      	beq.n	800504e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005062:	d162      	bne.n	800512a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005072:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	d020      	beq.n	80050c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005086:	4a6a      	ldr	r2, [pc, #424]	; (8005230 <I2C_ITError+0x25c>)
 8005088:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	4618      	mov	r0, r3
 8005090:	f7fc fc4f 	bl	8001932 <HAL_DMA_Abort_IT>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8089 	beq.w	80051ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0201 	bic.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050be:	4610      	mov	r0, r2
 80050c0:	4798      	blx	r3
 80050c2:	e074      	b.n	80051ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	4a59      	ldr	r2, [pc, #356]	; (8005230 <I2C_ITError+0x25c>)
 80050ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fc fc2e 	bl	8001932 <HAL_DMA_Abort_IT>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d068      	beq.n	80051ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d10b      	bne.n	8005102 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0201 	bic.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005124:	4610      	mov	r0, r2
 8005126:	4798      	blx	r3
 8005128:	e041      	b.n	80051ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b60      	cmp	r3, #96	; 0x60
 8005134:	d125      	bne.n	8005182 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d10b      	bne.n	800516a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fe ff0e 	bl	8003f9c <HAL_I2C_AbortCpltCallback>
 8005180:	e015      	b.n	80051ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d10b      	bne.n	80051a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7fe feed 	bl	8003f88 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10e      	bne.n	80051dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d104      	bne.n	80051dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d113      	bne.n	8005228 <I2C_ITError+0x254>
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b28      	cmp	r3, #40	; 0x28
 8005204:	d110      	bne.n	8005228 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <I2C_ITError+0x260>)
 800520a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fe fe92 	bl	8003f4c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	08005239 	.word	0x08005239
 8005234:	ffff0000 	.word	0xffff0000

08005238 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005250:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005252:	4b4b      	ldr	r3, [pc, #300]	; (8005380 <I2C_DMAAbort+0x148>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	08db      	lsrs	r3, r3, #3
 8005258:	4a4a      	ldr	r2, [pc, #296]	; (8005384 <I2C_DMAAbort+0x14c>)
 800525a:	fba2 2303 	umull	r2, r3, r2, r3
 800525e:	0a1a      	lsrs	r2, r3, #8
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	00da      	lsls	r2, r3, #3
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f043 0220 	orr.w	r2, r3, #32
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800527e:	e00a      	b.n	8005296 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3b01      	subs	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005294:	d0ea      	beq.n	800526c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a2:	2200      	movs	r2, #0
 80052a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	2200      	movs	r2, #0
 80052b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2200      	movs	r2, #0
 80052ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d8:	2200      	movs	r2, #0
 80052da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	2200      	movs	r2, #0
 80052ea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0201 	bic.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b60      	cmp	r3, #96	; 0x60
 8005306:	d10e      	bne.n	8005326 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2200      	movs	r2, #0
 800531c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800531e:	6978      	ldr	r0, [r7, #20]
 8005320:	f7fe fe3c 	bl	8003f9c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005324:	e027      	b.n	8005376 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005326:	7cfb      	ldrb	r3, [r7, #19]
 8005328:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800532c:	2b28      	cmp	r3, #40	; 0x28
 800532e:	d117      	bne.n	8005360 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800534e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2228      	movs	r2, #40	; 0x28
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800535e:	e007      	b.n	8005370 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005370:	6978      	ldr	r0, [r7, #20]
 8005372:	f7fe fe09 	bl	8003f88 <HAL_I2C_ErrorCallback>
}
 8005376:	bf00      	nop
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20000004 	.word	0x20000004
 8005384:	14f8b589 	.word	0x14f8b589

08005388 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005394:	4b13      	ldr	r3, [pc, #76]	; (80053e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	08db      	lsrs	r3, r3, #3
 800539a:	4a13      	ldr	r2, [pc, #76]	; (80053e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800539c:	fba2 2303 	umull	r2, r3, r2, r3
 80053a0:	0a1a      	lsrs	r2, r3, #8
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d107      	bne.n	80053c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	f043 0220 	orr.w	r2, r3, #32
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e008      	b.n	80053d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053d4:	d0e9      	beq.n	80053aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	20000004 	.word	0x20000004
 80053e8:	14f8b589 	.word	0x14f8b589

080053ec <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80053fc:	d103      	bne.n	8005406 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005404:	e007      	b.n	8005416 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800540e:	d102      	bne.n	8005416 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2208      	movs	r2, #8
 8005414:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e25b      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d075      	beq.n	800552e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005442:	4ba3      	ldr	r3, [pc, #652]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b04      	cmp	r3, #4
 800544c:	d00c      	beq.n	8005468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800544e:	4ba0      	ldr	r3, [pc, #640]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005456:	2b08      	cmp	r3, #8
 8005458:	d112      	bne.n	8005480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800545a:	4b9d      	ldr	r3, [pc, #628]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005466:	d10b      	bne.n	8005480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	4b99      	ldr	r3, [pc, #612]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d05b      	beq.n	800552c <HAL_RCC_OscConfig+0x108>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d157      	bne.n	800552c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e236      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005488:	d106      	bne.n	8005498 <HAL_RCC_OscConfig+0x74>
 800548a:	4b91      	ldr	r3, [pc, #580]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a90      	ldr	r2, [pc, #576]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e01d      	b.n	80054d4 <HAL_RCC_OscConfig+0xb0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCC_OscConfig+0x98>
 80054a2:	4b8b      	ldr	r3, [pc, #556]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a8a      	ldr	r2, [pc, #552]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	4b88      	ldr	r3, [pc, #544]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a87      	ldr	r2, [pc, #540]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e00b      	b.n	80054d4 <HAL_RCC_OscConfig+0xb0>
 80054bc:	4b84      	ldr	r3, [pc, #528]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a83      	ldr	r2, [pc, #524]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4b81      	ldr	r3, [pc, #516]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a80      	ldr	r2, [pc, #512]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d013      	beq.n	8005504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054dc:	f7fc f8ea 	bl	80016b4 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054e4:	f7fc f8e6 	bl	80016b4 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e1fb      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f6:	4b76      	ldr	r3, [pc, #472]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0xc0>
 8005502:	e014      	b.n	800552e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fc f8d6 	bl	80016b4 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800550c:	f7fc f8d2 	bl	80016b4 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e1e7      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800551e:	4b6c      	ldr	r3, [pc, #432]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0xe8>
 800552a:	e000      	b.n	800552e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d063      	beq.n	8005602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800553a:	4b65      	ldr	r3, [pc, #404]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005546:	4b62      	ldr	r3, [pc, #392]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800554e:	2b08      	cmp	r3, #8
 8005550:	d11c      	bne.n	800558c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005552:	4b5f      	ldr	r3, [pc, #380]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d116      	bne.n	800558c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800555e:	4b5c      	ldr	r3, [pc, #368]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_RCC_OscConfig+0x152>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d001      	beq.n	8005576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e1bb      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005576:	4b56      	ldr	r3, [pc, #344]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4952      	ldr	r1, [pc, #328]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800558a:	e03a      	b.n	8005602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d020      	beq.n	80055d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005594:	4b4f      	ldr	r3, [pc, #316]	; (80056d4 <HAL_RCC_OscConfig+0x2b0>)
 8005596:	2201      	movs	r2, #1
 8005598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559a:	f7fc f88b 	bl	80016b4 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055a2:	f7fc f887 	bl	80016b4 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e19c      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b4:	4b46      	ldr	r3, [pc, #280]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c0:	4b43      	ldr	r3, [pc, #268]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	4940      	ldr	r1, [pc, #256]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	600b      	str	r3, [r1, #0]
 80055d4:	e015      	b.n	8005602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055d6:	4b3f      	ldr	r3, [pc, #252]	; (80056d4 <HAL_RCC_OscConfig+0x2b0>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7fc f86a 	bl	80016b4 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055e4:	f7fc f866 	bl	80016b4 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e17b      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055f6:	4b36      	ldr	r3, [pc, #216]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d030      	beq.n	8005670 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d016      	beq.n	8005644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005616:	4b30      	ldr	r3, [pc, #192]	; (80056d8 <HAL_RCC_OscConfig+0x2b4>)
 8005618:	2201      	movs	r2, #1
 800561a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561c:	f7fc f84a 	bl	80016b4 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005624:	f7fc f846 	bl	80016b4 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e15b      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005636:	4b26      	ldr	r3, [pc, #152]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x200>
 8005642:	e015      	b.n	8005670 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005644:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <HAL_RCC_OscConfig+0x2b4>)
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564a:	f7fc f833 	bl	80016b4 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005652:	f7fc f82f 	bl	80016b4 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e144      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005664:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f0      	bne.n	8005652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 80a0 	beq.w	80057be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005682:	4b13      	ldr	r3, [pc, #76]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10f      	bne.n	80056ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	4a0e      	ldr	r2, [pc, #56]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 8005698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569c:	6413      	str	r3, [r2, #64]	; 0x40
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <HAL_RCC_OscConfig+0x2ac>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056aa:	2301      	movs	r3, #1
 80056ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_RCC_OscConfig+0x2b8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d121      	bne.n	80056fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ba:	4b08      	ldr	r3, [pc, #32]	; (80056dc <HAL_RCC_OscConfig+0x2b8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a07      	ldr	r2, [pc, #28]	; (80056dc <HAL_RCC_OscConfig+0x2b8>)
 80056c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c6:	f7fb fff5 	bl	80016b4 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056cc:	e011      	b.n	80056f2 <HAL_RCC_OscConfig+0x2ce>
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800
 80056d4:	42470000 	.word	0x42470000
 80056d8:	42470e80 	.word	0x42470e80
 80056dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e0:	f7fb ffe8 	bl	80016b4 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e0fd      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f2:	4b81      	ldr	r3, [pc, #516]	; (80058f8 <HAL_RCC_OscConfig+0x4d4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d106      	bne.n	8005714 <HAL_RCC_OscConfig+0x2f0>
 8005706:	4b7d      	ldr	r3, [pc, #500]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	4a7c      	ldr	r2, [pc, #496]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	6713      	str	r3, [r2, #112]	; 0x70
 8005712:	e01c      	b.n	800574e <HAL_RCC_OscConfig+0x32a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b05      	cmp	r3, #5
 800571a:	d10c      	bne.n	8005736 <HAL_RCC_OscConfig+0x312>
 800571c:	4b77      	ldr	r3, [pc, #476]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	4a76      	ldr	r2, [pc, #472]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 8005722:	f043 0304 	orr.w	r3, r3, #4
 8005726:	6713      	str	r3, [r2, #112]	; 0x70
 8005728:	4b74      	ldr	r3, [pc, #464]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	4a73      	ldr	r2, [pc, #460]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	6713      	str	r3, [r2, #112]	; 0x70
 8005734:	e00b      	b.n	800574e <HAL_RCC_OscConfig+0x32a>
 8005736:	4b71      	ldr	r3, [pc, #452]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 8005738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573a:	4a70      	ldr	r2, [pc, #448]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 800573c:	f023 0301 	bic.w	r3, r3, #1
 8005740:	6713      	str	r3, [r2, #112]	; 0x70
 8005742:	4b6e      	ldr	r3, [pc, #440]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	4a6d      	ldr	r2, [pc, #436]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 8005748:	f023 0304 	bic.w	r3, r3, #4
 800574c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d015      	beq.n	8005782 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005756:	f7fb ffad 	bl	80016b4 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800575c:	e00a      	b.n	8005774 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800575e:	f7fb ffa9 	bl	80016b4 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	f241 3288 	movw	r2, #5000	; 0x1388
 800576c:	4293      	cmp	r3, r2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e0bc      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005774:	4b61      	ldr	r3, [pc, #388]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 8005776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0ee      	beq.n	800575e <HAL_RCC_OscConfig+0x33a>
 8005780:	e014      	b.n	80057ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005782:	f7fb ff97 	bl	80016b4 <HAL_GetTick>
 8005786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005788:	e00a      	b.n	80057a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800578a:	f7fb ff93 	bl	80016b4 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f241 3288 	movw	r2, #5000	; 0x1388
 8005798:	4293      	cmp	r3, r2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e0a6      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057a0:	4b56      	ldr	r3, [pc, #344]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1ee      	bne.n	800578a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d105      	bne.n	80057be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057b2:	4b52      	ldr	r3, [pc, #328]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	4a51      	ldr	r2, [pc, #324]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 80057b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 8092 	beq.w	80058ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057c8:	4b4c      	ldr	r3, [pc, #304]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 030c 	and.w	r3, r3, #12
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d05c      	beq.n	800588e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d141      	bne.n	8005860 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057dc:	4b48      	ldr	r3, [pc, #288]	; (8005900 <HAL_RCC_OscConfig+0x4dc>)
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e2:	f7fb ff67 	bl	80016b4 <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ea:	f7fb ff63 	bl	80016b4 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e078      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fc:	4b3f      	ldr	r3, [pc, #252]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f0      	bne.n	80057ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	019b      	lsls	r3, r3, #6
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	085b      	lsrs	r3, r3, #1
 8005820:	3b01      	subs	r3, #1
 8005822:	041b      	lsls	r3, r3, #16
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	061b      	lsls	r3, r3, #24
 800582c:	4933      	ldr	r1, [pc, #204]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 800582e:	4313      	orrs	r3, r2
 8005830:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005832:	4b33      	ldr	r3, [pc, #204]	; (8005900 <HAL_RCC_OscConfig+0x4dc>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fb ff3c 	bl	80016b4 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005840:	f7fb ff38 	bl	80016b4 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e04d      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005852:	4b2a      	ldr	r3, [pc, #168]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x41c>
 800585e:	e045      	b.n	80058ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005860:	4b27      	ldr	r3, [pc, #156]	; (8005900 <HAL_RCC_OscConfig+0x4dc>)
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005866:	f7fb ff25 	bl	80016b4 <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800586e:	f7fb ff21 	bl	80016b4 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e036      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005880:	4b1e      	ldr	r3, [pc, #120]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f0      	bne.n	800586e <HAL_RCC_OscConfig+0x44a>
 800588c:	e02e      	b.n	80058ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e029      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800589a:	4b18      	ldr	r3, [pc, #96]	; (80058fc <HAL_RCC_OscConfig+0x4d8>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d11c      	bne.n	80058e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d115      	bne.n	80058e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058c2:	4013      	ands	r3, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d10d      	bne.n	80058e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d106      	bne.n	80058e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d001      	beq.n	80058ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40007000 	.word	0x40007000
 80058fc:	40023800 	.word	0x40023800
 8005900:	42470060 	.word	0x42470060

08005904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0cc      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005918:	4b68      	ldr	r3, [pc, #416]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d90c      	bls.n	8005940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005926:	4b65      	ldr	r3, [pc, #404]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800592e:	4b63      	ldr	r3, [pc, #396]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d001      	beq.n	8005940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e0b8      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d020      	beq.n	800598e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005958:	4b59      	ldr	r3, [pc, #356]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4a58      	ldr	r2, [pc, #352]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005962:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005970:	4b53      	ldr	r3, [pc, #332]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	4a52      	ldr	r2, [pc, #328]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800597a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800597c:	4b50      	ldr	r3, [pc, #320]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	494d      	ldr	r1, [pc, #308]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	4313      	orrs	r3, r2
 800598c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d044      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d107      	bne.n	80059b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a2:	4b47      	ldr	r3, [pc, #284]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d119      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e07f      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d003      	beq.n	80059c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d107      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c2:	4b3f      	ldr	r3, [pc, #252]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e06f      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d2:	4b3b      	ldr	r3, [pc, #236]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e067      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059e2:	4b37      	ldr	r3, [pc, #220]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f023 0203 	bic.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4934      	ldr	r1, [pc, #208]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059f4:	f7fb fe5e 	bl	80016b4 <HAL_GetTick>
 80059f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fa:	e00a      	b.n	8005a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fc:	f7fb fe5a 	bl	80016b4 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e04f      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a12:	4b2b      	ldr	r3, [pc, #172]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 020c 	and.w	r2, r3, #12
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d1eb      	bne.n	80059fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a24:	4b25      	ldr	r3, [pc, #148]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d20c      	bcs.n	8005a4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a32:	4b22      	ldr	r3, [pc, #136]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	4b20      	ldr	r3, [pc, #128]	; (8005abc <HAL_RCC_ClockConfig+0x1b8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e032      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a58:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	4916      	ldr	r1, [pc, #88]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	490e      	ldr	r1, [pc, #56]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a8a:	f000 f821 	bl	8005ad0 <HAL_RCC_GetSysClockFreq>
 8005a8e:	4601      	mov	r1, r0
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	4a0a      	ldr	r2, [pc, #40]	; (8005ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a9c:	5cd3      	ldrb	r3, [r2, r3]
 8005a9e:	fa21 f303 	lsr.w	r3, r1, r3
 8005aa2:	4a09      	ldr	r2, [pc, #36]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aa6:	4b09      	ldr	r3, [pc, #36]	; (8005acc <HAL_RCC_ClockConfig+0x1c8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fb fdbe 	bl	800162c <HAL_InitTick>

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40023c00 	.word	0x40023c00
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	0800fa58 	.word	0x0800fa58
 8005ac8:	20000004 	.word	0x20000004
 8005acc:	20000008 	.word	0x20000008

08005ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	607b      	str	r3, [r7, #4]
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ae6:	4b63      	ldr	r3, [pc, #396]	; (8005c74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 030c 	and.w	r3, r3, #12
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d007      	beq.n	8005b02 <HAL_RCC_GetSysClockFreq+0x32>
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d008      	beq.n	8005b08 <HAL_RCC_GetSysClockFreq+0x38>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f040 80b4 	bne.w	8005c64 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005afc:	4b5e      	ldr	r3, [pc, #376]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005afe:	60bb      	str	r3, [r7, #8]
       break;
 8005b00:	e0b3      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b02:	4b5e      	ldr	r3, [pc, #376]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005b04:	60bb      	str	r3, [r7, #8]
      break;
 8005b06:	e0b0      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b08:	4b5a      	ldr	r3, [pc, #360]	; (8005c74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b12:	4b58      	ldr	r3, [pc, #352]	; (8005c74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d04a      	beq.n	8005bb4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b1e:	4b55      	ldr	r3, [pc, #340]	; (8005c74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	099b      	lsrs	r3, r3, #6
 8005b24:	f04f 0400 	mov.w	r4, #0
 8005b28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	ea03 0501 	and.w	r5, r3, r1
 8005b34:	ea04 0602 	and.w	r6, r4, r2
 8005b38:	4629      	mov	r1, r5
 8005b3a:	4632      	mov	r2, r6
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	f04f 0400 	mov.w	r4, #0
 8005b44:	0154      	lsls	r4, r2, #5
 8005b46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b4a:	014b      	lsls	r3, r1, #5
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4622      	mov	r2, r4
 8005b50:	1b49      	subs	r1, r1, r5
 8005b52:	eb62 0206 	sbc.w	r2, r2, r6
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	f04f 0400 	mov.w	r4, #0
 8005b5e:	0194      	lsls	r4, r2, #6
 8005b60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b64:	018b      	lsls	r3, r1, #6
 8005b66:	1a5b      	subs	r3, r3, r1
 8005b68:	eb64 0402 	sbc.w	r4, r4, r2
 8005b6c:	f04f 0100 	mov.w	r1, #0
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	00e2      	lsls	r2, r4, #3
 8005b76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b7a:	00d9      	lsls	r1, r3, #3
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4614      	mov	r4, r2
 8005b80:	195b      	adds	r3, r3, r5
 8005b82:	eb44 0406 	adc.w	r4, r4, r6
 8005b86:	f04f 0100 	mov.w	r1, #0
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	0262      	lsls	r2, r4, #9
 8005b90:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005b94:	0259      	lsls	r1, r3, #9
 8005b96:	460b      	mov	r3, r1
 8005b98:	4614      	mov	r4, r2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f04f 0400 	mov.w	r4, #0
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4623      	mov	r3, r4
 8005ba8:	f7fa fb16 	bl	80001d8 <__aeabi_uldivmod>
 8005bac:	4603      	mov	r3, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e049      	b.n	8005c48 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb4:	4b2f      	ldr	r3, [pc, #188]	; (8005c74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	099b      	lsrs	r3, r3, #6
 8005bba:	f04f 0400 	mov.w	r4, #0
 8005bbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	ea03 0501 	and.w	r5, r3, r1
 8005bca:	ea04 0602 	and.w	r6, r4, r2
 8005bce:	4629      	mov	r1, r5
 8005bd0:	4632      	mov	r2, r6
 8005bd2:	f04f 0300 	mov.w	r3, #0
 8005bd6:	f04f 0400 	mov.w	r4, #0
 8005bda:	0154      	lsls	r4, r2, #5
 8005bdc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005be0:	014b      	lsls	r3, r1, #5
 8005be2:	4619      	mov	r1, r3
 8005be4:	4622      	mov	r2, r4
 8005be6:	1b49      	subs	r1, r1, r5
 8005be8:	eb62 0206 	sbc.w	r2, r2, r6
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	f04f 0400 	mov.w	r4, #0
 8005bf4:	0194      	lsls	r4, r2, #6
 8005bf6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005bfa:	018b      	lsls	r3, r1, #6
 8005bfc:	1a5b      	subs	r3, r3, r1
 8005bfe:	eb64 0402 	sbc.w	r4, r4, r2
 8005c02:	f04f 0100 	mov.w	r1, #0
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	00e2      	lsls	r2, r4, #3
 8005c0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c10:	00d9      	lsls	r1, r3, #3
 8005c12:	460b      	mov	r3, r1
 8005c14:	4614      	mov	r4, r2
 8005c16:	195b      	adds	r3, r3, r5
 8005c18:	eb44 0406 	adc.w	r4, r4, r6
 8005c1c:	f04f 0100 	mov.w	r1, #0
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	02a2      	lsls	r2, r4, #10
 8005c26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005c2a:	0299      	lsls	r1, r3, #10
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4614      	mov	r4, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	4621      	mov	r1, r4
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f04f 0400 	mov.w	r4, #0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	f7fa facb 	bl	80001d8 <__aeabi_uldivmod>
 8005c42:	4603      	mov	r3, r0
 8005c44:	460c      	mov	r4, r1
 8005c46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c48:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	3301      	adds	r3, #1
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c60:	60bb      	str	r3, [r7, #8]
      break;
 8005c62:	e002      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c64:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005c66:	60bb      	str	r3, [r7, #8]
      break;
 8005c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c74:	40023800 	.word	0x40023800
 8005c78:	00f42400 	.word	0x00f42400
 8005c7c:	007a1200 	.word	0x007a1200

08005c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c84:	4b03      	ldr	r3, [pc, #12]	; (8005c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c86:	681b      	ldr	r3, [r3, #0]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	20000004 	.word	0x20000004

08005c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c9c:	f7ff fff0 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8005ca0:	4601      	mov	r1, r0
 8005ca2:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	0a9b      	lsrs	r3, r3, #10
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	4a03      	ldr	r2, [pc, #12]	; (8005cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cae:	5cd3      	ldrb	r3, [r2, r3]
 8005cb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	0800fa68 	.word	0x0800fa68

08005cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e01d      	b.n	8005d0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fb f9ee 	bl	80010c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	f000 f8e4 	bl	8005ecc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2202      	movs	r2, #2
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b06      	cmp	r3, #6
 8005d36:	d007      	beq.n	8005d48 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_TIM_ConfigClockSource+0x18>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e0a6      	b.n	8005ec4 <HAL_TIM_ConfigClockSource+0x166>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2202      	movs	r2, #2
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d94:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d9c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	d067      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x120>
 8005dae:	2b40      	cmp	r3, #64	; 0x40
 8005db0:	d80b      	bhi.n	8005dca <HAL_TIM_ConfigClockSource+0x6c>
 8005db2:	2b10      	cmp	r3, #16
 8005db4:	d073      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0x140>
 8005db6:	2b10      	cmp	r3, #16
 8005db8:	d802      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x62>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d06f      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005dbe:	e078      	b.n	8005eb2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d06c      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0x140>
 8005dc4:	2b30      	cmp	r3, #48	; 0x30
 8005dc6:	d06a      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005dc8:	e073      	b.n	8005eb2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005dca:	2b70      	cmp	r3, #112	; 0x70
 8005dcc:	d00d      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x8c>
 8005dce:	2b70      	cmp	r3, #112	; 0x70
 8005dd0:	d804      	bhi.n	8005ddc <HAL_TIM_ConfigClockSource+0x7e>
 8005dd2:	2b50      	cmp	r3, #80	; 0x50
 8005dd4:	d033      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0xe0>
 8005dd6:	2b60      	cmp	r3, #96	; 0x60
 8005dd8:	d041      	beq.n	8005e5e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005dda:	e06a      	b.n	8005eb2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de0:	d066      	beq.n	8005eb0 <HAL_TIM_ConfigClockSource+0x152>
 8005de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005de6:	d017      	beq.n	8005e18 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005de8:	e063      	b.n	8005eb2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6899      	ldr	r1, [r3, #8]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f000 f981 	bl	8006100 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	609a      	str	r2, [r3, #8]
      break;
 8005e16:	e04c      	b.n	8005eb2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	6899      	ldr	r1, [r3, #8]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f000 f96a 	bl	8006100 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e3a:	609a      	str	r2, [r3, #8]
      break;
 8005e3c:	e039      	b.n	8005eb2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6859      	ldr	r1, [r3, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f000 f8de 	bl	800600c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2150      	movs	r1, #80	; 0x50
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 f937 	bl	80060ca <TIM_ITRx_SetConfig>
      break;
 8005e5c:	e029      	b.n	8005eb2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	6859      	ldr	r1, [r3, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f000 f8fd 	bl	800606a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2160      	movs	r1, #96	; 0x60
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 f927 	bl	80060ca <TIM_ITRx_SetConfig>
      break;
 8005e7c:	e019      	b.n	8005eb2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	6859      	ldr	r1, [r3, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f000 f8be 	bl	800600c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2140      	movs	r1, #64	; 0x40
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f917 	bl	80060ca <TIM_ITRx_SetConfig>
      break;
 8005e9c:	e009      	b.n	8005eb2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f000 f90e 	bl	80060ca <TIM_ITRx_SetConfig>
      break;
 8005eae:	e000      	b.n	8005eb2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005eb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a40      	ldr	r2, [pc, #256]	; (8005fe0 <TIM_Base_SetConfig+0x114>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eea:	d00f      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a3d      	ldr	r2, [pc, #244]	; (8005fe4 <TIM_Base_SetConfig+0x118>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a3c      	ldr	r2, [pc, #240]	; (8005fe8 <TIM_Base_SetConfig+0x11c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a3b      	ldr	r2, [pc, #236]	; (8005fec <TIM_Base_SetConfig+0x120>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_Base_SetConfig+0x40>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a3a      	ldr	r2, [pc, #232]	; (8005ff0 <TIM_Base_SetConfig+0x124>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d108      	bne.n	8005f1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a2f      	ldr	r2, [pc, #188]	; (8005fe0 <TIM_Base_SetConfig+0x114>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d02b      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2c:	d027      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2c      	ldr	r2, [pc, #176]	; (8005fe4 <TIM_Base_SetConfig+0x118>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d023      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a2b      	ldr	r2, [pc, #172]	; (8005fe8 <TIM_Base_SetConfig+0x11c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d01f      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a2a      	ldr	r2, [pc, #168]	; (8005fec <TIM_Base_SetConfig+0x120>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d01b      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a29      	ldr	r2, [pc, #164]	; (8005ff0 <TIM_Base_SetConfig+0x124>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d017      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a28      	ldr	r2, [pc, #160]	; (8005ff4 <TIM_Base_SetConfig+0x128>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a27      	ldr	r2, [pc, #156]	; (8005ff8 <TIM_Base_SetConfig+0x12c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00f      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <TIM_Base_SetConfig+0x130>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00b      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a25      	ldr	r2, [pc, #148]	; (8006000 <TIM_Base_SetConfig+0x134>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d007      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a24      	ldr	r2, [pc, #144]	; (8006004 <TIM_Base_SetConfig+0x138>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d003      	beq.n	8005f7e <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a23      	ldr	r2, [pc, #140]	; (8006008 <TIM_Base_SetConfig+0x13c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d108      	bne.n	8005f90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <TIM_Base_SetConfig+0x114>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d003      	beq.n	8005fc4 <TIM_Base_SetConfig+0xf8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a0c      	ldr	r2, [pc, #48]	; (8005ff0 <TIM_Base_SetConfig+0x124>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d103      	bne.n	8005fcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	615a      	str	r2, [r3, #20]
}
 8005fd2:	bf00      	nop
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40010000 	.word	0x40010000
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40000800 	.word	0x40000800
 8005fec:	40000c00 	.word	0x40000c00
 8005ff0:	40010400 	.word	0x40010400
 8005ff4:	40014000 	.word	0x40014000
 8005ff8:	40014400 	.word	0x40014400
 8005ffc:	40014800 	.word	0x40014800
 8006000:	40001800 	.word	0x40001800
 8006004:	40001c00 	.word	0x40001c00
 8006008:	40002000 	.word	0x40002000

0800600c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f023 0201 	bic.w	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f023 030a 	bic.w	r3, r3, #10
 8006048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800606a:	b480      	push	{r7}
 800606c:	b087      	sub	sp, #28
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f023 0210 	bic.w	r2, r3, #16
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	031b      	lsls	r3, r3, #12
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f043 0307 	orr.w	r3, r3, #7
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	609a      	str	r2, [r3, #8]
}
 80060f4:	bf00      	nop
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800611a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	021a      	lsls	r2, r3, #8
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	431a      	orrs	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4313      	orrs	r3, r2
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	609a      	str	r2, [r3, #8]
}
 8006134:	bf00      	nop
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006154:	2302      	movs	r3, #2
 8006156:	e05a      	b.n	800620e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a21      	ldr	r2, [pc, #132]	; (800621c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d022      	beq.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a4:	d01d      	beq.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1d      	ldr	r2, [pc, #116]	; (8006220 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d018      	beq.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1a      	ldr	r2, [pc, #104]	; (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00e      	beq.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a18      	ldr	r2, [pc, #96]	; (800622c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d009      	beq.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a17      	ldr	r2, [pc, #92]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d004      	beq.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a15      	ldr	r2, [pc, #84]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d10c      	bne.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40010000 	.word	0x40010000
 8006220:	40000400 	.word	0x40000400
 8006224:	40000800 	.word	0x40000800
 8006228:	40000c00 	.word	0x40000c00
 800622c:	40010400 	.word	0x40010400
 8006230:	40014000 	.word	0x40014000
 8006234:	40001800 	.word	0x40001800

08006238 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006238:	b084      	sub	sp, #16
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	f107 001c 	add.w	r0, r7, #28
 8006246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	2b01      	cmp	r3, #1
 800624e:	d122      	bne.n	8006296 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006254:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627a:	2b01      	cmp	r3, #1
 800627c:	d105      	bne.n	800628a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f94a 	bl	8006524 <USB_CoreReset>
 8006290:	4603      	mov	r3, r0
 8006292:	73fb      	strb	r3, [r7, #15]
 8006294:	e01a      	b.n	80062cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f93e 	bl	8006524 <USB_CoreReset>
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38
 80062be:	e005      	b.n	80062cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d10b      	bne.n	80062ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f043 0206 	orr.w	r2, r3, #6
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f043 0220 	orr.w	r2, r3, #32
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062f6:	b004      	add	sp, #16
 80062f8:	4770      	bx	lr

080062fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f043 0201 	orr.w	r2, r3, #1
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f023 0201 	bic.w	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d106      	bne.n	800636a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	60da      	str	r2, [r3, #12]
 8006368:	e00b      	b.n	8006382 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d106      	bne.n	800637e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60da      	str	r2, [r3, #12]
 800637c:	e001      	b.n	8006382 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e003      	b.n	800638a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006382:	2032      	movs	r0, #50	; 0x32
 8006384:	f7fb f9a2 	bl	80016cc <HAL_Delay>

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	019b      	lsls	r3, r3, #6
 80063a6:	f043 0220 	orr.w	r2, r3, #32
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4a09      	ldr	r2, [pc, #36]	; (80063dc <USB_FlushTxFifo+0x48>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d901      	bls.n	80063c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e006      	b.n	80063ce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d0f0      	beq.n	80063ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	00030d40 	.word	0x00030d40

080063e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2210      	movs	r2, #16
 80063f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3301      	adds	r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4a09      	ldr	r2, [pc, #36]	; (8006420 <USB_FlushRxFifo+0x40>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d901      	bls.n	8006404 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e006      	b.n	8006412 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b10      	cmp	r3, #16
 800640e:	d0f0      	beq.n	80063f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	00030d40 	.word	0x00030d40

08006424 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	; 0x24
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	4611      	mov	r1, r2
 8006430:	461a      	mov	r2, r3
 8006432:	460b      	mov	r3, r1
 8006434:	71fb      	strb	r3, [r7, #7]
 8006436:	4613      	mov	r3, r2
 8006438:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006442:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006446:	2b00      	cmp	r3, #0
 8006448:	d11a      	bne.n	8006480 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800644a:	88bb      	ldrh	r3, [r7, #4]
 800644c:	3303      	adds	r3, #3
 800644e:	089b      	lsrs	r3, r3, #2
 8006450:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006452:	2300      	movs	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	e00f      	b.n	8006478 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006458:	79fb      	ldrb	r3, [r7, #7]
 800645a:	031a      	lsls	r2, r3, #12
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4413      	add	r3, r2
 8006460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006464:	461a      	mov	r2, r3
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	3304      	adds	r3, #4
 8006470:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	3301      	adds	r3, #1
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	429a      	cmp	r2, r3
 800647e:	d3eb      	bcc.n	8006458 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3724      	adds	r7, #36	; 0x24
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800648e:	b480      	push	{r7}
 8006490:	b089      	sub	sp, #36	; 0x24
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	4613      	mov	r3, r2
 800649a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80064a4:	88fb      	ldrh	r3, [r7, #6]
 80064a6:	3303      	adds	r3, #3
 80064a8:	089b      	lsrs	r3, r3, #2
 80064aa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80064ac:	2300      	movs	r3, #0
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	e00b      	b.n	80064ca <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	601a      	str	r2, [r3, #0]
    pDest++;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	3304      	adds	r3, #4
 80064c2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	3301      	adds	r3, #1
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d3ef      	bcc.n	80064b2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80064d2:	69fb      	ldr	r3, [r7, #28]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3724      	adds	r7, #36	; 0x24
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4013      	ands	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064f8:	68fb      	ldr	r3, [r7, #12]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f003 0301 	and.w	r3, r3, #1
}
 8006516:	4618      	mov	r0, r3
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
	...

08006524 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3301      	adds	r3, #1
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a13      	ldr	r2, [pc, #76]	; (8006588 <USB_CoreReset+0x64>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d901      	bls.n	8006542 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e01b      	b.n	800657a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	daf2      	bge.n	8006530 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f043 0201 	orr.w	r2, r3, #1
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3301      	adds	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4a09      	ldr	r2, [pc, #36]	; (8006588 <USB_CoreReset+0x64>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d901      	bls.n	800656c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e006      	b.n	800657a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b01      	cmp	r3, #1
 8006576:	d0f0      	beq.n	800655a <USB_CoreReset+0x36>

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	00030d40 	.word	0x00030d40

0800658c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800658c:	b084      	sub	sp, #16
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	f107 001c 	add.w	r0, r7, #28
 800659a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065a8:	461a      	mov	r2, r3
 80065aa:	2300      	movs	r3, #0
 80065ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d018      	beq.n	8006610 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d10a      	bne.n	80065fa <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065f2:	f043 0304 	orr.w	r3, r3, #4
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	e014      	b.n	8006624 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006608:	f023 0304 	bic.w	r3, r3, #4
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e009      	b.n	8006624 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800661e:	f023 0304 	bic.w	r3, r3, #4
 8006622:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006624:	2110      	movs	r1, #16
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff feb4 	bl	8006394 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff fed7 	bl	80063e0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	e015      	b.n	8006664 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4413      	add	r3, r2
 8006640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006644:	461a      	mov	r2, r3
 8006646:	f04f 33ff 	mov.w	r3, #4294967295
 800664a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4413      	add	r3, r2
 8006654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006658:	461a      	mov	r2, r3
 800665a:	2300      	movs	r3, #0
 800665c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3301      	adds	r3, #1
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	429a      	cmp	r2, r3
 800666a:	d3e5      	bcc.n	8006638 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800666c:	2101      	movs	r1, #1
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f8ac 	bl	80067cc <USB_DriveVbus>

  HAL_Delay(200U);
 8006674:	20c8      	movs	r0, #200	; 0xc8
 8006676:	f7fb f829 	bl	80016cc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f04f 32ff 	mov.w	r2, #4294967295
 8006686:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800669a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a14      	ldr	r2, [pc, #80]	; (80066f0 <USB_HostInit+0x164>)
 80066a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a13      	ldr	r2, [pc, #76]	; (80066f4 <USB_HostInit+0x168>)
 80066a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80066aa:	e009      	b.n	80066c0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2280      	movs	r2, #128	; 0x80
 80066b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a10      	ldr	r2, [pc, #64]	; (80066f8 <USB_HostInit+0x16c>)
 80066b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a10      	ldr	r2, [pc, #64]	; (80066fc <USB_HostInit+0x170>)
 80066bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d105      	bne.n	80066d2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f043 0210 	orr.w	r2, r3, #16
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <USB_HostInit+0x174>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066ea:	b004      	add	sp, #16
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	01000200 	.word	0x01000200
 80066f4:	00e00300 	.word	0x00e00300
 80066f8:	00600080 	.word	0x00600080
 80066fc:	004000e0 	.word	0x004000e0
 8006700:	a3200008 	.word	0xa3200008

08006704 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006722:	f023 0303 	bic.w	r3, r3, #3
 8006726:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800673c:	4313      	orrs	r3, r2
 800673e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d107      	bne.n	8006756 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674c:	461a      	mov	r2, r3
 800674e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006752:	6053      	str	r3, [r2, #4]
 8006754:	e009      	b.n	800676a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d106      	bne.n	800676a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006762:	461a      	mov	r2, r3
 8006764:	f241 7370 	movw	r3, #6000	; 0x1770
 8006768:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006798:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80067a8:	2064      	movs	r0, #100	; 0x64
 80067aa:	f7fa ff8f 	bl	80016cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80067bc:	200a      	movs	r0, #10
 80067be:	f7fa ff85 	bl	80016cc <HAL_Delay>

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d109      	bne.n	8006810 <USB_DriveVbus+0x44>
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d106      	bne.n	8006810 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800680a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800680e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681a:	d109      	bne.n	8006830 <USB_DriveVbus+0x64>
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800682a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800682e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	0c5b      	lsrs	r3, r3, #17
 800685c:	f003 0303 	and.w	r3, r3, #3
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	b29b      	uxth	r3, r3
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
	...

08006890 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	4608      	mov	r0, r1
 800689a:	4611      	mov	r1, r2
 800689c:	461a      	mov	r2, r3
 800689e:	4603      	mov	r3, r0
 80068a0:	70fb      	strb	r3, [r7, #3]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70bb      	strb	r3, [r7, #2]
 80068a6:	4613      	mov	r3, r2
 80068a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068be:	461a      	mov	r2, r3
 80068c0:	f04f 33ff 	mov.w	r3, #4294967295
 80068c4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80068c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d87e      	bhi.n	80069cc <USB_HC_Init+0x13c>
 80068ce:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <USB_HC_Init+0x44>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	080068e5 	.word	0x080068e5
 80068d8:	0800698f 	.word	0x0800698f
 80068dc:	080068e5 	.word	0x080068e5
 80068e0:	08006951 	.word	0x08006951
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f0:	461a      	mov	r2, r3
 80068f2:	f240 439d 	movw	r3, #1181	; 0x49d
 80068f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80068f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	da10      	bge.n	8006922 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4413      	add	r3, r2
 8006908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	78fa      	ldrb	r2, [r7, #3]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	440a      	add	r2, r1
 8006916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800691a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800691e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006920:	e057      	b.n	80069d2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692a:	2b00      	cmp	r3, #0
 800692c:	d051      	beq.n	80069d2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	440a      	add	r2, r1
 8006944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006948:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800694c:	60d3      	str	r3, [r2, #12]
      break;
 800694e:	e040      	b.n	80069d2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4413      	add	r3, r2
 8006958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695c:	461a      	mov	r2, r3
 800695e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006962:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006964:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006968:	2b00      	cmp	r3, #0
 800696a:	da34      	bge.n	80069d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4413      	add	r3, r2
 8006974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	78fa      	ldrb	r2, [r7, #3]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	440a      	add	r2, r1
 8006982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800698a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800698c:	e023      	b.n	80069d6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4413      	add	r3, r2
 8006996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699a:	461a      	mov	r2, r3
 800699c:	f240 2325 	movw	r3, #549	; 0x225
 80069a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80069a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	da17      	bge.n	80069da <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	78fa      	ldrb	r2, [r7, #3]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069c4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80069c8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80069ca:	e006      	b.n	80069da <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	e004      	b.n	80069dc <USB_HC_Init+0x14c>
      break;
 80069d2:	bf00      	nop
 80069d4:	e002      	b.n	80069dc <USB_HC_Init+0x14c>
      break;
 80069d6:	bf00      	nop
 80069d8:	e000      	b.n	80069dc <USB_HC_Init+0x14c>
      break;
 80069da:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069e2:	699a      	ldr	r2, [r3, #24]
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	2101      	movs	r1, #1
 80069ec:	fa01 f303 	lsl.w	r3, r1, r3
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80069f6:	4313      	orrs	r3, r2
 80069f8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006a06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	da03      	bge.n	8006a16 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a12:	613b      	str	r3, [r7, #16]
 8006a14:	e001      	b.n	8006a1a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d103      	bne.n	8006a2a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e001      	b.n	8006a2e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a2e:	787b      	ldrb	r3, [r7, #1]
 8006a30:	059b      	lsls	r3, r3, #22
 8006a32:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a36:	78bb      	ldrb	r3, [r7, #2]
 8006a38:	02db      	lsls	r3, r3, #11
 8006a3a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a3e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a44:	049b      	lsls	r3, r3, #18
 8006a46:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a4a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a52:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a58:	78fb      	ldrb	r3, [r7, #3]
 8006a5a:	0159      	lsls	r1, r3, #5
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	440b      	add	r3, r1
 8006a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a64:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a6a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006a6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d10f      	bne.n	8006a94 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	78fa      	ldrb	r2, [r7, #3]
 8006a84:	0151      	lsls	r1, r2, #5
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	440a      	add	r2, r1
 8006a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a92:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop

08006aa4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08c      	sub	sp, #48	; 0x30
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ac0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d028      	beq.n	8006b20 <USB_HC_StartXfer+0x7c>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	791b      	ldrb	r3, [r3, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d124      	bne.n	8006b20 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <USB_HC_StartXfer+0x50>
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	795b      	ldrb	r3, [r3, #5]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d107      	bne.n	8006af4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	785b      	ldrb	r3, [r3, #1]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 fa30 	bl	8006f50 <USB_DoPing>
      return HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e114      	b.n	8006d1e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d112      	bne.n	8006b20 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	0151      	lsls	r1, r2, #5
 8006b0c:	6a3a      	ldr	r2, [r7, #32]
 8006b0e:	440a      	add	r2, r1
 8006b10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b14:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006b18:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d018      	beq.n	8006b5a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	8912      	ldrh	r2, [r2, #8]
 8006b30:	4413      	add	r3, r2
 8006b32:	3b01      	subs	r3, #1
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	8912      	ldrh	r2, [r2, #8]
 8006b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b3c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006b3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b40:	8b7b      	ldrh	r3, [r7, #26]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d90b      	bls.n	8006b5e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006b46:	8b7b      	ldrh	r3, [r7, #26]
 8006b48:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006b4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	8912      	ldrh	r2, [r2, #8]
 8006b50:	fb02 f203 	mul.w	r2, r2, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	611a      	str	r2, [r3, #16]
 8006b58:	e001      	b.n	8006b5e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	78db      	ldrb	r3, [r3, #3]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d006      	beq.n	8006b74 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006b66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	8912      	ldrh	r2, [r2, #8]
 8006b6c:	fb02 f203 	mul.w	r2, r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b7e:	04d9      	lsls	r1, r3, #19
 8006b80:	4b69      	ldr	r3, [pc, #420]	; (8006d28 <USB_HC_StartXfer+0x284>)
 8006b82:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b84:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	7a9b      	ldrb	r3, [r3, #10]
 8006b8a:	075b      	lsls	r3, r3, #29
 8006b8c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b90:	69f9      	ldr	r1, [r7, #28]
 8006b92:	0148      	lsls	r0, r1, #5
 8006b94:	6a39      	ldr	r1, [r7, #32]
 8006b96:	4401      	add	r1, r0
 8006b98:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b9c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b9e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006ba0:	79fb      	ldrb	r3, [r7, #7]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	68d9      	ldr	r1, [r3, #12]
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb6:	460a      	mov	r2, r1
 8006bb8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	0151      	lsls	r1, r2, #5
 8006be4:	6a3a      	ldr	r2, [r7, #32]
 8006be6:	440a      	add	r2, r1
 8006be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bf0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	7e7b      	ldrb	r3, [r7, #25]
 8006c02:	075b      	lsls	r3, r3, #29
 8006c04:	69f9      	ldr	r1, [r7, #28]
 8006c06:	0148      	lsls	r0, r1, #5
 8006c08:	6a39      	ldr	r1, [r7, #32]
 8006c0a:	4401      	add	r1, r0
 8006c0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006c10:	4313      	orrs	r3, r2
 8006c12:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a42      	ldr	r2, [pc, #264]	; (8006d2c <USB_HC_StartXfer+0x288>)
 8006c24:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c26:	4b41      	ldr	r3, [pc, #260]	; (8006d2c <USB_HC_StartXfer+0x288>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c2e:	4a3f      	ldr	r2, [pc, #252]	; (8006d2c <USB_HC_StartXfer+0x288>)
 8006c30:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	78db      	ldrb	r3, [r3, #3]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d006      	beq.n	8006c48 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c3a:	4b3c      	ldr	r3, [pc, #240]	; (8006d2c <USB_HC_StartXfer+0x288>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c42:	4a3a      	ldr	r2, [pc, #232]	; (8006d2c <USB_HC_StartXfer+0x288>)
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	e005      	b.n	8006c54 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c48:	4b38      	ldr	r3, [pc, #224]	; (8006d2c <USB_HC_StartXfer+0x288>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c50:	4a36      	ldr	r2, [pc, #216]	; (8006d2c <USB_HC_StartXfer+0x288>)
 8006c52:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c54:	4b35      	ldr	r3, [pc, #212]	; (8006d2c <USB_HC_StartXfer+0x288>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c5c:	4a33      	ldr	r2, [pc, #204]	; (8006d2c <USB_HC_StartXfer+0x288>)
 8006c5e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4b2f      	ldr	r3, [pc, #188]	; (8006d2c <USB_HC_StartXfer+0x288>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e04f      	b.n	8006d1e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	78db      	ldrb	r3, [r3, #3]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d14a      	bne.n	8006d1c <USB_HC_StartXfer+0x278>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d046      	beq.n	8006d1c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	79db      	ldrb	r3, [r3, #7]
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d830      	bhi.n	8006cf8 <USB_HC_StartXfer+0x254>
 8006c96:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <USB_HC_StartXfer+0x1f8>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006cad 	.word	0x08006cad
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006cad 	.word	0x08006cad
 8006ca8:	08006cd1 	.word	0x08006cd1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	3303      	adds	r3, #3
 8006cb2:	089b      	lsrs	r3, r3, #2
 8006cb4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006cb6:	8afa      	ldrh	r2, [r7, #22]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d91c      	bls.n	8006cfc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f043 0220 	orr.w	r2, r3, #32
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006cce:	e015      	b.n	8006cfc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	3303      	adds	r3, #3
 8006cd6:	089b      	lsrs	r3, r3, #2
 8006cd8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006cda:	8afa      	ldrh	r2, [r7, #22]
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d90a      	bls.n	8006d00 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006cf6:	e003      	b.n	8006d00 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006cf8:	bf00      	nop
 8006cfa:	e002      	b.n	8006d02 <USB_HC_StartXfer+0x25e>
        break;
 8006cfc:	bf00      	nop
 8006cfe:	e000      	b.n	8006d02 <USB_HC_StartXfer+0x25e>
        break;
 8006d00:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	68d9      	ldr	r1, [r3, #12]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	785a      	ldrb	r2, [r3, #1]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	b298      	uxth	r0, r3
 8006d10:	2300      	movs	r3, #0
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	4603      	mov	r3, r0
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f7ff fb84 	bl	8006424 <USB_WritePacket>
  }

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3728      	adds	r7, #40	; 0x28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	1ff80000 	.word	0x1ff80000
 8006d2c:	200001e0 	.word	0x200001e0

08006d30 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	b29b      	uxth	r3, r3
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b087      	sub	sp, #28
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	0c9b      	lsrs	r3, r3, #18
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <USB_HC_Halt+0x3a>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d16c      	bne.n	8006e66 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	0151      	lsls	r1, r2, #5
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	440a      	add	r2, r1
 8006da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006daa:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d143      	bne.n	8006e40 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dd6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006df2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006df6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e16:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e24:	d81d      	bhi.n	8006e62 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e3c:	d0ec      	beq.n	8006e18 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e3e:	e080      	b.n	8006f42 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e5e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e60:	e06f      	b.n	8006f42 <USB_HC_Halt+0x1f0>
          break;
 8006e62:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e64:	e06d      	b.n	8006f42 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e84:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d143      	bne.n	8006f1e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eb4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	0151      	lsls	r1, r2, #5
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	440a      	add	r2, r1
 8006ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ed4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	440a      	add	r2, r1
 8006eec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ef0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ef4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f02:	d81d      	bhi.n	8006f40 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1a:	d0ec      	beq.n	8006ef6 <USB_HC_Halt+0x1a4>
 8006f1c:	e011      	b.n	8006f42 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	e000      	b.n	8006f42 <USB_HC_Halt+0x1f0>
          break;
 8006f40:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f64:	2301      	movs	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	04da      	lsls	r2, r3, #19
 8006f6c:	4b15      	ldr	r3, [pc, #84]	; (8006fc4 <USB_DoPing+0x74>)
 8006f6e:	4013      	ands	r3, r2
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f80:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f98:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fa0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fae:	461a      	mov	r2, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	1ff80000 	.word	0x1ff80000

08006fc8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff f99f 	bl	800631c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006fde:	2110      	movs	r1, #16
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff f9d7 	bl	8006394 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff f9fa 	bl	80063e0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006fec:	2300      	movs	r3, #0
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	e01f      	b.n	8007032 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007008:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007010:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007018:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	4413      	add	r3, r2
 8007022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007026:	461a      	mov	r2, r3
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	3301      	adds	r3, #1
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b0f      	cmp	r3, #15
 8007036:	d9dc      	bls.n	8006ff2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	e034      	b.n	80070a8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007054:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800705c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007064:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007072:	461a      	mov	r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	3301      	adds	r3, #1
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007084:	d80c      	bhi.n	80070a0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800709c:	d0ec      	beq.n	8007078 <USB_StopHost+0xb0>
 800709e:	e000      	b.n	80070a2 <USB_StopHost+0xda>
        break;
 80070a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	3301      	adds	r3, #1
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b0f      	cmp	r3, #15
 80070ac:	d9c7      	bls.n	800703e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070b4:	461a      	mov	r2, r3
 80070b6:	f04f 33ff 	mov.w	r3, #4294967295
 80070ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f04f 32ff 	mov.w	r2, #4294967295
 80070c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff f918 	bl	80062fa <USB_EnableGlobalInt>

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80070d8:	4904      	ldr	r1, [pc, #16]	; (80070ec <MX_FATFS_Init+0x18>)
 80070da:	4805      	ldr	r0, [pc, #20]	; (80070f0 <MX_FATFS_Init+0x1c>)
 80070dc:	f007 fdf0 	bl	800ecc0 <FATFS_LinkDriver>
 80070e0:	4603      	mov	r3, r0
 80070e2:	461a      	mov	r2, r3
 80070e4:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <MX_FATFS_Init+0x20>)
 80070e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80070e8:	bf00      	nop
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	200008c8 	.word	0x200008c8
 80070f0:	0800fa70 	.word	0x0800fa70
 80070f4:	20002964 	.word	0x20002964

080070f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80070fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80070fe:	4618      	mov	r0, r3
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	4619      	mov	r1, r3
 8007132:	4808      	ldr	r0, [pc, #32]	; (8007154 <USBH_status+0x34>)
 8007134:	f000 fe11 	bl	8007d5a <USBH_MSC_UnitIsReady>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <USBH_status+0x24>
  {
    res = RES_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]
 8007142:	e001      	b.n	8007148 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20002968 	.word	0x20002968

08007158 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b094      	sub	sp, #80	; 0x50
 800715c:	af02      	add	r7, sp, #8
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	4603      	mov	r3, r0
 8007166:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800716e:	7bf9      	ldrb	r1, [r7, #15]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	4812      	ldr	r0, [pc, #72]	; (80071c4 <USBH_read+0x6c>)
 800717a:	f000 fe38 	bl	8007dee <USBH_MSC_Read>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d103      	bne.n	800718c <USBH_read+0x34>
  {
    res = RES_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800718a:	e015      	b.n	80071b8 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800718c:	f107 0210 	add.w	r2, r7, #16
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	4619      	mov	r1, r3
 8007194:	480b      	ldr	r0, [pc, #44]	; (80071c4 <USBH_read+0x6c>)
 8007196:	f000 fe06 	bl	8007da6 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800719a:	7f7b      	ldrb	r3, [r7, #29]
 800719c:	2b28      	cmp	r3, #40	; 0x28
 800719e:	d003      	beq.n	80071a8 <USBH_read+0x50>
 80071a0:	2b3a      	cmp	r3, #58	; 0x3a
 80071a2:	d001      	beq.n	80071a8 <USBH_read+0x50>
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d103      	bne.n	80071b0 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80071a8:	2303      	movs	r3, #3
 80071aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80071ae:	e003      	b.n	80071b8 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80071b6:	bf00      	nop
    }
  }

  return res;
 80071b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3748      	adds	r7, #72	; 0x48
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20002968 	.word	0x20002968

080071c8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b094      	sub	sp, #80	; 0x50
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	607a      	str	r2, [r7, #4]
 80071d2:	603b      	str	r3, [r7, #0]
 80071d4:	4603      	mov	r3, r0
 80071d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80071de:	7bf9      	ldrb	r1, [r7, #15]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	4817      	ldr	r0, [pc, #92]	; (8007248 <USBH_write+0x80>)
 80071ea:	f000 fe69 	bl	8007ec0 <USBH_MSC_Write>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d103      	bne.n	80071fc <USBH_write+0x34>
  {
    res = RES_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80071fa:	e01f      	b.n	800723c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80071fc:	f107 0210 	add.w	r2, r7, #16
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	4619      	mov	r1, r3
 8007204:	4810      	ldr	r0, [pc, #64]	; (8007248 <USBH_write+0x80>)
 8007206:	f000 fdce 	bl	8007da6 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800720a:	7f7b      	ldrb	r3, [r7, #29]
 800720c:	2b27      	cmp	r3, #39	; 0x27
 800720e:	d009      	beq.n	8007224 <USBH_write+0x5c>
 8007210:	2b27      	cmp	r3, #39	; 0x27
 8007212:	dc02      	bgt.n	800721a <USBH_write+0x52>
 8007214:	2b04      	cmp	r3, #4
 8007216:	d009      	beq.n	800722c <USBH_write+0x64>
 8007218:	e00c      	b.n	8007234 <USBH_write+0x6c>
 800721a:	2b28      	cmp	r3, #40	; 0x28
 800721c:	d006      	beq.n	800722c <USBH_write+0x64>
 800721e:	2b3a      	cmp	r3, #58	; 0x3a
 8007220:	d004      	beq.n	800722c <USBH_write+0x64>
 8007222:	e007      	b.n	8007234 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007224:	2302      	movs	r3, #2
 8007226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800722a:	e007      	b.n	800723c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800722c:	2303      	movs	r3, #3
 800722e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007232:	e003      	b.n	800723c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800723a:	bf00      	nop
    }
  }

  return res;
 800723c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007240:	4618      	mov	r0, r3
 8007242:	3748      	adds	r7, #72	; 0x48
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	20002968 	.word	0x20002968

0800724c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b090      	sub	sp, #64	; 0x40
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	603a      	str	r2, [r7, #0]
 8007256:	71fb      	strb	r3, [r7, #7]
 8007258:	460b      	mov	r3, r1
 800725a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007262:	79bb      	ldrb	r3, [r7, #6]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d852      	bhi.n	800730e <USBH_ioctl+0xc2>
 8007268:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <USBH_ioctl+0x24>)
 800726a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726e:	bf00      	nop
 8007270:	08007281 	.word	0x08007281
 8007274:	08007289 	.word	0x08007289
 8007278:	080072b3 	.word	0x080072b3
 800727c:	080072df 	.word	0x080072df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007286:	e045      	b.n	8007314 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007288:	f107 0208 	add.w	r2, r7, #8
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	4619      	mov	r1, r3
 8007290:	4823      	ldr	r0, [pc, #140]	; (8007320 <USBH_ioctl+0xd4>)
 8007292:	f000 fd88 	bl	8007da6 <USBH_MSC_GetLUNInfo>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d106      	bne.n	80072aa <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80072a8:	e034      	b.n	8007314 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80072b0:	e030      	b.n	8007314 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80072b2:	f107 0208 	add.w	r2, r7, #8
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	4619      	mov	r1, r3
 80072ba:	4819      	ldr	r0, [pc, #100]	; (8007320 <USBH_ioctl+0xd4>)
 80072bc:	f000 fd73 	bl	8007da6 <USBH_MSC_GetLUNInfo>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d107      	bne.n	80072d6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80072c6:	8a3b      	ldrh	r3, [r7, #16]
 80072c8:	461a      	mov	r2, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80072d4:	e01e      	b.n	8007314 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80072dc:	e01a      	b.n	8007314 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80072de:	f107 0208 	add.w	r2, r7, #8
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	4619      	mov	r1, r3
 80072e6:	480e      	ldr	r0, [pc, #56]	; (8007320 <USBH_ioctl+0xd4>)
 80072e8:	f000 fd5d 	bl	8007da6 <USBH_MSC_GetLUNInfo>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80072f2:	8a3b      	ldrh	r3, [r7, #16]
 80072f4:	0a5b      	lsrs	r3, r3, #9
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007304:	e006      	b.n	8007314 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800730c:	e002      	b.n	8007314 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800730e:	2304      	movs	r3, #4
 8007310:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8007314:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007318:	4618      	mov	r0, r3
 800731a:	3740      	adds	r7, #64	; 0x40
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	20002968 	.word	0x20002968

08007324 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b089      	sub	sp, #36	; 0x24
 8007328:	af04      	add	r7, sp, #16
 800732a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007332:	7919      	ldrb	r1, [r3, #4]
 8007334:	2350      	movs	r3, #80	; 0x50
 8007336:	2206      	movs	r2, #6
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 fc4f 	bl	8008bdc <USBH_FindInterface>
 800733e:	4603      	mov	r3, r0
 8007340:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	2bff      	cmp	r3, #255	; 0xff
 8007346:	d002      	beq.n	800734e <USBH_MSC_InterfaceInit+0x2a>
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d901      	bls.n	8007352 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800734e:	2302      	movs	r3, #2
 8007350:	e0ef      	b.n	8007532 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 fc24 	bl	8008ba4 <USBH_SelectInterface>
 800735c:	4603      	mov	r3, r0
 800735e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007366:	2302      	movs	r3, #2
 8007368:	e0e3      	b.n	8007532 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007370:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007374:	f008 f8ea 	bl	800f54c <malloc>
 8007378:	4603      	mov	r3, r0
 800737a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800738c:	2302      	movs	r3, #2
 800738e:	e0d0      	b.n	8007532 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007394:	2100      	movs	r1, #0
 8007396:	68b8      	ldr	r0, [r7, #8]
 8007398:	f008 f8f3 	bl	800f582 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	211a      	movs	r1, #26
 80073a2:	fb01 f303 	mul.w	r3, r1, r3
 80073a6:	4413      	add	r3, r2
 80073a8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	b25b      	sxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	da16      	bge.n	80073e2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	211a      	movs	r1, #26
 80073ba:	fb01 f303 	mul.w	r3, r1, r3
 80073be:	4413      	add	r3, r2
 80073c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073c4:	781a      	ldrb	r2, [r3, #0]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	211a      	movs	r1, #26
 80073d0:	fb01 f303 	mul.w	r3, r1, r3
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80073da:	881a      	ldrh	r2, [r3, #0]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	815a      	strh	r2, [r3, #10]
 80073e0:	e015      	b.n	800740e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	211a      	movs	r1, #26
 80073e8:	fb01 f303 	mul.w	r3, r1, r3
 80073ec:	4413      	add	r3, r2
 80073ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	211a      	movs	r1, #26
 80073fe:	fb01 f303 	mul.w	r3, r1, r3
 8007402:	4413      	add	r3, r2
 8007404:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007408:	881a      	ldrh	r2, [r3, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	211a      	movs	r1, #26
 8007414:	fb01 f303 	mul.w	r3, r1, r3
 8007418:	4413      	add	r3, r2
 800741a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	b25b      	sxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	da16      	bge.n	8007454 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	211a      	movs	r1, #26
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	4413      	add	r3, r2
 8007432:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007436:	781a      	ldrb	r2, [r3, #0]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	211a      	movs	r1, #26
 8007442:	fb01 f303 	mul.w	r3, r1, r3
 8007446:	4413      	add	r3, r2
 8007448:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800744c:	881a      	ldrh	r2, [r3, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	815a      	strh	r2, [r3, #10]
 8007452:	e015      	b.n	8007480 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	211a      	movs	r1, #26
 800745a:	fb01 f303 	mul.w	r3, r1, r3
 800745e:	4413      	add	r3, r2
 8007460:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	211a      	movs	r1, #26
 8007470:	fb01 f303 	mul.w	r3, r1, r3
 8007474:	4413      	add	r3, r2
 8007476:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800747a:	881a      	ldrh	r2, [r3, #0]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2200      	movs	r2, #0
 8007484:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2200      	movs	r2, #0
 800748a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2200      	movs	r2, #0
 8007490:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	799b      	ldrb	r3, [r3, #6]
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f002 fdc2 	bl	800a022 <USBH_AllocPipe>
 800749e:	4603      	mov	r3, r0
 80074a0:	461a      	mov	r2, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	79db      	ldrb	r3, [r3, #7]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f002 fdb8 	bl	800a022 <USBH_AllocPipe>
 80074b2:	4603      	mov	r3, r0
 80074b4:	461a      	mov	r2, r3
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fda4 	bl	8008008 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	7959      	ldrb	r1, [r3, #5]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	7998      	ldrb	r0, [r3, #6]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	8912      	ldrh	r2, [r2, #8]
 80074d8:	9202      	str	r2, [sp, #8]
 80074da:	2202      	movs	r2, #2
 80074dc:	9201      	str	r2, [sp, #4]
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	4623      	mov	r3, r4
 80074e2:	4602      	mov	r2, r0
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f002 fd6d 	bl	8009fc4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	7919      	ldrb	r1, [r3, #4]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	79d8      	ldrb	r0, [r3, #7]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	8952      	ldrh	r2, [r2, #10]
 8007502:	9202      	str	r2, [sp, #8]
 8007504:	2202      	movs	r2, #2
 8007506:	9201      	str	r2, [sp, #4]
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	4623      	mov	r3, r4
 800750c:	4602      	mov	r2, r0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f002 fd58 	bl	8009fc4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	791b      	ldrb	r3, [r3, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f007 ff31 	bl	800f384 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	795b      	ldrb	r3, [r3, #5]
 8007526:	2200      	movs	r2, #0
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f007 ff2a 	bl	800f384 <USBH_LL_SetToggle>

  return USBH_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	bd90      	pop	{r4, r7, pc}

0800753a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	795b      	ldrb	r3, [r3, #5]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00e      	beq.n	8007572 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	795b      	ldrb	r3, [r3, #5]
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f002 fd51 	bl	800a002 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	795b      	ldrb	r3, [r3, #5]
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f002 fd7c 	bl	800a064 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	791b      	ldrb	r3, [r3, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00e      	beq.n	8007598 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	791b      	ldrb	r3, [r3, #4]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f002 fd3e 	bl	800a002 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	791b      	ldrb	r3, [r3, #4]
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f002 fd69 	bl	800a064 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f007 ffd5 	bl	800f55c <free>
    phost->pActiveClass->pData = 0U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075b8:	2200      	movs	r2, #0
 80075ba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80075d8:	2301      	movs	r3, #1
 80075da:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	7b9b      	ldrb	r3, [r3, #14]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d004      	beq.n	80075ee <USBH_MSC_ClassRequest+0x28>
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d03e      	beq.n	8007666 <USBH_MSC_ClassRequest+0xa0>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d000      	beq.n	80075ee <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 80075ec:	e04a      	b.n	8007684 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fcea 	bl	8007fcc <USBH_MSC_BOT_REQ_GetMaxLUN>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d104      	bne.n	800760c <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2200      	movs	r2, #0
 8007606:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800760c:	7bfb      	ldrb	r3, [r7, #15]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d135      	bne.n	800767e <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b02      	cmp	r3, #2
 8007618:	d804      	bhi.n	8007624 <USBH_MSC_ClassRequest+0x5e>
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	b2da      	uxtb	r2, r3
 8007622:	e000      	b.n	8007626 <USBH_MSC_ClassRequest+0x60>
 8007624:	2202      	movs	r2, #2
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800762a:	2300      	movs	r3, #0
 800762c:	73bb      	strb	r3, [r7, #14]
 800762e:	e014      	b.n	800765a <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	2134      	movs	r1, #52	; 0x34
 8007636:	fb01 f303 	mul.w	r3, r1, r3
 800763a:	4413      	add	r3, r2
 800763c:	3392      	adds	r3, #146	; 0x92
 800763e:	2202      	movs	r2, #2
 8007640:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	2134      	movs	r1, #52	; 0x34
 8007648:	fb01 f303 	mul.w	r3, r1, r3
 800764c:	4413      	add	r3, r2
 800764e:	33c1      	adds	r3, #193	; 0xc1
 8007650:	2200      	movs	r2, #0
 8007652:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	3301      	adds	r3, #1
 8007658:	73bb      	strb	r3, [r7, #14]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	7bba      	ldrb	r2, [r7, #14]
 8007660:	429a      	cmp	r2, r3
 8007662:	d3e5      	bcc.n	8007630 <USBH_MSC_ClassRequest+0x6a>
      break;
 8007664:	e00b      	b.n	800767e <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007666:	2100      	movs	r1, #0
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f002 f878 	bl	800975e <USBH_ClrFeature>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d106      	bne.n	8007682 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	7bda      	ldrb	r2, [r3, #15]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	739a      	strb	r2, [r3, #14]
      break;
 800767c:	e001      	b.n	8007682 <USBH_MSC_ClassRequest+0xbc>
      break;
 800767e:	bf00      	nop
 8007680:	e000      	b.n	8007684 <USBH_MSC_ClassRequest+0xbe>
      break;
 8007682:	bf00      	nop
  }

  return status;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
	...

08007690 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80076a2:	2301      	movs	r3, #1
 80076a4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80076a6:	2301      	movs	r3, #1
 80076a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80076aa:	2301      	movs	r3, #1
 80076ac:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	7b1b      	ldrb	r3, [r3, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <USBH_MSC_Process+0x2e>
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	f000 8271 	beq.w	8007b9e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80076bc:	e272      	b.n	8007ba4 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	429a      	cmp	r2, r3
 80076cc:	f080 824f 	bcs.w	8007b6e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076d6:	4619      	mov	r1, r3
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	2334      	movs	r3, #52	; 0x34
 80076dc:	fb03 f301 	mul.w	r3, r3, r1
 80076e0:	4413      	add	r3, r2
 80076e2:	3391      	adds	r3, #145	; 0x91
 80076e4:	2201      	movs	r2, #1
 80076e6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076ee:	4619      	mov	r1, r3
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	2334      	movs	r3, #52	; 0x34
 80076f4:	fb03 f301 	mul.w	r3, r3, r1
 80076f8:	4413      	add	r3, r2
 80076fa:	3390      	adds	r3, #144	; 0x90
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b08      	cmp	r3, #8
 8007700:	f200 8243 	bhi.w	8007b8a <USBH_MSC_Process+0x4fa>
 8007704:	a201      	add	r2, pc, #4	; (adr r2, 800770c <USBH_MSC_Process+0x7c>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	08007731 	.word	0x08007731
 8007710:	08007b8b 	.word	0x08007b8b
 8007714:	080077f9 	.word	0x080077f9
 8007718:	0800797d 	.word	0x0800797d
 800771c:	08007757 	.word	0x08007757
 8007720:	08007a49 	.word	0x08007a49
 8007724:	08007b8b 	.word	0x08007b8b
 8007728:	08007b8b 	.word	0x08007b8b
 800772c:	08007b5d 	.word	0x08007b5d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007736:	4619      	mov	r1, r3
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	2334      	movs	r3, #52	; 0x34
 800773c:	fb03 f301 	mul.w	r3, r3, r1
 8007740:	4413      	add	r3, r2
 8007742:	3390      	adds	r3, #144	; 0x90
 8007744:	2204      	movs	r2, #4
 8007746:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007754:	e222      	b.n	8007b9c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800775c:	b2d9      	uxtb	r1, r3
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007764:	461a      	mov	r2, r3
 8007766:	2334      	movs	r3, #52	; 0x34
 8007768:	fb03 f302 	mul.w	r3, r3, r2
 800776c:	3398      	adds	r3, #152	; 0x98
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	4413      	add	r3, r2
 8007772:	3307      	adds	r3, #7
 8007774:	461a      	mov	r2, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 ff68 	bl	800864c <USBH_MSC_SCSI_Inquiry>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10b      	bne.n	800779e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800778c:	4619      	mov	r1, r3
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	2334      	movs	r3, #52	; 0x34
 8007792:	fb03 f301 	mul.w	r3, r3, r1
 8007796:	4413      	add	r3, r2
 8007798:	3390      	adds	r3, #144	; 0x90
 800779a:	2202      	movs	r2, #2
 800779c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d10c      	bne.n	80077be <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077aa:	4619      	mov	r1, r3
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	2334      	movs	r3, #52	; 0x34
 80077b0:	fb03 f301 	mul.w	r3, r3, r1
 80077b4:	4413      	add	r3, r2
 80077b6:	3390      	adds	r3, #144	; 0x90
 80077b8:	2205      	movs	r2, #5
 80077ba:	701a      	strb	r2, [r3, #0]
            break;
 80077bc:	e1e7      	b.n	8007b8e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	f040 81e4 	bne.w	8007b8e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077cc:	4619      	mov	r1, r3
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	2334      	movs	r3, #52	; 0x34
 80077d2:	fb03 f301 	mul.w	r3, r3, r1
 80077d6:	4413      	add	r3, r2
 80077d8:	3390      	adds	r3, #144	; 0x90
 80077da:	2201      	movs	r2, #1
 80077dc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077e4:	4619      	mov	r1, r3
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	2334      	movs	r3, #52	; 0x34
 80077ea:	fb03 f301 	mul.w	r3, r3, r1
 80077ee:	4413      	add	r3, r2
 80077f0:	3391      	adds	r3, #145	; 0x91
 80077f2:	2202      	movs	r2, #2
 80077f4:	701a      	strb	r2, [r3, #0]
            break;
 80077f6:	e1ca      	b.n	8007b8e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fe64 	bl	80084d0 <USBH_MSC_SCSI_TestUnitReady>
 8007808:	4603      	mov	r3, r0
 800780a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d149      	bne.n	80078a6 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007818:	4619      	mov	r1, r3
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	2334      	movs	r3, #52	; 0x34
 800781e:	fb03 f301 	mul.w	r3, r3, r1
 8007822:	4413      	add	r3, r2
 8007824:	3392      	adds	r3, #146	; 0x92
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00c      	beq.n	8007846 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007832:	4619      	mov	r1, r3
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	2334      	movs	r3, #52	; 0x34
 8007838:	fb03 f301 	mul.w	r3, r3, r1
 800783c:	4413      	add	r3, r2
 800783e:	33c1      	adds	r3, #193	; 0xc1
 8007840:	2201      	movs	r2, #1
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	e00b      	b.n	800785e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800784c:	4619      	mov	r1, r3
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	2334      	movs	r3, #52	; 0x34
 8007852:	fb03 f301 	mul.w	r3, r3, r1
 8007856:	4413      	add	r3, r2
 8007858:	33c1      	adds	r3, #193	; 0xc1
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007864:	4619      	mov	r1, r3
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	2334      	movs	r3, #52	; 0x34
 800786a:	fb03 f301 	mul.w	r3, r3, r1
 800786e:	4413      	add	r3, r2
 8007870:	3390      	adds	r3, #144	; 0x90
 8007872:	2203      	movs	r2, #3
 8007874:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800787c:	4619      	mov	r1, r3
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	2334      	movs	r3, #52	; 0x34
 8007882:	fb03 f301 	mul.w	r3, r3, r1
 8007886:	4413      	add	r3, r2
 8007888:	3391      	adds	r3, #145	; 0x91
 800788a:	2200      	movs	r2, #0
 800788c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007894:	4619      	mov	r1, r3
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	2334      	movs	r3, #52	; 0x34
 800789a:	fb03 f301 	mul.w	r3, r3, r1
 800789e:	4413      	add	r3, r2
 80078a0:	3392      	adds	r3, #146	; 0x92
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d14a      	bne.n	8007942 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078b2:	4619      	mov	r1, r3
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	2334      	movs	r3, #52	; 0x34
 80078b8:	fb03 f301 	mul.w	r3, r3, r1
 80078bc:	4413      	add	r3, r2
 80078be:	3392      	adds	r3, #146	; 0x92
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d00c      	beq.n	80078e0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078cc:	4619      	mov	r1, r3
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	2334      	movs	r3, #52	; 0x34
 80078d2:	fb03 f301 	mul.w	r3, r3, r1
 80078d6:	4413      	add	r3, r2
 80078d8:	33c1      	adds	r3, #193	; 0xc1
 80078da:	2201      	movs	r2, #1
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	e00b      	b.n	80078f8 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078e6:	4619      	mov	r1, r3
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	2334      	movs	r3, #52	; 0x34
 80078ec:	fb03 f301 	mul.w	r3, r3, r1
 80078f0:	4413      	add	r3, r2
 80078f2:	33c1      	adds	r3, #193	; 0xc1
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078fe:	4619      	mov	r1, r3
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	2334      	movs	r3, #52	; 0x34
 8007904:	fb03 f301 	mul.w	r3, r3, r1
 8007908:	4413      	add	r3, r2
 800790a:	3390      	adds	r3, #144	; 0x90
 800790c:	2205      	movs	r2, #5
 800790e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007916:	4619      	mov	r1, r3
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	2334      	movs	r3, #52	; 0x34
 800791c:	fb03 f301 	mul.w	r3, r3, r1
 8007920:	4413      	add	r3, r2
 8007922:	3391      	adds	r3, #145	; 0x91
 8007924:	2201      	movs	r2, #1
 8007926:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800792e:	4619      	mov	r1, r3
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	2334      	movs	r3, #52	; 0x34
 8007934:	fb03 f301 	mul.w	r3, r3, r1
 8007938:	4413      	add	r3, r2
 800793a:	3392      	adds	r3, #146	; 0x92
 800793c:	2202      	movs	r2, #2
 800793e:	701a      	strb	r2, [r3, #0]
            break;
 8007940:	e127      	b.n	8007b92 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b04      	cmp	r3, #4
 8007946:	f040 8124 	bne.w	8007b92 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007950:	4619      	mov	r1, r3
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	2334      	movs	r3, #52	; 0x34
 8007956:	fb03 f301 	mul.w	r3, r3, r1
 800795a:	4413      	add	r3, r2
 800795c:	3390      	adds	r3, #144	; 0x90
 800795e:	2201      	movs	r2, #1
 8007960:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007968:	4619      	mov	r1, r3
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	2334      	movs	r3, #52	; 0x34
 800796e:	fb03 f301 	mul.w	r3, r3, r1
 8007972:	4413      	add	r3, r2
 8007974:	3391      	adds	r3, #145	; 0x91
 8007976:	2202      	movs	r2, #2
 8007978:	701a      	strb	r2, [r3, #0]
            break;
 800797a:	e10a      	b.n	8007b92 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007982:	b2d9      	uxtb	r1, r3
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800798a:	461a      	mov	r2, r3
 800798c:	2334      	movs	r3, #52	; 0x34
 800798e:	fb03 f302 	mul.w	r3, r3, r2
 8007992:	3390      	adds	r3, #144	; 0x90
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	4413      	add	r3, r2
 8007998:	3304      	adds	r3, #4
 800799a:	461a      	mov	r2, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fdda 	bl	8008556 <USBH_MSC_SCSI_ReadCapacity>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d120      	bne.n	80079ee <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079b2:	4619      	mov	r1, r3
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	2334      	movs	r3, #52	; 0x34
 80079b8:	fb03 f301 	mul.w	r3, r3, r1
 80079bc:	4413      	add	r3, r2
 80079be:	3390      	adds	r3, #144	; 0x90
 80079c0:	2201      	movs	r2, #1
 80079c2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079ca:	4619      	mov	r1, r3
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	2334      	movs	r3, #52	; 0x34
 80079d0:	fb03 f301 	mul.w	r3, r3, r1
 80079d4:	4413      	add	r3, r2
 80079d6:	3391      	adds	r3, #145	; 0x91
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079e2:	3301      	adds	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80079ec:	e0d3      	b.n	8007b96 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d10c      	bne.n	8007a0e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079fa:	4619      	mov	r1, r3
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	2334      	movs	r3, #52	; 0x34
 8007a00:	fb03 f301 	mul.w	r3, r3, r1
 8007a04:	4413      	add	r3, r2
 8007a06:	3390      	adds	r3, #144	; 0x90
 8007a08:	2205      	movs	r2, #5
 8007a0a:	701a      	strb	r2, [r3, #0]
            break;
 8007a0c:	e0c3      	b.n	8007b96 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	f040 80c0 	bne.w	8007b96 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	2334      	movs	r3, #52	; 0x34
 8007a22:	fb03 f301 	mul.w	r3, r3, r1
 8007a26:	4413      	add	r3, r2
 8007a28:	3390      	adds	r3, #144	; 0x90
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a34:	4619      	mov	r1, r3
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	2334      	movs	r3, #52	; 0x34
 8007a3a:	fb03 f301 	mul.w	r3, r3, r1
 8007a3e:	4413      	add	r3, r2
 8007a40:	3391      	adds	r3, #145	; 0x91
 8007a42:	2202      	movs	r2, #2
 8007a44:	701a      	strb	r2, [r3, #0]
            break;
 8007a46:	e0a6      	b.n	8007b96 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a4e:	b2d9      	uxtb	r1, r3
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a56:	461a      	mov	r2, r3
 8007a58:	2334      	movs	r3, #52	; 0x34
 8007a5a:	fb03 f302 	mul.w	r3, r3, r2
 8007a5e:	3398      	adds	r3, #152	; 0x98
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	4413      	add	r3, r2
 8007a64:	3304      	adds	r3, #4
 8007a66:	461a      	mov	r2, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fe94 	bl	8008796 <USBH_MSC_SCSI_RequestSense>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d145      	bne.n	8007b04 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a7e:	4619      	mov	r1, r3
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	2334      	movs	r3, #52	; 0x34
 8007a84:	fb03 f301 	mul.w	r3, r3, r1
 8007a88:	4413      	add	r3, r2
 8007a8a:	339c      	adds	r3, #156	; 0x9c
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b06      	cmp	r3, #6
 8007a90:	d00c      	beq.n	8007aac <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a98:	4619      	mov	r1, r3
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	2334      	movs	r3, #52	; 0x34
 8007a9e:	fb03 f301 	mul.w	r3, r3, r1
 8007aa2:	4413      	add	r3, r2
 8007aa4:	339c      	adds	r3, #156	; 0x9c
 8007aa6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d117      	bne.n	8007adc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	f242 720f 	movw	r2, #9999	; 0x270f
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d80c      	bhi.n	8007adc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ac8:	4619      	mov	r1, r3
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	2334      	movs	r3, #52	; 0x34
 8007ace:	fb03 f301 	mul.w	r3, r3, r1
 8007ad2:	4413      	add	r3, r2
 8007ad4:	3390      	adds	r3, #144	; 0x90
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	701a      	strb	r2, [r3, #0]
                  break;
 8007ada:	e05f      	b.n	8007b9c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	2334      	movs	r3, #52	; 0x34
 8007ae8:	fb03 f301 	mul.w	r3, r3, r1
 8007aec:	4413      	add	r3, r2
 8007aee:	3390      	adds	r3, #144	; 0x90
 8007af0:	2201      	movs	r2, #1
 8007af2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007afa:	3301      	adds	r3, #1
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d10c      	bne.n	8007b24 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b10:	4619      	mov	r1, r3
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	2334      	movs	r3, #52	; 0x34
 8007b16:	fb03 f301 	mul.w	r3, r3, r1
 8007b1a:	4413      	add	r3, r2
 8007b1c:	3390      	adds	r3, #144	; 0x90
 8007b1e:	2208      	movs	r2, #8
 8007b20:	701a      	strb	r2, [r3, #0]
            break;
 8007b22:	e03a      	b.n	8007b9a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d137      	bne.n	8007b9a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b30:	4619      	mov	r1, r3
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	2334      	movs	r3, #52	; 0x34
 8007b36:	fb03 f301 	mul.w	r3, r3, r1
 8007b3a:	4413      	add	r3, r2
 8007b3c:	3390      	adds	r3, #144	; 0x90
 8007b3e:	2201      	movs	r2, #1
 8007b40:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b48:	4619      	mov	r1, r3
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	2334      	movs	r3, #52	; 0x34
 8007b4e:	fb03 f301 	mul.w	r3, r3, r1
 8007b52:	4413      	add	r3, r2
 8007b54:	3391      	adds	r3, #145	; 0x91
 8007b56:	2202      	movs	r2, #2
 8007b58:	701a      	strb	r2, [r3, #0]
            break;
 8007b5a:	e01e      	b.n	8007b9a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007b62:	3301      	adds	r3, #1
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007b6c:	e016      	b.n	8007b9c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b82:	2102      	movs	r1, #2
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	4798      	blx	r3
      break;
 8007b88:	e00c      	b.n	8007ba4 <USBH_MSC_Process+0x514>
            break;
 8007b8a:	bf00      	nop
 8007b8c:	e00a      	b.n	8007ba4 <USBH_MSC_Process+0x514>
            break;
 8007b8e:	bf00      	nop
 8007b90:	e008      	b.n	8007ba4 <USBH_MSC_Process+0x514>
            break;
 8007b92:	bf00      	nop
 8007b94:	e006      	b.n	8007ba4 <USBH_MSC_Process+0x514>
            break;
 8007b96:	bf00      	nop
 8007b98:	e004      	b.n	8007ba4 <USBH_MSC_Process+0x514>
            break;
 8007b9a:	bf00      	nop
      break;
 8007b9c:	e002      	b.n	8007ba4 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba2:	bf00      	nop
  }
  return error;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop

08007bb0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b088      	sub	sp, #32
 8007bca:	af02      	add	r7, sp, #8
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007be0:	2301      	movs	r3, #1
 8007be2:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	2134      	movs	r1, #52	; 0x34
 8007bea:	fb01 f303 	mul.w	r3, r1, r3
 8007bee:	4413      	add	r3, r2
 8007bf0:	3390      	adds	r3, #144	; 0x90
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b06      	cmp	r3, #6
 8007bf6:	d004      	beq.n	8007c02 <USBH_MSC_RdWrProcess+0x3c>
 8007bf8:	2b07      	cmp	r3, #7
 8007bfa:	d037      	beq.n	8007c6c <USBH_MSC_RdWrProcess+0xa6>
 8007bfc:	2b05      	cmp	r3, #5
 8007bfe:	d06a      	beq.n	8007cd6 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8007c00:	e0a6      	b.n	8007d50 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007c02:	78f9      	ldrb	r1, [r7, #3]
 8007c04:	2300      	movs	r3, #0
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fea6 	bl	800895e <USBH_MSC_SCSI_Read>
 8007c12:	4603      	mov	r3, r0
 8007c14:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	2134      	movs	r1, #52	; 0x34
 8007c22:	fb01 f303 	mul.w	r3, r1, r3
 8007c26:	4413      	add	r3, r2
 8007c28:	3390      	adds	r3, #144	; 0x90
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	75fb      	strb	r3, [r7, #23]
      break;
 8007c32:	e088      	b.n	8007d46 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d109      	bne.n	8007c4e <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	2134      	movs	r1, #52	; 0x34
 8007c40:	fb01 f303 	mul.w	r3, r1, r3
 8007c44:	4413      	add	r3, r2
 8007c46:	3390      	adds	r3, #144	; 0x90
 8007c48:	2205      	movs	r2, #5
 8007c4a:	701a      	strb	r2, [r3, #0]
      break;
 8007c4c:	e07b      	b.n	8007d46 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d178      	bne.n	8007d46 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007c54:	78fb      	ldrb	r3, [r7, #3]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	2134      	movs	r1, #52	; 0x34
 8007c5a:	fb01 f303 	mul.w	r3, r1, r3
 8007c5e:	4413      	add	r3, r2
 8007c60:	3390      	adds	r3, #144	; 0x90
 8007c62:	2208      	movs	r2, #8
 8007c64:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007c66:	2302      	movs	r3, #2
 8007c68:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6a:	e06c      	b.n	8007d46 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007c6c:	78f9      	ldrb	r1, [r7, #3]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	2300      	movs	r3, #0
 8007c74:	2200      	movs	r2, #0
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fe06 	bl	8008888 <USBH_MSC_SCSI_Write>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10b      	bne.n	8007c9e <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007c86:	78fb      	ldrb	r3, [r7, #3]
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	2134      	movs	r1, #52	; 0x34
 8007c8c:	fb01 f303 	mul.w	r3, r1, r3
 8007c90:	4413      	add	r3, r2
 8007c92:	3390      	adds	r3, #144	; 0x90
 8007c94:	2201      	movs	r2, #1
 8007c96:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c9c:	e055      	b.n	8007d4a <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d109      	bne.n	8007cb8 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	2134      	movs	r1, #52	; 0x34
 8007caa:	fb01 f303 	mul.w	r3, r1, r3
 8007cae:	4413      	add	r3, r2
 8007cb0:	3390      	adds	r3, #144	; 0x90
 8007cb2:	2205      	movs	r2, #5
 8007cb4:	701a      	strb	r2, [r3, #0]
      break;
 8007cb6:	e048      	b.n	8007d4a <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d145      	bne.n	8007d4a <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	2134      	movs	r1, #52	; 0x34
 8007cc4:	fb01 f303 	mul.w	r3, r1, r3
 8007cc8:	4413      	add	r3, r2
 8007cca:	3390      	adds	r3, #144	; 0x90
 8007ccc:	2208      	movs	r2, #8
 8007cce:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd4:	e039      	b.n	8007d4a <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	2234      	movs	r2, #52	; 0x34
 8007cda:	fb02 f303 	mul.w	r3, r2, r3
 8007cde:	3398      	adds	r3, #152	; 0x98
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	1d1a      	adds	r2, r3, #4
 8007ce6:	78fb      	ldrb	r3, [r7, #3]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fd53 	bl	8008796 <USBH_MSC_SCSI_RequestSense>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d113      	bne.n	8007d22 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	2134      	movs	r1, #52	; 0x34
 8007d00:	fb01 f303 	mul.w	r3, r1, r3
 8007d04:	4413      	add	r3, r2
 8007d06:	3390      	adds	r3, #144	; 0x90
 8007d08:	2201      	movs	r2, #1
 8007d0a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	2134      	movs	r1, #52	; 0x34
 8007d12:	fb01 f303 	mul.w	r3, r1, r3
 8007d16:	4413      	add	r3, r2
 8007d18:	3391      	adds	r3, #145	; 0x91
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d012      	beq.n	8007d4e <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d10f      	bne.n	8007d4e <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	2134      	movs	r1, #52	; 0x34
 8007d34:	fb01 f303 	mul.w	r3, r1, r3
 8007d38:	4413      	add	r3, r2
 8007d3a:	3390      	adds	r3, #144	; 0x90
 8007d3c:	2208      	movs	r2, #8
 8007d3e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007d40:	2302      	movs	r3, #2
 8007d42:	75fb      	strb	r3, [r7, #23]
      break;
 8007d44:	e003      	b.n	8007d4e <USBH_MSC_RdWrProcess+0x188>
      break;
 8007d46:	bf00      	nop
 8007d48:	e002      	b.n	8007d50 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8007d4a:	bf00      	nop
 8007d4c:	e000      	b.n	8007d50 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8007d4e:	bf00      	nop

  }
  return error;
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	460b      	mov	r3, r1
 8007d64:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b0b      	cmp	r3, #11
 8007d78:	d10c      	bne.n	8007d94 <USBH_MSC_UnitIsReady+0x3a>
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	2134      	movs	r1, #52	; 0x34
 8007d80:	fb01 f303 	mul.w	r3, r1, r3
 8007d84:	4413      	add	r3, r2
 8007d86:	3391      	adds	r3, #145	; 0x91
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d102      	bne.n	8007d94 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	73fb      	strb	r3, [r7, #15]
 8007d92:	e001      	b.n	8007d98 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b086      	sub	sp, #24
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	460b      	mov	r3, r1
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b0b      	cmp	r3, #11
 8007dc6:	d10d      	bne.n	8007de4 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007dc8:	7afb      	ldrb	r3, [r7, #11]
 8007dca:	2234      	movs	r2, #52	; 0x34
 8007dcc:	fb02 f303 	mul.w	r3, r2, r3
 8007dd0:	3390      	adds	r3, #144	; 0x90
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	2234      	movs	r2, #52	; 0x34
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f007 fbc6 	bl	800f56c <memcpy>
    return USBH_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	e000      	b.n	8007de6 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007de4:	2302      	movs	r3, #2
  }
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b088      	sub	sp, #32
 8007df2:	af02      	add	r7, sp, #8
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00e      	beq.n	8007e32 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007e1a:	2b0b      	cmp	r3, #11
 8007e1c:	d109      	bne.n	8007e32 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007e1e:	7afb      	ldrb	r3, [r7, #11]
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	2134      	movs	r1, #52	; 0x34
 8007e24:	fb01 f303 	mul.w	r3, r1, r3
 8007e28:	4413      	add	r3, r2
 8007e2a:	3390      	adds	r3, #144	; 0x90
 8007e2c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d001      	beq.n	8007e36 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8007e32:	2302      	movs	r3, #2
 8007e34:	e040      	b.n	8007eb8 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2206      	movs	r2, #6
 8007e3a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	2134      	movs	r1, #52	; 0x34
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
 8007e46:	4413      	add	r3, r2
 8007e48:	3390      	adds	r3, #144	; 0x90
 8007e4a:	2206      	movs	r2, #6
 8007e4c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007e58:	7af9      	ldrb	r1, [r7, #11]
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 fd7b 	bl	800895e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e6e:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007e70:	e016      	b.n	8007ea0 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	1ad2      	subs	r2, r2, r3
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	f242 7110 	movw	r1, #10000	; 0x2710
 8007e82:	fb01 f303 	mul.w	r3, r1, r3
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d805      	bhi.n	8007e96 <USBH_MSC_Read+0xa8>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d104      	bne.n	8007ea0 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e00b      	b.n	8007eb8 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007ea0:	7afb      	ldrb	r3, [r7, #11]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7ff fe8e 	bl	8007bc6 <USBH_MSC_RdWrProcess>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d0e0      	beq.n	8007e72 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	607a      	str	r2, [r7, #4]
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00e      	beq.n	8007f04 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007eec:	2b0b      	cmp	r3, #11
 8007eee:	d109      	bne.n	8007f04 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007ef0:	7afb      	ldrb	r3, [r7, #11]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	2134      	movs	r1, #52	; 0x34
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	4413      	add	r3, r2
 8007efc:	3390      	adds	r3, #144	; 0x90
 8007efe:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d001      	beq.n	8007f08 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007f04:	2302      	movs	r3, #2
 8007f06:	e040      	b.n	8007f8a <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2207      	movs	r2, #7
 8007f0c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007f0e:	7afb      	ldrb	r3, [r7, #11]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	2134      	movs	r1, #52	; 0x34
 8007f14:	fb01 f303 	mul.w	r3, r1, r3
 8007f18:	4413      	add	r3, r2
 8007f1a:	3390      	adds	r3, #144	; 0x90
 8007f1c:	2207      	movs	r2, #7
 8007f1e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007f2a:	7af9      	ldrb	r1, [r7, #11]
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 fca7 	bl	8008888 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f40:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007f42:	e016      	b.n	8007f72 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	1ad2      	subs	r2, r2, r3
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	f242 7110 	movw	r1, #10000	; 0x2710
 8007f54:	fb01 f303 	mul.w	r3, r1, r3
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d805      	bhi.n	8007f68 <USBH_MSC_Write+0xa8>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d104      	bne.n	8007f72 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e00b      	b.n	8007f8a <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007f72:	7afb      	ldrb	r3, [r7, #11]
 8007f74:	4619      	mov	r1, r3
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7ff fe25 	bl	8007bc6 <USBH_MSC_RdWrProcess>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d0e0      	beq.n	8007f44 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2201      	movs	r2, #1
 8007f86:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b082      	sub	sp, #8
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2221      	movs	r2, #33	; 0x21
 8007f9e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	22ff      	movs	r2, #255	; 0xff
 8007fa4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8007fb8:	2200      	movs	r2, #0
 8007fba:	2100      	movs	r1, #0
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 fdae 	bl	8009b1e <USBH_CtlReq>
 8007fc2:	4603      	mov	r3, r0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	22a1      	movs	r2, #161	; 0xa1
 8007fda:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	22fe      	movs	r2, #254	; 0xfe
 8007fe0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 fd90 	bl	8009b1e <USBH_CtlReq>
 8007ffe:	4603      	mov	r3, r0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4a09      	ldr	r2, [pc, #36]	; (8008044 <USBH_MSC_BOT_Init+0x3c>)
 800801e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4a09      	ldr	r2, [pc, #36]	; (8008048 <USBH_MSC_BOT_Init+0x40>)
 8008024:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	43425355 	.word	0x43425355
 8008048:	20304050 	.word	0x20304050

0800804c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af02      	add	r7, sp, #8
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008058:	2301      	movs	r3, #1
 800805a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800805c:	2301      	movs	r3, #1
 800805e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008060:	2301      	movs	r3, #1
 8008062:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008064:	2300      	movs	r3, #0
 8008066:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800807c:	3b01      	subs	r3, #1
 800807e:	2b0a      	cmp	r3, #10
 8008080:	f200 81a1 	bhi.w	80083c6 <USBH_MSC_BOT_Process+0x37a>
 8008084:	a201      	add	r2, pc, #4	; (adr r2, 800808c <USBH_MSC_BOT_Process+0x40>)
 8008086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808a:	bf00      	nop
 800808c:	080080b9 	.word	0x080080b9
 8008090:	080080e3 	.word	0x080080e3
 8008094:	0800814d 	.word	0x0800814d
 8008098:	0800816b 	.word	0x0800816b
 800809c:	080081ef 	.word	0x080081ef
 80080a0:	08008213 	.word	0x08008213
 80080a4:	080082ad 	.word	0x080082ad
 80080a8:	080082c9 	.word	0x080082c9
 80080ac:	0800831b 	.word	0x0800831b
 80080b0:	0800834b 	.word	0x0800834b
 80080b4:	080083ad 	.word	0x080083ad
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	795a      	ldrb	r2, [r3, #5]
 80080d2:	2301      	movs	r3, #1
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	4613      	mov	r3, r2
 80080d8:	221f      	movs	r2, #31
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f001 ff2f 	bl	8009f3e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80080e0:	e180      	b.n	80083e4 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	795b      	ldrb	r3, [r3, #5]
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f007 f921 	bl	800f330 <USBH_LL_GetURBState>
 80080ee:	4603      	mov	r3, r0
 80080f0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80080f2:	7d3b      	ldrb	r3, [r7, #20]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d118      	bne.n	800812a <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00f      	beq.n	8008120 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008106:	b25b      	sxtb	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	da04      	bge.n	8008116 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	2203      	movs	r2, #3
 8008110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008114:	e159      	b.n	80083ca <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	2205      	movs	r2, #5
 800811a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800811e:	e154      	b.n	80083ca <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2207      	movs	r2, #7
 8008124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008128:	e14f      	b.n	80083ca <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800812a:	7d3b      	ldrb	r3, [r7, #20]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d104      	bne.n	800813a <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008138:	e147      	b.n	80083ca <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800813a:	7d3b      	ldrb	r3, [r7, #20]
 800813c:	2b05      	cmp	r3, #5
 800813e:	f040 8144 	bne.w	80083ca <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	220a      	movs	r2, #10
 8008146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800814a:	e13e      	b.n	80083ca <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	895a      	ldrh	r2, [r3, #10]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	791b      	ldrb	r3, [r3, #4]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 ff14 	bl	8009f88 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	2204      	movs	r2, #4
 8008164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008168:	e13c      	b.n	80083e4 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	791b      	ldrb	r3, [r3, #4]
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f007 f8dd 	bl	800f330 <USBH_LL_GetURBState>
 8008176:	4603      	mov	r3, r0
 8008178:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800817a:	7d3b      	ldrb	r3, [r7, #20]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d12d      	bne.n	80081dc <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	8952      	ldrh	r2, [r2, #10]
 8008188:	4293      	cmp	r3, r2
 800818a:	d910      	bls.n	80081ae <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	8952      	ldrh	r2, [r2, #10]
 8008196:	441a      	add	r2, r3
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	8952      	ldrh	r2, [r2, #10]
 80081a6:	1a9a      	subs	r2, r3, r2
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80081ac:	e002      	b.n	80081b4 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	2200      	movs	r2, #0
 80081b2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	895a      	ldrh	r2, [r3, #10]
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	791b      	ldrb	r3, [r3, #4]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 fedc 	bl	8009f88 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80081d0:	e0fd      	b.n	80083ce <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2207      	movs	r2, #7
 80081d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80081da:	e0f8      	b.n	80083ce <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 80081dc:	7d3b      	ldrb	r3, [r7, #20]
 80081de:	2b05      	cmp	r3, #5
 80081e0:	f040 80f5 	bne.w	80083ce <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2209      	movs	r2, #9
 80081e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80081ec:	e0ef      	b.n	80083ce <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	891a      	ldrh	r2, [r3, #8]
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	7958      	ldrb	r0, [r3, #5]
 80081fc:	2301      	movs	r3, #1
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	4603      	mov	r3, r0
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 fe9b 	bl	8009f3e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2206      	movs	r2, #6
 800820c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008210:	e0e8      	b.n	80083e4 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	795b      	ldrb	r3, [r3, #5]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f007 f889 	bl	800f330 <USBH_LL_GetURBState>
 800821e:	4603      	mov	r3, r0
 8008220:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008222:	7d3b      	ldrb	r3, [r7, #20]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d130      	bne.n	800828a <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	8912      	ldrh	r2, [r2, #8]
 8008230:	4293      	cmp	r3, r2
 8008232:	d910      	bls.n	8008256 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	8912      	ldrh	r2, [r2, #8]
 800823e:	441a      	add	r2, r3
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	8912      	ldrh	r2, [r2, #8]
 800824e:	1a9a      	subs	r2, r3, r2
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	65da      	str	r2, [r3, #92]	; 0x5c
 8008254:	e002      	b.n	800825c <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	2200      	movs	r2, #0
 800825a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00d      	beq.n	8008280 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	891a      	ldrh	r2, [r3, #8]
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	7958      	ldrb	r0, [r3, #5]
 8008272:	2301      	movs	r3, #1
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	4603      	mov	r3, r0
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 fe60 	bl	8009f3e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800827e:	e0a8      	b.n	80083d2 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	2207      	movs	r2, #7
 8008284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008288:	e0a3      	b.n	80083d2 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 800828a:	7d3b      	ldrb	r3, [r7, #20]
 800828c:	2b02      	cmp	r3, #2
 800828e:	d104      	bne.n	800829a <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	2205      	movs	r2, #5
 8008294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008298:	e09b      	b.n	80083d2 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 800829a:	7d3b      	ldrb	r3, [r7, #20]
 800829c:	2b05      	cmp	r3, #5
 800829e:	f040 8098 	bne.w	80083d2 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	220a      	movs	r2, #10
 80082a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80082aa:	e092      	b.n	80083d2 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	791b      	ldrb	r3, [r3, #4]
 80082b6:	220d      	movs	r2, #13
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 fe65 	bl	8009f88 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	2208      	movs	r2, #8
 80082c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80082c6:	e08d      	b.n	80083e4 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	791b      	ldrb	r3, [r3, #4]
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f007 f82e 	bl	800f330 <USBH_LL_GetURBState>
 80082d4:	4603      	mov	r3, r0
 80082d6:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80082d8:	7d3b      	ldrb	r3, [r7, #20]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d115      	bne.n	800830a <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f8aa 	bl	8008448 <USBH_MSC_DecodeCSW>
 80082f4:	4603      	mov	r3, r0
 80082f6:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80082f8:	7d7b      	ldrb	r3, [r7, #21]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d102      	bne.n	8008304 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008302:	e068      	b.n	80083d6 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8008304:	2302      	movs	r3, #2
 8008306:	75fb      	strb	r3, [r7, #23]
      break;
 8008308:	e065      	b.n	80083d6 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800830a:	7d3b      	ldrb	r3, [r7, #20]
 800830c:	2b05      	cmp	r3, #5
 800830e:	d162      	bne.n	80083d6 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	2209      	movs	r2, #9
 8008314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008318:	e05d      	b.n	80083d6 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800831a:	78fb      	ldrb	r3, [r7, #3]
 800831c:	2200      	movs	r2, #0
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f865 	bl	80083f0 <USBH_MSC_BOT_Abort>
 8008326:	4603      	mov	r3, r0
 8008328:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800832a:	7dbb      	ldrb	r3, [r7, #22]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d104      	bne.n	800833a <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	2207      	movs	r2, #7
 8008334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008338:	e04f      	b.n	80083da <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800833a:	7dbb      	ldrb	r3, [r7, #22]
 800833c:	2b04      	cmp	r3, #4
 800833e:	d14c      	bne.n	80083da <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	220b      	movs	r2, #11
 8008344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008348:	e047      	b.n	80083da <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800834a:	78fb      	ldrb	r3, [r7, #3]
 800834c:	2201      	movs	r2, #1
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f84d 	bl	80083f0 <USBH_MSC_BOT_Abort>
 8008356:	4603      	mov	r3, r0
 8008358:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800835a:	7dbb      	ldrb	r3, [r7, #22]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d11d      	bne.n	800839c <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	795b      	ldrb	r3, [r3, #5]
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f007 f83f 	bl	800f3ea <USBH_LL_GetToggle>
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	7959      	ldrb	r1, [r3, #5]
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	f1c3 0301 	rsb	r3, r3, #1
 800837a:	b2db      	uxtb	r3, r3
 800837c:	461a      	mov	r2, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f007 f800 	bl	800f384 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	791b      	ldrb	r3, [r3, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f006 fff9 	bl	800f384 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	2209      	movs	r2, #9
 8008396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800839a:	e020      	b.n	80083de <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 800839c:	7dbb      	ldrb	r3, [r7, #22]
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d11d      	bne.n	80083de <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	220b      	movs	r2, #11
 80083a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80083aa:	e018      	b.n	80083de <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7ff fdf0 	bl	8007f92 <USBH_MSC_BOT_REQ_Reset>
 80083b2:	4603      	mov	r3, r0
 80083b4:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d112      	bne.n	80083e2 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80083c4:	e00d      	b.n	80083e2 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 80083c6:	bf00      	nop
 80083c8:	e00c      	b.n	80083e4 <USBH_MSC_BOT_Process+0x398>
      break;
 80083ca:	bf00      	nop
 80083cc:	e00a      	b.n	80083e4 <USBH_MSC_BOT_Process+0x398>
      break;
 80083ce:	bf00      	nop
 80083d0:	e008      	b.n	80083e4 <USBH_MSC_BOT_Process+0x398>
      break;
 80083d2:	bf00      	nop
 80083d4:	e006      	b.n	80083e4 <USBH_MSC_BOT_Process+0x398>
      break;
 80083d6:	bf00      	nop
 80083d8:	e004      	b.n	80083e4 <USBH_MSC_BOT_Process+0x398>
      break;
 80083da:	bf00      	nop
 80083dc:	e002      	b.n	80083e4 <USBH_MSC_BOT_Process+0x398>
      break;
 80083de:	bf00      	nop
 80083e0:	e000      	b.n	80083e4 <USBH_MSC_BOT_Process+0x398>
      break;
 80083e2:	bf00      	nop
  }
  return status;
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop

080083f0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
 80083fc:	4613      	mov	r3, r2
 80083fe:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008400:	2302      	movs	r3, #2
 8008402:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800840e:	78bb      	ldrb	r3, [r7, #2]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <USBH_MSC_BOT_Abort+0x2a>
 8008414:	2b01      	cmp	r3, #1
 8008416:	d009      	beq.n	800842c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008418:	e011      	b.n	800843e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	79db      	ldrb	r3, [r3, #7]
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 f99c 	bl	800975e <USBH_ClrFeature>
 8008426:	4603      	mov	r3, r0
 8008428:	73fb      	strb	r3, [r7, #15]
      break;
 800842a:	e008      	b.n	800843e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	799b      	ldrb	r3, [r3, #6]
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 f993 	bl	800975e <USBH_ClrFeature>
 8008438:	4603      	mov	r3, r0
 800843a:	73fb      	strb	r3, [r7, #15]
      break;
 800843c:	bf00      	nop
  }
  return status;
 800843e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800845a:	2301      	movs	r3, #1
 800845c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	791b      	ldrb	r3, [r3, #4]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f006 fed1 	bl	800f20c <USBH_LL_GetLastXferSize>
 800846a:	4603      	mov	r3, r0
 800846c:	2b0d      	cmp	r3, #13
 800846e:	d002      	beq.n	8008476 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008470:	2302      	movs	r3, #2
 8008472:	73fb      	strb	r3, [r7, #15]
 8008474:	e024      	b.n	80084c0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800847a:	4a14      	ldr	r2, [pc, #80]	; (80084cc <USBH_MSC_DecodeCSW+0x84>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d11d      	bne.n	80084bc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008488:	429a      	cmp	r2, r3
 800848a:	d119      	bne.n	80084c0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008492:	2b00      	cmp	r3, #0
 8008494:	d102      	bne.n	800849c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]
 800849a:	e011      	b.n	80084c0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d102      	bne.n	80084ac <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80084a6:	2301      	movs	r3, #1
 80084a8:	73fb      	strb	r3, [r7, #15]
 80084aa:	e009      	b.n	80084c0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d104      	bne.n	80084c0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80084b6:	2302      	movs	r3, #2
 80084b8:	73fb      	strb	r3, [r7, #15]
 80084ba:	e001      	b.n	80084c0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80084bc:	2302      	movs	r3, #2
 80084be:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	53425355 	.word	0x53425355

080084d0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80084dc:	2302      	movs	r3, #2
 80084de:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d002      	beq.n	80084fa <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d021      	beq.n	800853c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80084f8:	e028      	b.n	800854c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2200      	movs	r2, #0
 80084fe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	220a      	movs	r2, #10
 800850c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	3363      	adds	r3, #99	; 0x63
 8008514:	2210      	movs	r2, #16
 8008516:	2100      	movs	r1, #0
 8008518:	4618      	mov	r0, r3
 800851a:	f007 f832 	bl	800f582 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008536:	2301      	movs	r3, #1
 8008538:	73fb      	strb	r3, [r7, #15]
      break;
 800853a:	e007      	b.n	800854c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff fd83 	bl	800804c <USBH_MSC_BOT_Process>
 8008546:	4603      	mov	r3, r0
 8008548:	73fb      	strb	r3, [r7, #15]
      break;
 800854a:	bf00      	nop
  }

  return error;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b086      	sub	sp, #24
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	460b      	mov	r3, r1
 8008560:	607a      	str	r2, [r7, #4]
 8008562:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008564:	2301      	movs	r3, #1
 8008566:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008578:	2b01      	cmp	r3, #1
 800857a:	d002      	beq.n	8008582 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800857c:	2b02      	cmp	r3, #2
 800857e:	d027      	beq.n	80085d0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008580:	e05f      	b.n	8008642 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	2208      	movs	r2, #8
 8008586:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	2280      	movs	r2, #128	; 0x80
 800858c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	220a      	movs	r2, #10
 8008594:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	3363      	adds	r3, #99	; 0x63
 800859c:	2210      	movs	r2, #16
 800859e:	2100      	movs	r1, #0
 80085a0:	4618      	mov	r0, r3
 80085a2:	f006 ffee 	bl	800f582 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	2225      	movs	r2, #37	; 0x25
 80085aa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2202      	movs	r2, #2
 80085ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f103 0210 	add.w	r2, r3, #16
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80085ca:	2301      	movs	r3, #1
 80085cc:	75fb      	strb	r3, [r7, #23]
      break;
 80085ce:	e038      	b.n	8008642 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80085d0:	7afb      	ldrb	r3, [r7, #11]
 80085d2:	4619      	mov	r1, r3
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff fd39 	bl	800804c <USBH_MSC_BOT_Process>
 80085da:	4603      	mov	r3, r0
 80085dc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80085de:	7dfb      	ldrb	r3, [r7, #23]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d12d      	bne.n	8008640 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ea:	3303      	adds	r3, #3
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085f6:	3302      	adds	r3, #2
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	021b      	lsls	r3, r3, #8
 80085fc:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008604:	3301      	adds	r3, #1
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800860a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	061b      	lsls	r3, r3, #24
 8008616:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008622:	3307      	adds	r3, #7
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	b29a      	uxth	r2, r3
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800862e:	3306      	adds	r3, #6
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	b29b      	uxth	r3, r3
 8008634:	021b      	lsls	r3, r3, #8
 8008636:	b29b      	uxth	r3, r3
 8008638:	4313      	orrs	r3, r2
 800863a:	b29a      	uxth	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	809a      	strh	r2, [r3, #4]
      break;
 8008640:	bf00      	nop
  }

  return error;
 8008642:	7dfb      	ldrb	r3, [r7, #23]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	460b      	mov	r3, r1
 8008656:	607a      	str	r2, [r7, #4]
 8008658:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800865a:	2302      	movs	r3, #2
 800865c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800866e:	2b01      	cmp	r3, #1
 8008670:	d002      	beq.n	8008678 <USBH_MSC_SCSI_Inquiry+0x2c>
 8008672:	2b02      	cmp	r3, #2
 8008674:	d03d      	beq.n	80086f2 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8008676:	e089      	b.n	800878c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	2224      	movs	r2, #36	; 0x24
 800867c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2280      	movs	r2, #128	; 0x80
 8008682:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	220a      	movs	r2, #10
 800868a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	3363      	adds	r3, #99	; 0x63
 8008692:	220a      	movs	r2, #10
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f006 ff73 	bl	800f582 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2212      	movs	r2, #18
 80086a0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80086a4:	7afb      	ldrb	r3, [r7, #11]
 80086a6:	015b      	lsls	r3, r3, #5
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	2224      	movs	r2, #36	; 0x24
 80086c4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2202      	movs	r2, #2
 80086dc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f103 0210 	add.w	r2, r3, #16
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80086ec:	2301      	movs	r3, #1
 80086ee:	75fb      	strb	r3, [r7, #23]
      break;
 80086f0:	e04c      	b.n	800878c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80086f2:	7afb      	ldrb	r3, [r7, #11]
 80086f4:	4619      	mov	r1, r3
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f7ff fca8 	bl	800804c <USBH_MSC_BOT_Process>
 80086fc:	4603      	mov	r3, r0
 80086fe:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008700:	7dfb      	ldrb	r3, [r7, #23]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d141      	bne.n	800878a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008706:	2222      	movs	r2, #34	; 0x22
 8008708:	2100      	movs	r1, #0
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f006 ff39 	bl	800f582 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	f003 031f 	and.w	r3, r3, #31
 800871c:	b2da      	uxtb	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	095b      	lsrs	r3, r3, #5
 800872c:	b2da      	uxtb	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008738:	3301      	adds	r3, #1
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	b25b      	sxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	da03      	bge.n	800874a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	709a      	strb	r2, [r3, #2]
 8008748:	e002      	b.n	8008750 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	1cd8      	adds	r0, r3, #3
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800875a:	3308      	adds	r3, #8
 800875c:	2208      	movs	r2, #8
 800875e:	4619      	mov	r1, r3
 8008760:	f006 ff04 	bl	800f56c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f103 000c 	add.w	r0, r3, #12
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008770:	3310      	adds	r3, #16
 8008772:	2210      	movs	r2, #16
 8008774:	4619      	mov	r1, r3
 8008776:	f006 fef9 	bl	800f56c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	331d      	adds	r3, #29
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008784:	3220      	adds	r2, #32
 8008786:	6812      	ldr	r2, [r2, #0]
 8008788:	601a      	str	r2, [r3, #0]
      break;
 800878a:	bf00      	nop
  }

  return error;
 800878c:	7dfb      	ldrb	r3, [r7, #23]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b086      	sub	sp, #24
 800879a:	af00      	add	r7, sp, #0
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	460b      	mov	r3, r1
 80087a0:	607a      	str	r2, [r7, #4]
 80087a2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80087a4:	2302      	movs	r3, #2
 80087a6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d002      	beq.n	80087c2 <USBH_MSC_SCSI_RequestSense+0x2c>
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d03d      	beq.n	800883c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80087c0:	e05d      	b.n	800887e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	220e      	movs	r2, #14
 80087c6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	2280      	movs	r2, #128	; 0x80
 80087cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	220a      	movs	r2, #10
 80087d4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	3363      	adds	r3, #99	; 0x63
 80087dc:	2210      	movs	r2, #16
 80087de:	2100      	movs	r1, #0
 80087e0:	4618      	mov	r0, r3
 80087e2:	f006 fece 	bl	800f582 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	2203      	movs	r2, #3
 80087ea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80087ee:	7afb      	ldrb	r3, [r7, #11]
 80087f0:	015b      	lsls	r3, r3, #5
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	220e      	movs	r2, #14
 800880e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2202      	movs	r2, #2
 8008826:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	f103 0210 	add.w	r2, r3, #16
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008836:	2301      	movs	r3, #1
 8008838:	75fb      	strb	r3, [r7, #23]
      break;
 800883a:	e020      	b.n	800887e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800883c:	7afb      	ldrb	r3, [r7, #11]
 800883e:	4619      	mov	r1, r3
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f7ff fc03 	bl	800804c <USBH_MSC_BOT_Process>
 8008846:	4603      	mov	r3, r0
 8008848:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800884a:	7dfb      	ldrb	r3, [r7, #23]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d115      	bne.n	800887c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008856:	3302      	adds	r3, #2
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	f003 030f 	and.w	r3, r3, #15
 800885e:	b2da      	uxtb	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800886a:	7b1a      	ldrb	r2, [r3, #12]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008876:	7b5a      	ldrb	r2, [r3, #13]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	709a      	strb	r2, [r3, #2]
      break;
 800887c:	bf00      	nop
  }

  return error;
 800887e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	607a      	str	r2, [r7, #4]
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	460b      	mov	r3, r1
 8008896:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008898:	2302      	movs	r3, #2
 800889a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d002      	beq.n	80088b6 <USBH_MSC_SCSI_Write+0x2e>
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d047      	beq.n	8008944 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80088b4:	e04e      	b.n	8008954 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80088bc:	461a      	mov	r2, r3
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	fb03 f202 	mul.w	r2, r3, r2
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	220a      	movs	r2, #10
 80088d4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	3363      	adds	r3, #99	; 0x63
 80088dc:	2210      	movs	r2, #16
 80088de:	2100      	movs	r1, #0
 80088e0:	4618      	mov	r0, r3
 80088e2:	f006 fe4e 	bl	800f582 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	222a      	movs	r2, #42	; 0x2a
 80088ea:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80088ee:	79fa      	ldrb	r2, [r7, #7]
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80088f6:	79ba      	ldrb	r2, [r7, #6]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80088fe:	797a      	ldrb	r2, [r7, #5]
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008906:	1d3b      	adds	r3, r7, #4
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008910:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800891a:	f107 0320 	add.w	r3, r7, #32
 800891e:	781a      	ldrb	r2, [r3, #0]
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2202      	movs	r2, #2
 8008932:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	683a      	ldr	r2, [r7, #0]
 800893a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800893e:	2301      	movs	r3, #1
 8008940:	75fb      	strb	r3, [r7, #23]
      break;
 8008942:	e007      	b.n	8008954 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008944:	7afb      	ldrb	r3, [r7, #11]
 8008946:	4619      	mov	r1, r3
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff fb7f 	bl	800804c <USBH_MSC_BOT_Process>
 800894e:	4603      	mov	r3, r0
 8008950:	75fb      	strb	r3, [r7, #23]
      break;
 8008952:	bf00      	nop
  }

  return error;
 8008954:	7dfb      	ldrb	r3, [r7, #23]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b086      	sub	sp, #24
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
 800896a:	460b      	mov	r3, r1
 800896c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800896e:	2302      	movs	r3, #2
 8008970:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008982:	2b01      	cmp	r3, #1
 8008984:	d002      	beq.n	800898c <USBH_MSC_SCSI_Read+0x2e>
 8008986:	2b02      	cmp	r3, #2
 8008988:	d047      	beq.n	8008a1a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800898a:	e04e      	b.n	8008a2a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008992:	461a      	mov	r2, r3
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	fb03 f202 	mul.w	r2, r3, r2
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2280      	movs	r2, #128	; 0x80
 80089a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	220a      	movs	r2, #10
 80089aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	3363      	adds	r3, #99	; 0x63
 80089b2:	2210      	movs	r2, #16
 80089b4:	2100      	movs	r1, #0
 80089b6:	4618      	mov	r0, r3
 80089b8:	f006 fde3 	bl	800f582 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	2228      	movs	r2, #40	; 0x28
 80089c0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80089c4:	79fa      	ldrb	r2, [r7, #7]
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80089cc:	79ba      	ldrb	r2, [r7, #6]
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80089d4:	797a      	ldrb	r2, [r7, #5]
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80089dc:	1d3b      	adds	r3, r7, #4
 80089de:	781a      	ldrb	r2, [r3, #0]
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80089e6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80089f0:	f107 0320 	add.w	r3, r7, #32
 80089f4:	781a      	ldrb	r2, [r3, #0]
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008a14:	2301      	movs	r3, #1
 8008a16:	75fb      	strb	r3, [r7, #23]
      break;
 8008a18:	e007      	b.n	8008a2a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008a1a:	7afb      	ldrb	r3, [r7, #11]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f7ff fb14 	bl	800804c <USBH_MSC_BOT_Process>
 8008a24:	4603      	mov	r3, r0
 8008a26:	75fb      	strb	r3, [r7, #23]
      break;
 8008a28:	bf00      	nop
  }

  return error;
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e029      	b.n	8008aa0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	79fa      	ldrb	r2, [r7, #7]
 8008a50:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 f81f 	bl	8008aa8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f006 fb05 	bl	800f0a8 <USBH_LL_Init>

  return USBH_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	e009      	b.n	8008ace <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	33e0      	adds	r3, #224	; 0xe0
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	3301      	adds	r3, #1
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b0e      	cmp	r3, #14
 8008ad2:	d9f2      	bls.n	8008aba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	e009      	b.n	8008aee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3301      	adds	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008af4:	d3f1      	bcc.n	8008ada <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2240      	movs	r2, #64	; 0x40
 8008b1a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d016      	beq.n	8008b92 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10e      	bne.n	8008b8c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008b74:	1c59      	adds	r1, r3, #1
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	33de      	adds	r3, #222	; 0xde
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	73fb      	strb	r3, [r7, #15]
 8008b8a:	e004      	b.n	8008b96 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	73fb      	strb	r3, [r7, #15]
 8008b90:	e001      	b.n	8008b96 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008b92:	2302      	movs	r3, #2
 8008b94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008bba:	78fa      	ldrb	r2, [r7, #3]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d204      	bcs.n	8008bca <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008bc8:	e001      	b.n	8008bce <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008bca:	2302      	movs	r3, #2
 8008bcc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	4608      	mov	r0, r1
 8008be6:	4611      	mov	r1, r2
 8008be8:	461a      	mov	r2, r3
 8008bea:	4603      	mov	r3, r0
 8008bec:	70fb      	strb	r3, [r7, #3]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	70bb      	strb	r3, [r7, #2]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008c04:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c06:	e025      	b.n	8008c54 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	221a      	movs	r2, #26
 8008c0c:	fb02 f303 	mul.w	r3, r2, r3
 8008c10:	3308      	adds	r3, #8
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	4413      	add	r3, r2
 8008c16:	3302      	adds	r3, #2
 8008c18:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	795b      	ldrb	r3, [r3, #5]
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d002      	beq.n	8008c2a <USBH_FindInterface+0x4e>
 8008c24:	78fb      	ldrb	r3, [r7, #3]
 8008c26:	2bff      	cmp	r3, #255	; 0xff
 8008c28:	d111      	bne.n	8008c4e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c2e:	78ba      	ldrb	r2, [r7, #2]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d002      	beq.n	8008c3a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c34:	78bb      	ldrb	r3, [r7, #2]
 8008c36:	2bff      	cmp	r3, #255	; 0xff
 8008c38:	d109      	bne.n	8008c4e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c3e:	787a      	ldrb	r2, [r7, #1]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d002      	beq.n	8008c4a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c44:	787b      	ldrb	r3, [r7, #1]
 8008c46:	2bff      	cmp	r3, #255	; 0xff
 8008c48:	d101      	bne.n	8008c4e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	e006      	b.n	8008c5c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	3301      	adds	r3, #1
 8008c52:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d9d6      	bls.n	8008c08 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008c5a:	23ff      	movs	r3, #255	; 0xff
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	371c      	adds	r7, #28
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f006 fa55 	bl	800f120 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008c76:	2101      	movs	r1, #1
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f006 fb6c 	bl	800f356 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b088      	sub	sp, #32
 8008c8c:	af04      	add	r7, sp, #16
 8008c8e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008c90:	2302      	movs	r3, #2
 8008c92:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d102      	bne.n	8008caa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b0b      	cmp	r3, #11
 8008cb2:	f200 81b3 	bhi.w	800901c <USBH_Process+0x394>
 8008cb6:	a201      	add	r2, pc, #4	; (adr r2, 8008cbc <USBH_Process+0x34>)
 8008cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbc:	08008ced 	.word	0x08008ced
 8008cc0:	08008d1f 	.word	0x08008d1f
 8008cc4:	08008d87 	.word	0x08008d87
 8008cc8:	08008fb7 	.word	0x08008fb7
 8008ccc:	0800901d 	.word	0x0800901d
 8008cd0:	08008e2b 	.word	0x08008e2b
 8008cd4:	08008f5d 	.word	0x08008f5d
 8008cd8:	08008e61 	.word	0x08008e61
 8008cdc:	08008e81 	.word	0x08008e81
 8008ce0:	08008ea1 	.word	0x08008ea1
 8008ce4:	08008ecf 	.word	0x08008ecf
 8008ce8:	08008f9f 	.word	0x08008f9f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 8193 	beq.w	8009020 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008d00:	20c8      	movs	r0, #200	; 0xc8
 8008d02:	f006 fba5 	bl	800f450 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f006 fa65 	bl	800f1d6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008d1c:	e180      	b.n	8009020 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d107      	bne.n	8008d38 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d36:	e182      	b.n	800903e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d42:	d914      	bls.n	8008d6e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d903      	bls.n	8008d66 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	220d      	movs	r2, #13
 8008d62:	701a      	strb	r2, [r3, #0]
      break;
 8008d64:	e16b      	b.n	800903e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	701a      	strb	r2, [r3, #0]
      break;
 8008d6c:	e167      	b.n	800903e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d74:	f103 020a 	add.w	r2, r3, #10
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008d7e:	200a      	movs	r0, #10
 8008d80:	f006 fb66 	bl	800f450 <USBH_Delay>
      break;
 8008d84:	e15b      	b.n	800903e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d005      	beq.n	8008d9c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d96:	2104      	movs	r1, #4
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008d9c:	2064      	movs	r0, #100	; 0x64
 8008d9e:	f006 fb57 	bl	800f450 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f006 f9f2 	bl	800f18c <USBH_LL_GetSpeed>
 8008da8:	4603      	mov	r3, r0
 8008daa:	461a      	mov	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2205      	movs	r2, #5
 8008db6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008db8:	2100      	movs	r1, #0
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f001 f931 	bl	800a022 <USBH_AllocPipe>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008dc8:	2180      	movs	r1, #128	; 0x80
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 f929 	bl	800a022 <USBH_AllocPipe>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	7919      	ldrb	r1, [r3, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008dec:	b292      	uxth	r2, r2
 8008dee:	9202      	str	r2, [sp, #8]
 8008df0:	2200      	movs	r2, #0
 8008df2:	9201      	str	r2, [sp, #4]
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	4603      	mov	r3, r0
 8008df8:	2280      	movs	r2, #128	; 0x80
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f001 f8e2 	bl	8009fc4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	7959      	ldrb	r1, [r3, #5]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e14:	b292      	uxth	r2, r2
 8008e16:	9202      	str	r2, [sp, #8]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	9201      	str	r2, [sp, #4]
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2200      	movs	r2, #0
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 f8ce 	bl	8009fc4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e28:	e109      	b.n	800903e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f90c 	bl	8009048 <USBH_HandleEnum>
 8008e30:	4603      	mov	r3, r0
 8008e32:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008e34:	7bbb      	ldrb	r3, [r7, #14]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f040 80f3 	bne.w	8009024 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d103      	bne.n	8008e58 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2208      	movs	r2, #8
 8008e54:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008e56:	e0e5      	b.n	8009024 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2207      	movs	r2, #7
 8008e5c:	701a      	strb	r2, [r3, #0]
      break;
 8008e5e:	e0e1      	b.n	8009024 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 80de 	beq.w	8009028 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e72:	2101      	movs	r1, #1
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2208      	movs	r2, #8
 8008e7c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008e7e:	e0d3      	b.n	8009028 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fc20 	bl	80096d0 <USBH_SetCfg>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f040 80ca 	bne.w	800902c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2209      	movs	r2, #9
 8008e9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e9e:	e0c5      	b.n	800902c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008ea6:	f003 0320 	and.w	r3, r3, #32
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00b      	beq.n	8008ec6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008eae:	2101      	movs	r1, #1
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fc30 	bl	8009716 <USBH_SetFeature>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f040 80b9 	bne.w	8009030 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	220a      	movs	r2, #10
 8008ec2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ec4:	e0b4      	b.n	8009030 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	220a      	movs	r2, #10
 8008eca:	701a      	strb	r2, [r3, #0]
      break;
 8008ecc:	e0b0      	b.n	8009030 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 80ad 	beq.w	8009034 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]
 8008ee6:	e016      	b.n	8008f16 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008ee8:	7bfa      	ldrb	r2, [r7, #15]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	32de      	adds	r2, #222	; 0xde
 8008eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef2:	791a      	ldrb	r2, [r3, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d108      	bne.n	8008f10 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008efe:	7bfa      	ldrb	r2, [r7, #15]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	32de      	adds	r2, #222	; 0xde
 8008f04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008f0e:	e005      	b.n	8008f1c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	3301      	adds	r3, #1
 8008f14:	73fb      	strb	r3, [r7, #15]
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d0e5      	beq.n	8008ee8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d016      	beq.n	8008f54 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	4798      	blx	r3
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d109      	bne.n	8008f4c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2206      	movs	r2, #6
 8008f3c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f44:	2103      	movs	r1, #3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f4a:	e073      	b.n	8009034 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	220d      	movs	r2, #13
 8008f50:	701a      	strb	r2, [r3, #0]
      break;
 8008f52:	e06f      	b.n	8009034 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	220d      	movs	r2, #13
 8008f58:	701a      	strb	r2, [r3, #0]
      break;
 8008f5a:	e06b      	b.n	8009034 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d017      	beq.n	8008f96 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d103      	bne.n	8008f86 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	220b      	movs	r2, #11
 8008f82:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f84:	e058      	b.n	8009038 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d154      	bne.n	8009038 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	220d      	movs	r2, #13
 8008f92:	701a      	strb	r2, [r3, #0]
      break;
 8008f94:	e050      	b.n	8009038 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	220d      	movs	r2, #13
 8008f9a:	701a      	strb	r2, [r3, #0]
      break;
 8008f9c:	e04c      	b.n	8009038 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d049      	beq.n	800903c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	4798      	blx	r3
      }
      break;
 8008fb4:	e042      	b.n	800903c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff fd72 	bl	8008aa8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d009      	beq.n	8008fe2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d005      	beq.n	8008ff8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ff2:	2105      	movs	r1, #5
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b01      	cmp	r3, #1
 8009002:	d107      	bne.n	8009014 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff fe2b 	bl	8008c68 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009012:	e014      	b.n	800903e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f006 f883 	bl	800f120 <USBH_LL_Start>
      break;
 800901a:	e010      	b.n	800903e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800901c:	bf00      	nop
 800901e:	e00e      	b.n	800903e <USBH_Process+0x3b6>
      break;
 8009020:	bf00      	nop
 8009022:	e00c      	b.n	800903e <USBH_Process+0x3b6>
      break;
 8009024:	bf00      	nop
 8009026:	e00a      	b.n	800903e <USBH_Process+0x3b6>
    break;
 8009028:	bf00      	nop
 800902a:	e008      	b.n	800903e <USBH_Process+0x3b6>
      break;
 800902c:	bf00      	nop
 800902e:	e006      	b.n	800903e <USBH_Process+0x3b6>
      break;
 8009030:	bf00      	nop
 8009032:	e004      	b.n	800903e <USBH_Process+0x3b6>
      break;
 8009034:	bf00      	nop
 8009036:	e002      	b.n	800903e <USBH_Process+0x3b6>
      break;
 8009038:	bf00      	nop
 800903a:	e000      	b.n	800903e <USBH_Process+0x3b6>
      break;
 800903c:	bf00      	nop
  }
  return USBH_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af04      	add	r7, sp, #16
 800904e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009050:	2301      	movs	r3, #1
 8009052:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009054:	2301      	movs	r3, #1
 8009056:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	785b      	ldrb	r3, [r3, #1]
 800905c:	2b07      	cmp	r3, #7
 800905e:	f200 81c1 	bhi.w	80093e4 <USBH_HandleEnum+0x39c>
 8009062:	a201      	add	r2, pc, #4	; (adr r2, 8009068 <USBH_HandleEnum+0x20>)
 8009064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009068:	08009089 	.word	0x08009089
 800906c:	08009147 	.word	0x08009147
 8009070:	080091b1 	.word	0x080091b1
 8009074:	0800923f 	.word	0x0800923f
 8009078:	080092a9 	.word	0x080092a9
 800907c:	08009319 	.word	0x08009319
 8009080:	0800935f 	.word	0x0800935f
 8009084:	080093a5 	.word	0x080093a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009088:	2108      	movs	r1, #8
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa50 	bl	8009530 <USBH_Get_DevDesc>
 8009090:	4603      	mov	r3, r0
 8009092:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d130      	bne.n	80090fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	7919      	ldrb	r1, [r3, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80090be:	b292      	uxth	r2, r2
 80090c0:	9202      	str	r2, [sp, #8]
 80090c2:	2200      	movs	r2, #0
 80090c4:	9201      	str	r2, [sp, #4]
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	4603      	mov	r3, r0
 80090ca:	2280      	movs	r2, #128	; 0x80
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 ff79 	bl	8009fc4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	7959      	ldrb	r1, [r3, #5]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090e6:	b292      	uxth	r2, r2
 80090e8:	9202      	str	r2, [sp, #8]
 80090ea:	2200      	movs	r2, #0
 80090ec:	9201      	str	r2, [sp, #4]
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	4603      	mov	r3, r0
 80090f2:	2200      	movs	r2, #0
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 ff65 	bl	8009fc4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80090fa:	e175      	b.n	80093e8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	2b03      	cmp	r3, #3
 8009100:	f040 8172 	bne.w	80093e8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800910a:	3301      	adds	r3, #1
 800910c:	b2da      	uxtb	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800911a:	2b03      	cmp	r3, #3
 800911c:	d903      	bls.n	8009126 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	220d      	movs	r2, #13
 8009122:	701a      	strb	r2, [r3, #0]
      break;
 8009124:	e160      	b.n	80093e8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	795b      	ldrb	r3, [r3, #5]
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 ff99 	bl	800a064 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	791b      	ldrb	r3, [r3, #4]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 ff93 	bl	800a064 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	701a      	strb	r2, [r3, #0]
      break;
 8009144:	e150      	b.n	80093e8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009146:	2112      	movs	r1, #18
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f9f1 	bl	8009530 <USBH_Get_DevDesc>
 800914e:	4603      	mov	r3, r0
 8009150:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d103      	bne.n	8009160 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800915e:	e145      	b.n	80093ec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	2b03      	cmp	r3, #3
 8009164:	f040 8142 	bne.w	80093ec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800916e:	3301      	adds	r3, #1
 8009170:	b2da      	uxtb	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800917e:	2b03      	cmp	r3, #3
 8009180:	d903      	bls.n	800918a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	220d      	movs	r2, #13
 8009186:	701a      	strb	r2, [r3, #0]
      break;
 8009188:	e130      	b.n	80093ec <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	795b      	ldrb	r3, [r3, #5]
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 ff67 	bl	800a064 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	791b      	ldrb	r3, [r3, #4]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 ff61 	bl	800a064 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	701a      	strb	r2, [r3, #0]
      break;
 80091ae:	e11d      	b.n	80093ec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80091b0:	2101      	movs	r1, #1
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fa68 	bl	8009688 <USBH_SetAddress>
 80091b8:	4603      	mov	r3, r0
 80091ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d132      	bne.n	8009228 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80091c2:	2002      	movs	r0, #2
 80091c4:	f006 f944 	bl	800f450 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2203      	movs	r2, #3
 80091d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	7919      	ldrb	r1, [r3, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091ea:	b292      	uxth	r2, r2
 80091ec:	9202      	str	r2, [sp, #8]
 80091ee:	2200      	movs	r2, #0
 80091f0:	9201      	str	r2, [sp, #4]
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	4603      	mov	r3, r0
 80091f6:	2280      	movs	r2, #128	; 0x80
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fee3 	bl	8009fc4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	7959      	ldrb	r1, [r3, #5]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009212:	b292      	uxth	r2, r2
 8009214:	9202      	str	r2, [sp, #8]
 8009216:	2200      	movs	r2, #0
 8009218:	9201      	str	r2, [sp, #4]
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	4603      	mov	r3, r0
 800921e:	2200      	movs	r2, #0
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fecf 	bl	8009fc4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009226:	e0e3      	b.n	80093f0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b03      	cmp	r3, #3
 800922c:	f040 80e0 	bne.w	80093f0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	220d      	movs	r2, #13
 8009234:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	705a      	strb	r2, [r3, #1]
      break;
 800923c:	e0d8      	b.n	80093f0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800923e:	2109      	movs	r1, #9
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f99d 	bl	8009580 <USBH_Get_CfgDesc>
 8009246:	4603      	mov	r3, r0
 8009248:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800924a:	7bbb      	ldrb	r3, [r7, #14]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d103      	bne.n	8009258 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2204      	movs	r2, #4
 8009254:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009256:	e0cd      	b.n	80093f4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b03      	cmp	r3, #3
 800925c:	f040 80ca 	bne.w	80093f4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009266:	3301      	adds	r3, #1
 8009268:	b2da      	uxtb	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009276:	2b03      	cmp	r3, #3
 8009278:	d903      	bls.n	8009282 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	220d      	movs	r2, #13
 800927e:	701a      	strb	r2, [r3, #0]
      break;
 8009280:	e0b8      	b.n	80093f4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	795b      	ldrb	r3, [r3, #5]
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 feeb 	bl	800a064 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	791b      	ldrb	r3, [r3, #4]
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fee5 	bl	800a064 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	701a      	strb	r2, [r3, #0]
      break;
 80092a6:	e0a5      	b.n	80093f4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f965 	bl	8009580 <USBH_Get_CfgDesc>
 80092b6:	4603      	mov	r3, r0
 80092b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092ba:	7bbb      	ldrb	r3, [r7, #14]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d103      	bne.n	80092c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2205      	movs	r2, #5
 80092c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80092c6:	e097      	b.n	80093f8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	f040 8094 	bne.w	80093f8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092d6:	3301      	adds	r3, #1
 80092d8:	b2da      	uxtb	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d903      	bls.n	80092f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	220d      	movs	r2, #13
 80092ee:	701a      	strb	r2, [r3, #0]
      break;
 80092f0:	e082      	b.n	80093f8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	795b      	ldrb	r3, [r3, #5]
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 feb3 	bl	800a064 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	791b      	ldrb	r3, [r3, #4]
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fead 	bl	800a064 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	701a      	strb	r2, [r3, #0]
      break;
 8009316:	e06f      	b.n	80093f8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800931e:	2b00      	cmp	r3, #0
 8009320:	d019      	beq.n	8009356 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800932e:	23ff      	movs	r3, #255	; 0xff
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f949 	bl	80095c8 <USBH_Get_StringDesc>
 8009336:	4603      	mov	r3, r0
 8009338:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800933a:	7bbb      	ldrb	r3, [r7, #14]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d103      	bne.n	8009348 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2206      	movs	r2, #6
 8009344:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009346:	e059      	b.n	80093fc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	2b03      	cmp	r3, #3
 800934c:	d156      	bne.n	80093fc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2206      	movs	r2, #6
 8009352:	705a      	strb	r2, [r3, #1]
      break;
 8009354:	e052      	b.n	80093fc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2206      	movs	r2, #6
 800935a:	705a      	strb	r2, [r3, #1]
      break;
 800935c:	e04e      	b.n	80093fc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009364:	2b00      	cmp	r3, #0
 8009366:	d019      	beq.n	800939c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009374:	23ff      	movs	r3, #255	; 0xff
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f926 	bl	80095c8 <USBH_Get_StringDesc>
 800937c:	4603      	mov	r3, r0
 800937e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d103      	bne.n	800938e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2207      	movs	r2, #7
 800938a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800938c:	e038      	b.n	8009400 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b03      	cmp	r3, #3
 8009392:	d135      	bne.n	8009400 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2207      	movs	r2, #7
 8009398:	705a      	strb	r2, [r3, #1]
      break;
 800939a:	e031      	b.n	8009400 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2207      	movs	r2, #7
 80093a0:	705a      	strb	r2, [r3, #1]
      break;
 80093a2:	e02d      	b.n	8009400 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d017      	beq.n	80093de <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093ba:	23ff      	movs	r3, #255	; 0xff
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f903 	bl	80095c8 <USBH_Get_StringDesc>
 80093c2:	4603      	mov	r3, r0
 80093c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d102      	bne.n	80093d2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80093d0:	e018      	b.n	8009404 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d115      	bne.n	8009404 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]
      break;
 80093dc:	e012      	b.n	8009404 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	73fb      	strb	r3, [r7, #15]
      break;
 80093e2:	e00f      	b.n	8009404 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80093e4:	bf00      	nop
 80093e6:	e00e      	b.n	8009406 <USBH_HandleEnum+0x3be>
      break;
 80093e8:	bf00      	nop
 80093ea:	e00c      	b.n	8009406 <USBH_HandleEnum+0x3be>
      break;
 80093ec:	bf00      	nop
 80093ee:	e00a      	b.n	8009406 <USBH_HandleEnum+0x3be>
      break;
 80093f0:	bf00      	nop
 80093f2:	e008      	b.n	8009406 <USBH_HandleEnum+0x3be>
      break;
 80093f4:	bf00      	nop
 80093f6:	e006      	b.n	8009406 <USBH_HandleEnum+0x3be>
      break;
 80093f8:	bf00      	nop
 80093fa:	e004      	b.n	8009406 <USBH_HandleEnum+0x3be>
      break;
 80093fc:	bf00      	nop
 80093fe:	e002      	b.n	8009406 <USBH_HandleEnum+0x3be>
      break;
 8009400:	bf00      	nop
 8009402:	e000      	b.n	8009406 <USBH_HandleEnum+0x3be>
      break;
 8009404:	bf00      	nop
  }
  return Status;
 8009406:	7bfb      	ldrb	r3, [r7, #15]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009422:	bf00      	nop
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f804 	bl	8009452 <USBH_HandleSof>
}
 800944a:	bf00      	nop
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b082      	sub	sp, #8
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b0b      	cmp	r3, #11
 8009462:	d10a      	bne.n	800947a <USBH_HandleSof+0x28>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800946a:	2b00      	cmp	r3, #0
 800946c:	d005      	beq.n	800947a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	4798      	blx	r3
  }
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009482:	b480      	push	{r7}
 8009484:	b083      	sub	sp, #12
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009492:	bf00      	nop
}
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800949e:	b480      	push	{r7}
 80094a0:	b083      	sub	sp, #12
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80094ae:	bf00      	nop
}
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f005 fe24 	bl	800f156 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	791b      	ldrb	r3, [r3, #4]
 8009512:	4619      	mov	r1, r3
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fda5 	bl	800a064 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	795b      	ldrb	r3, [r3, #5]
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fd9f 	bl	800a064 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af02      	add	r7, sp, #8
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009542:	78fb      	ldrb	r3, [r7, #3]
 8009544:	b29b      	uxth	r3, r3
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	4613      	mov	r3, r2
 800954a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800954e:	2100      	movs	r1, #0
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f864 	bl	800961e <USBH_GetDescriptor>
 8009556:	4603      	mov	r3, r0
 8009558:	73fb      	strb	r3, [r7, #15]
 800955a:	7bfb      	ldrb	r3, [r7, #15]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800956c:	78fa      	ldrb	r2, [r7, #3]
 800956e:	b292      	uxth	r2, r2
 8009570:	4619      	mov	r1, r3
 8009572:	f000 f918 	bl	80097a6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009576:	7bfb      	ldrb	r3, [r7, #15]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af02      	add	r7, sp, #8
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	331c      	adds	r3, #28
 8009590:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009592:	887b      	ldrh	r3, [r7, #2]
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800959c:	2100      	movs	r1, #0
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f83d 	bl	800961e <USBH_GetDescriptor>
 80095a4:	4603      	mov	r3, r0
 80095a6:	72fb      	strb	r3, [r7, #11]
 80095a8:	7afb      	ldrb	r3, [r7, #11]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d107      	bne.n	80095be <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80095b4:	887a      	ldrh	r2, [r7, #2]
 80095b6:	68f9      	ldr	r1, [r7, #12]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f000 f964 	bl	8009886 <USBH_ParseCfgDesc>
  }

  return status;
 80095be:	7afb      	ldrb	r3, [r7, #11]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	607a      	str	r2, [r7, #4]
 80095d2:	461a      	mov	r2, r3
 80095d4:	460b      	mov	r3, r1
 80095d6:	72fb      	strb	r3, [r7, #11]
 80095d8:	4613      	mov	r3, r2
 80095da:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80095dc:	7afb      	ldrb	r3, [r7, #11]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80095e4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80095ec:	893b      	ldrh	r3, [r7, #8]
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	460b      	mov	r3, r1
 80095f2:	2100      	movs	r1, #0
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f812 	bl	800961e <USBH_GetDescriptor>
 80095fa:	4603      	mov	r3, r0
 80095fc:	75fb      	strb	r3, [r7, #23]
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d107      	bne.n	8009614 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800960a:	893a      	ldrh	r2, [r7, #8]
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	4618      	mov	r0, r3
 8009610:	f000 fa37 	bl	8009a82 <USBH_ParseStringDesc>
  }

  return status;
 8009614:	7dfb      	ldrb	r3, [r7, #23]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	607b      	str	r3, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	72fb      	strb	r3, [r7, #11]
 800962c:	4613      	mov	r3, r2
 800962e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	789b      	ldrb	r3, [r3, #2]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d11c      	bne.n	8009672 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009638:	7afb      	ldrb	r3, [r7, #11]
 800963a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800963e:	b2da      	uxtb	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2206      	movs	r2, #6
 8009648:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	893a      	ldrh	r2, [r7, #8]
 800964e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009650:	893b      	ldrh	r3, [r7, #8]
 8009652:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800965a:	d104      	bne.n	8009666 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f240 4209 	movw	r2, #1033	; 0x409
 8009662:	829a      	strh	r2, [r3, #20]
 8009664:	e002      	b.n	800966c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	8b3a      	ldrh	r2, [r7, #24]
 8009670:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009672:	8b3b      	ldrh	r3, [r7, #24]
 8009674:	461a      	mov	r2, r3
 8009676:	6879      	ldr	r1, [r7, #4]
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 fa50 	bl	8009b1e <USBH_CtlReq>
 800967e:	4603      	mov	r3, r0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	789b      	ldrb	r3, [r3, #2]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d10f      	bne.n	80096bc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2205      	movs	r2, #5
 80096a6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80096a8:	78fb      	ldrb	r3, [r7, #3]
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80096bc:	2200      	movs	r2, #0
 80096be:	2100      	movs	r1, #0
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fa2c 	bl	8009b1e <USBH_CtlReq>
 80096c6:	4603      	mov	r3, r0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	789b      	ldrb	r3, [r3, #2]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d10e      	bne.n	8009702 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2209      	movs	r2, #9
 80096ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	887a      	ldrh	r2, [r7, #2]
 80096f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009702:	2200      	movs	r2, #0
 8009704:	2100      	movs	r1, #0
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fa09 	bl	8009b1e <USBH_CtlReq>
 800970c:	4603      	mov	r3, r0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	460b      	mov	r3, r1
 8009720:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	789b      	ldrb	r3, [r3, #2]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d10f      	bne.n	800974a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2203      	movs	r2, #3
 8009734:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009736:	78fb      	ldrb	r3, [r7, #3]
 8009738:	b29a      	uxth	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800974a:	2200      	movs	r2, #0
 800974c:	2100      	movs	r1, #0
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f9e5 	bl	8009b1e <USBH_CtlReq>
 8009754:	4603      	mov	r3, r0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b082      	sub	sp, #8
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	460b      	mov	r3, r1
 8009768:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	789b      	ldrb	r3, [r3, #2]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d10f      	bne.n	8009792 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2202      	movs	r2, #2
 8009776:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	b29a      	uxth	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009792:	2200      	movs	r2, #0
 8009794:	2100      	movs	r1, #0
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f9c1 	bl	8009b1e <USBH_CtlReq>
 800979c:	4603      	mov	r3, r0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b085      	sub	sp, #20
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	60b9      	str	r1, [r7, #8]
 80097b0:	4613      	mov	r3, r2
 80097b2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	781a      	ldrb	r2, [r3, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	785a      	ldrb	r2, [r3, #1]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	3302      	adds	r3, #2
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	3303      	adds	r3, #3
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	4313      	orrs	r3, r2
 80097da:	b29a      	uxth	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	791a      	ldrb	r2, [r3, #4]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	795a      	ldrb	r2, [r3, #5]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	799a      	ldrb	r2, [r3, #6]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	79da      	ldrb	r2, [r3, #7]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009800:	88fb      	ldrh	r3, [r7, #6]
 8009802:	2b08      	cmp	r3, #8
 8009804:	d939      	bls.n	800987a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	3308      	adds	r3, #8
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	b29a      	uxth	r2, r3
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	3309      	adds	r3, #9
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	b29b      	uxth	r3, r3
 8009816:	021b      	lsls	r3, r3, #8
 8009818:	b29b      	uxth	r3, r3
 800981a:	4313      	orrs	r3, r2
 800981c:	b29a      	uxth	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	330a      	adds	r3, #10
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	b29a      	uxth	r2, r3
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	330b      	adds	r3, #11
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	b29b      	uxth	r3, r3
 8009832:	021b      	lsls	r3, r3, #8
 8009834:	b29b      	uxth	r3, r3
 8009836:	4313      	orrs	r3, r2
 8009838:	b29a      	uxth	r2, r3
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	330c      	adds	r3, #12
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	b29a      	uxth	r2, r3
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	330d      	adds	r3, #13
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	b29b      	uxth	r3, r3
 800984e:	021b      	lsls	r3, r3, #8
 8009850:	b29b      	uxth	r3, r3
 8009852:	4313      	orrs	r3, r2
 8009854:	b29a      	uxth	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	7b9a      	ldrb	r2, [r3, #14]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	7bda      	ldrb	r2, [r3, #15]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	7c1a      	ldrb	r2, [r3, #16]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	7c5a      	ldrb	r2, [r3, #17]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	745a      	strb	r2, [r3, #17]
  }
}
 800987a:	bf00      	nop
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b08a      	sub	sp, #40	; 0x28
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	4613      	mov	r3, r2
 8009892:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	781a      	ldrb	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	785a      	ldrb	r2, [r3, #1]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	3302      	adds	r3, #2
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	b29a      	uxth	r2, r3
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	3303      	adds	r3, #3
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	021b      	lsls	r3, r3, #8
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	4313      	orrs	r3, r2
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	791a      	ldrb	r2, [r3, #4]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	795a      	ldrb	r2, [r3, #5]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	799a      	ldrb	r2, [r3, #6]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	79da      	ldrb	r2, [r3, #7]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	7a1a      	ldrb	r2, [r3, #8]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80098fc:	88fb      	ldrh	r3, [r7, #6]
 80098fe:	2b09      	cmp	r3, #9
 8009900:	d95f      	bls.n	80099c2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009902:	2309      	movs	r3, #9
 8009904:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009906:	2300      	movs	r3, #0
 8009908:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800990a:	e051      	b.n	80099b0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800990c:	f107 0316 	add.w	r3, r7, #22
 8009910:	4619      	mov	r1, r3
 8009912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009914:	f000 f8e8 	bl	8009ae8 <USBH_GetNextDesc>
 8009918:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991c:	785b      	ldrb	r3, [r3, #1]
 800991e:	2b04      	cmp	r3, #4
 8009920:	d146      	bne.n	80099b0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009926:	221a      	movs	r2, #26
 8009928:	fb02 f303 	mul.w	r3, r2, r3
 800992c:	3308      	adds	r3, #8
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	4413      	add	r3, r2
 8009932:	3302      	adds	r3, #2
 8009934:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009938:	69f8      	ldr	r0, [r7, #28]
 800993a:	f000 f846 	bl	80099ca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009944:	2300      	movs	r3, #0
 8009946:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009948:	e022      	b.n	8009990 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800994a:	f107 0316 	add.w	r3, r7, #22
 800994e:	4619      	mov	r1, r3
 8009950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009952:	f000 f8c9 	bl	8009ae8 <USBH_GetNextDesc>
 8009956:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	785b      	ldrb	r3, [r3, #1]
 800995c:	2b05      	cmp	r3, #5
 800995e:	d117      	bne.n	8009990 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009964:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009968:	3201      	adds	r2, #1
 800996a:	00d2      	lsls	r2, r2, #3
 800996c:	211a      	movs	r1, #26
 800996e:	fb01 f303 	mul.w	r3, r1, r3
 8009972:	4413      	add	r3, r2
 8009974:	3308      	adds	r3, #8
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	4413      	add	r3, r2
 800997a:	3304      	adds	r3, #4
 800997c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800997e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009980:	69b8      	ldr	r0, [r7, #24]
 8009982:	f000 f851 	bl	8009a28 <USBH_ParseEPDesc>
            ep_ix++;
 8009986:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800998a:	3301      	adds	r3, #1
 800998c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	791b      	ldrb	r3, [r3, #4]
 8009994:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009998:	429a      	cmp	r2, r3
 800999a:	d204      	bcs.n	80099a6 <USBH_ParseCfgDesc+0x120>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	885a      	ldrh	r2, [r3, #2]
 80099a0:	8afb      	ldrh	r3, [r7, #22]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d8d1      	bhi.n	800994a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80099a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099aa:	3301      	adds	r3, #1
 80099ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80099b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d804      	bhi.n	80099c2 <USBH_ParseCfgDesc+0x13c>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	885a      	ldrh	r2, [r3, #2]
 80099bc:	8afb      	ldrh	r3, [r7, #22]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d8a4      	bhi.n	800990c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80099c2:	bf00      	nop
 80099c4:	3728      	adds	r7, #40	; 0x28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b083      	sub	sp, #12
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781a      	ldrb	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	785a      	ldrb	r2, [r3, #1]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	789a      	ldrb	r2, [r3, #2]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	78da      	ldrb	r2, [r3, #3]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	791a      	ldrb	r2, [r3, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	795a      	ldrb	r2, [r3, #5]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	799a      	ldrb	r2, [r3, #6]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	79da      	ldrb	r2, [r3, #7]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	7a1a      	ldrb	r2, [r3, #8]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	721a      	strb	r2, [r3, #8]
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	781a      	ldrb	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	785a      	ldrb	r2, [r3, #1]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	789a      	ldrb	r2, [r3, #2]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	78da      	ldrb	r2, [r3, #3]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	3304      	adds	r3, #4
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	3305      	adds	r3, #5
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	021b      	lsls	r3, r3, #8
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	4313      	orrs	r3, r2
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	799a      	ldrb	r2, [r3, #6]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	719a      	strb	r2, [r3, #6]
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b087      	sub	sp, #28
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	60f8      	str	r0, [r7, #12]
 8009a8a:	60b9      	str	r1, [r7, #8]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3301      	adds	r3, #1
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d120      	bne.n	8009adc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	1e9a      	subs	r2, r3, #2
 8009aa0:	88fb      	ldrh	r3, [r7, #6]
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	bf28      	it	cs
 8009aa6:	4613      	movcs	r3, r2
 8009aa8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3302      	adds	r3, #2
 8009aae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	82fb      	strh	r3, [r7, #22]
 8009ab4:	e00b      	b.n	8009ace <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009ab6:	8afb      	ldrh	r3, [r7, #22]
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	4413      	add	r3, r2
 8009abc:	781a      	ldrb	r2, [r3, #0]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009ac8:	8afb      	ldrh	r3, [r7, #22]
 8009aca:	3302      	adds	r3, #2
 8009acc:	82fb      	strh	r3, [r7, #22]
 8009ace:	8afa      	ldrh	r2, [r7, #22]
 8009ad0:	8abb      	ldrh	r3, [r7, #20]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d3ef      	bcc.n	8009ab6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	701a      	strb	r2, [r3, #0]
  }
}
 8009adc:	bf00      	nop
 8009ade:	371c      	adds	r7, #28
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	881a      	ldrh	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	4413      	add	r3, r2
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b10:	68fb      	ldr	r3, [r7, #12]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b086      	sub	sp, #24
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	60f8      	str	r0, [r7, #12]
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	789b      	ldrb	r3, [r3, #2]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d002      	beq.n	8009b3e <USBH_CtlReq+0x20>
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d00f      	beq.n	8009b5c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009b3c:	e027      	b.n	8009b8e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	88fa      	ldrh	r2, [r7, #6]
 8009b48:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2202      	movs	r2, #2
 8009b54:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009b56:	2301      	movs	r3, #1
 8009b58:	75fb      	strb	r3, [r7, #23]
      break;
 8009b5a:	e018      	b.n	8009b8e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 f81b 	bl	8009b98 <USBH_HandleControl>
 8009b62:	4603      	mov	r3, r0
 8009b64:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d002      	beq.n	8009b72 <USBH_CtlReq+0x54>
 8009b6c:	7dfb      	ldrb	r3, [r7, #23]
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d106      	bne.n	8009b80 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2201      	movs	r2, #1
 8009b76:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	761a      	strb	r2, [r3, #24]
      break;
 8009b7e:	e005      	b.n	8009b8c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d102      	bne.n	8009b8c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	709a      	strb	r2, [r3, #2]
      break;
 8009b8c:	bf00      	nop
  }
  return status;
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af02      	add	r7, sp, #8
 8009b9e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	7e1b      	ldrb	r3, [r3, #24]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	2b0a      	cmp	r3, #10
 8009bb0:	f200 8158 	bhi.w	8009e64 <USBH_HandleControl+0x2cc>
 8009bb4:	a201      	add	r2, pc, #4	; (adr r2, 8009bbc <USBH_HandleControl+0x24>)
 8009bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bba:	bf00      	nop
 8009bbc:	08009be9 	.word	0x08009be9
 8009bc0:	08009c03 	.word	0x08009c03
 8009bc4:	08009c6d 	.word	0x08009c6d
 8009bc8:	08009c93 	.word	0x08009c93
 8009bcc:	08009ccb 	.word	0x08009ccb
 8009bd0:	08009cf7 	.word	0x08009cf7
 8009bd4:	08009d49 	.word	0x08009d49
 8009bd8:	08009d6b 	.word	0x08009d6b
 8009bdc:	08009da7 	.word	0x08009da7
 8009be0:	08009dcf 	.word	0x08009dcf
 8009be4:	08009e0d 	.word	0x08009e0d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f103 0110 	add.w	r1, r3, #16
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	795b      	ldrb	r3, [r3, #5]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f945 	bl	8009e84 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	761a      	strb	r2, [r3, #24]
      break;
 8009c00:	e13b      	b.n	8009e7a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	795b      	ldrb	r3, [r3, #5]
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f005 fb91 	bl	800f330 <USBH_LL_GetURBState>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009c12:	7bbb      	ldrb	r3, [r7, #14]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d11e      	bne.n	8009c56 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	7c1b      	ldrb	r3, [r3, #16]
 8009c1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c20:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	8adb      	ldrh	r3, [r3, #22]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00a      	beq.n	8009c40 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009c2a:	7b7b      	ldrb	r3, [r7, #13]
 8009c2c:	2b80      	cmp	r3, #128	; 0x80
 8009c2e:	d103      	bne.n	8009c38 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2203      	movs	r2, #3
 8009c34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009c36:	e117      	b.n	8009e68 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2205      	movs	r2, #5
 8009c3c:	761a      	strb	r2, [r3, #24]
      break;
 8009c3e:	e113      	b.n	8009e68 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8009c40:	7b7b      	ldrb	r3, [r7, #13]
 8009c42:	2b80      	cmp	r3, #128	; 0x80
 8009c44:	d103      	bne.n	8009c4e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2209      	movs	r2, #9
 8009c4a:	761a      	strb	r2, [r3, #24]
      break;
 8009c4c:	e10c      	b.n	8009e68 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2207      	movs	r2, #7
 8009c52:	761a      	strb	r2, [r3, #24]
      break;
 8009c54:	e108      	b.n	8009e68 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009c56:	7bbb      	ldrb	r3, [r7, #14]
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	d003      	beq.n	8009c64 <USBH_HandleControl+0xcc>
 8009c5c:	7bbb      	ldrb	r3, [r7, #14]
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	f040 8102 	bne.w	8009e68 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	220b      	movs	r2, #11
 8009c68:	761a      	strb	r2, [r3, #24]
      break;
 8009c6a:	e0fd      	b.n	8009e68 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6899      	ldr	r1, [r3, #8]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	899a      	ldrh	r2, [r3, #12]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	791b      	ldrb	r3, [r3, #4]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f93c 	bl	8009f02 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2204      	movs	r2, #4
 8009c8e:	761a      	strb	r2, [r3, #24]
      break;
 8009c90:	e0f3      	b.n	8009e7a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	791b      	ldrb	r3, [r3, #4]
 8009c96:	4619      	mov	r1, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f005 fb49 	bl	800f330 <USBH_LL_GetURBState>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d102      	bne.n	8009cae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2209      	movs	r2, #9
 8009cac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	2b05      	cmp	r3, #5
 8009cb2:	d102      	bne.n	8009cba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009cb8:	e0d8      	b.n	8009e6c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	2b04      	cmp	r3, #4
 8009cbe:	f040 80d5 	bne.w	8009e6c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	220b      	movs	r2, #11
 8009cc6:	761a      	strb	r2, [r3, #24]
      break;
 8009cc8:	e0d0      	b.n	8009e6c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6899      	ldr	r1, [r3, #8]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	899a      	ldrh	r2, [r3, #12]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	7958      	ldrb	r0, [r3, #5]
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	4603      	mov	r3, r0
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f8eb 	bl	8009eb8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ce8:	b29a      	uxth	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2206      	movs	r2, #6
 8009cf2:	761a      	strb	r2, [r3, #24]
      break;
 8009cf4:	e0c1      	b.n	8009e7a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	795b      	ldrb	r3, [r3, #5]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f005 fb17 	bl	800f330 <USBH_LL_GetURBState>
 8009d02:	4603      	mov	r3, r0
 8009d04:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d103      	bne.n	8009d14 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2207      	movs	r2, #7
 8009d10:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009d12:	e0ad      	b.n	8009e70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b05      	cmp	r3, #5
 8009d18:	d105      	bne.n	8009d26 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	220c      	movs	r2, #12
 8009d1e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009d20:	2303      	movs	r3, #3
 8009d22:	73fb      	strb	r3, [r7, #15]
      break;
 8009d24:	e0a4      	b.n	8009e70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009d26:	7bbb      	ldrb	r3, [r7, #14]
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d103      	bne.n	8009d34 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2205      	movs	r2, #5
 8009d30:	761a      	strb	r2, [r3, #24]
      break;
 8009d32:	e09d      	b.n	8009e70 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	f040 809a 	bne.w	8009e70 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	220b      	movs	r2, #11
 8009d40:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009d42:	2302      	movs	r3, #2
 8009d44:	73fb      	strb	r3, [r7, #15]
      break;
 8009d46:	e093      	b.n	8009e70 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	791b      	ldrb	r3, [r3, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	2100      	movs	r1, #0
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f8d6 	bl	8009f02 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2208      	movs	r2, #8
 8009d66:	761a      	strb	r2, [r3, #24]

      break;
 8009d68:	e087      	b.n	8009e7a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	791b      	ldrb	r3, [r3, #4]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f005 fadd 	bl	800f330 <USBH_LL_GetURBState>
 8009d76:	4603      	mov	r3, r0
 8009d78:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009d7a:	7bbb      	ldrb	r3, [r7, #14]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d105      	bne.n	8009d8c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	220d      	movs	r2, #13
 8009d84:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009d8a:	e073      	b.n	8009e74 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
 8009d8e:	2b04      	cmp	r3, #4
 8009d90:	d103      	bne.n	8009d9a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	220b      	movs	r2, #11
 8009d96:	761a      	strb	r2, [r3, #24]
      break;
 8009d98:	e06c      	b.n	8009e74 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	2b05      	cmp	r3, #5
 8009d9e:	d169      	bne.n	8009e74 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8009da0:	2303      	movs	r3, #3
 8009da2:	73fb      	strb	r3, [r7, #15]
      break;
 8009da4:	e066      	b.n	8009e74 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	795a      	ldrb	r2, [r3, #5]
 8009daa:	2301      	movs	r3, #1
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	4613      	mov	r3, r2
 8009db0:	2200      	movs	r2, #0
 8009db2:	2100      	movs	r1, #0
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f87f 	bl	8009eb8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	220a      	movs	r2, #10
 8009dca:	761a      	strb	r2, [r3, #24]
      break;
 8009dcc:	e055      	b.n	8009e7a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	795b      	ldrb	r3, [r3, #5]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f005 faab 	bl	800f330 <USBH_LL_GetURBState>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d105      	bne.n	8009df0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	220d      	movs	r2, #13
 8009dec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009dee:	e043      	b.n	8009e78 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009df0:	7bbb      	ldrb	r3, [r7, #14]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d103      	bne.n	8009dfe <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2209      	movs	r2, #9
 8009dfa:	761a      	strb	r2, [r3, #24]
      break;
 8009dfc:	e03c      	b.n	8009e78 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b04      	cmp	r3, #4
 8009e02:	d139      	bne.n	8009e78 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	220b      	movs	r2, #11
 8009e08:	761a      	strb	r2, [r3, #24]
      break;
 8009e0a:	e035      	b.n	8009e78 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	7e5b      	ldrb	r3, [r3, #25]
 8009e10:	3301      	adds	r3, #1
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	765a      	strb	r2, [r3, #25]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	7e5b      	ldrb	r3, [r3, #25]
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d806      	bhi.n	8009e2e <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009e2c:	e025      	b.n	8009e7a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e34:	2106      	movs	r1, #6
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	795b      	ldrb	r3, [r3, #5]
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f90c 	bl	800a064 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	791b      	ldrb	r3, [r3, #4]
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f906 	bl	800a064 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009e5e:	2302      	movs	r3, #2
 8009e60:	73fb      	strb	r3, [r7, #15]
      break;
 8009e62:	e00a      	b.n	8009e7a <USBH_HandleControl+0x2e2>

    default:
      break;
 8009e64:	bf00      	nop
 8009e66:	e008      	b.n	8009e7a <USBH_HandleControl+0x2e2>
      break;
 8009e68:	bf00      	nop
 8009e6a:	e006      	b.n	8009e7a <USBH_HandleControl+0x2e2>
      break;
 8009e6c:	bf00      	nop
 8009e6e:	e004      	b.n	8009e7a <USBH_HandleControl+0x2e2>
      break;
 8009e70:	bf00      	nop
 8009e72:	e002      	b.n	8009e7a <USBH_HandleControl+0x2e2>
      break;
 8009e74:	bf00      	nop
 8009e76:	e000      	b.n	8009e7a <USBH_HandleControl+0x2e2>
      break;
 8009e78:	bf00      	nop
  }

  return status;
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af04      	add	r7, sp, #16
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e92:	79f9      	ldrb	r1, [r7, #7]
 8009e94:	2300      	movs	r3, #0
 8009e96:	9303      	str	r3, [sp, #12]
 8009e98:	2308      	movs	r3, #8
 8009e9a:	9302      	str	r3, [sp, #8]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f005 fa10 	bl	800f2ce <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af04      	add	r7, sp, #16
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	80fb      	strh	r3, [r7, #6]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009edc:	7979      	ldrb	r1, [r7, #5]
 8009ede:	7e3b      	ldrb	r3, [r7, #24]
 8009ee0:	9303      	str	r3, [sp, #12]
 8009ee2:	88fb      	ldrh	r3, [r7, #6]
 8009ee4:	9302      	str	r3, [sp, #8]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	9301      	str	r3, [sp, #4]
 8009eea:	2301      	movs	r3, #1
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f005 f9eb 	bl	800f2ce <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b088      	sub	sp, #32
 8009f06:	af04      	add	r7, sp, #16
 8009f08:	60f8      	str	r0, [r7, #12]
 8009f0a:	60b9      	str	r1, [r7, #8]
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	461a      	mov	r2, r3
 8009f10:	460b      	mov	r3, r1
 8009f12:	80fb      	strh	r3, [r7, #6]
 8009f14:	4613      	mov	r3, r2
 8009f16:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009f18:	7979      	ldrb	r1, [r7, #5]
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	9303      	str	r3, [sp, #12]
 8009f1e:	88fb      	ldrh	r3, [r7, #6]
 8009f20:	9302      	str	r3, [sp, #8]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	9301      	str	r3, [sp, #4]
 8009f26:	2301      	movs	r3, #1
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f005 f9cd 	bl	800f2ce <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009f34:	2300      	movs	r3, #0

}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b088      	sub	sp, #32
 8009f42:	af04      	add	r7, sp, #16
 8009f44:	60f8      	str	r0, [r7, #12]
 8009f46:	60b9      	str	r1, [r7, #8]
 8009f48:	4611      	mov	r1, r2
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	80fb      	strh	r3, [r7, #6]
 8009f50:	4613      	mov	r3, r2
 8009f52:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009f62:	7979      	ldrb	r1, [r7, #5]
 8009f64:	7e3b      	ldrb	r3, [r7, #24]
 8009f66:	9303      	str	r3, [sp, #12]
 8009f68:	88fb      	ldrh	r3, [r7, #6]
 8009f6a:	9302      	str	r3, [sp, #8]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	2301      	movs	r3, #1
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	2302      	movs	r3, #2
 8009f76:	2200      	movs	r2, #0
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f005 f9a8 	bl	800f2ce <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b088      	sub	sp, #32
 8009f8c:	af04      	add	r7, sp, #16
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	4611      	mov	r1, r2
 8009f94:	461a      	mov	r2, r3
 8009f96:	460b      	mov	r3, r1
 8009f98:	80fb      	strh	r3, [r7, #6]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009f9e:	7979      	ldrb	r1, [r7, #5]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9303      	str	r3, [sp, #12]
 8009fa4:	88fb      	ldrh	r3, [r7, #6]
 8009fa6:	9302      	str	r3, [sp, #8]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	9301      	str	r3, [sp, #4]
 8009fac:	2301      	movs	r3, #1
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f005 f98a 	bl	800f2ce <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af04      	add	r7, sp, #16
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	70fb      	strb	r3, [r7, #3]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70bb      	strb	r3, [r7, #2]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009fde:	7878      	ldrb	r0, [r7, #1]
 8009fe0:	78ba      	ldrb	r2, [r7, #2]
 8009fe2:	78f9      	ldrb	r1, [r7, #3]
 8009fe4:	8b3b      	ldrh	r3, [r7, #24]
 8009fe6:	9302      	str	r3, [sp, #8]
 8009fe8:	7d3b      	ldrb	r3, [r7, #20]
 8009fea:	9301      	str	r3, [sp, #4]
 8009fec:	7c3b      	ldrb	r3, [r7, #16]
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f005 f91d 	bl	800f232 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b082      	sub	sp, #8
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	460b      	mov	r3, r1
 800a00c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f005 f93c 	bl	800f290 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b084      	sub	sp, #16
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	460b      	mov	r3, r1
 800a02c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f836 	bl	800a0a0 <USBH_GetFreePipe>
 800a034:	4603      	mov	r3, r0
 800a036:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a038:	89fb      	ldrh	r3, [r7, #14]
 800a03a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a03e:	4293      	cmp	r3, r2
 800a040:	d00a      	beq.n	800a058 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a042:	78fa      	ldrb	r2, [r7, #3]
 800a044:	89fb      	ldrh	r3, [r7, #14]
 800a046:	f003 030f 	and.w	r3, r3, #15
 800a04a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	33e0      	adds	r3, #224	; 0xe0
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	440b      	add	r3, r1
 800a056:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a058:	89fb      	ldrh	r3, [r7, #14]
 800a05a:	b2db      	uxtb	r3, r3
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a070:	78fb      	ldrb	r3, [r7, #3]
 800a072:	2b0a      	cmp	r3, #10
 800a074:	d80d      	bhi.n	800a092 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a076:	78fb      	ldrb	r3, [r7, #3]
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	33e0      	adds	r3, #224	; 0xe0
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4413      	add	r3, r2
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	78fb      	ldrb	r3, [r7, #3]
 800a084:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a088:	6879      	ldr	r1, [r7, #4]
 800a08a:	33e0      	adds	r3, #224	; 0xe0
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	440b      	add	r3, r1
 800a090:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]
 800a0b0:	e00f      	b.n	800a0d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	33e0      	adds	r3, #224	; 0xe0
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4413      	add	r3, r2
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d102      	bne.n	800a0cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	e007      	b.n	800a0dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	73fb      	strb	r3, [r7, #15]
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
 800a0d4:	2b0a      	cmp	r3, #10
 800a0d6:	d9ec      	bls.n	800a0b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a0d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a0f2:	79fb      	ldrb	r3, [r7, #7]
 800a0f4:	4a08      	ldr	r2, [pc, #32]	; (800a118 <disk_status+0x30>)
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	79fa      	ldrb	r2, [r7, #7]
 800a100:	4905      	ldr	r1, [pc, #20]	; (800a118 <disk_status+0x30>)
 800a102:	440a      	add	r2, r1
 800a104:	7a12      	ldrb	r2, [r2, #8]
 800a106:	4610      	mov	r0, r2
 800a108:	4798      	blx	r3
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	2000066c 	.word	0x2000066c

0800a11c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	4603      	mov	r3, r0
 800a124:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a12a:	79fb      	ldrb	r3, [r7, #7]
 800a12c:	4a0d      	ldr	r2, [pc, #52]	; (800a164 <disk_initialize+0x48>)
 800a12e:	5cd3      	ldrb	r3, [r2, r3]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d111      	bne.n	800a158 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	4a0b      	ldr	r2, [pc, #44]	; (800a164 <disk_initialize+0x48>)
 800a138:	2101      	movs	r1, #1
 800a13a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a13c:	79fb      	ldrb	r3, [r7, #7]
 800a13e:	4a09      	ldr	r2, [pc, #36]	; (800a164 <disk_initialize+0x48>)
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	79fa      	ldrb	r2, [r7, #7]
 800a14a:	4906      	ldr	r1, [pc, #24]	; (800a164 <disk_initialize+0x48>)
 800a14c:	440a      	add	r2, r1
 800a14e:	7a12      	ldrb	r2, [r2, #8]
 800a150:	4610      	mov	r0, r2
 800a152:	4798      	blx	r3
 800a154:	4603      	mov	r3, r0
 800a156:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a158:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	2000066c 	.word	0x2000066c

0800a168 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a168:	b590      	push	{r4, r7, lr}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60b9      	str	r1, [r7, #8]
 800a170:	607a      	str	r2, [r7, #4]
 800a172:	603b      	str	r3, [r7, #0]
 800a174:	4603      	mov	r3, r0
 800a176:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	4a0a      	ldr	r2, [pc, #40]	; (800a1a4 <disk_read+0x3c>)
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	689c      	ldr	r4, [r3, #8]
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	4a07      	ldr	r2, [pc, #28]	; (800a1a4 <disk_read+0x3c>)
 800a188:	4413      	add	r3, r2
 800a18a:	7a18      	ldrb	r0, [r3, #8]
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	68b9      	ldr	r1, [r7, #8]
 800a192:	47a0      	blx	r4
 800a194:	4603      	mov	r3, r0
 800a196:	75fb      	strb	r3, [r7, #23]
  return res;
 800a198:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	371c      	adds	r7, #28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd90      	pop	{r4, r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	2000066c 	.word	0x2000066c

0800a1a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a1a8:	b590      	push	{r4, r7, lr}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60b9      	str	r1, [r7, #8]
 800a1b0:	607a      	str	r2, [r7, #4]
 800a1b2:	603b      	str	r3, [r7, #0]
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ba:	4a0a      	ldr	r2, [pc, #40]	; (800a1e4 <disk_write+0x3c>)
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	68dc      	ldr	r4, [r3, #12]
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	4a07      	ldr	r2, [pc, #28]	; (800a1e4 <disk_write+0x3c>)
 800a1c8:	4413      	add	r3, r2
 800a1ca:	7a18      	ldrb	r0, [r3, #8]
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	68b9      	ldr	r1, [r7, #8]
 800a1d2:	47a0      	blx	r4
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	371c      	adds	r7, #28
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd90      	pop	{r4, r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	2000066c 	.word	0x2000066c

0800a1e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	603a      	str	r2, [r7, #0]
 800a1f2:	71fb      	strb	r3, [r7, #7]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a1f8:	79fb      	ldrb	r3, [r7, #7]
 800a1fa:	4a09      	ldr	r2, [pc, #36]	; (800a220 <disk_ioctl+0x38>)
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	79fa      	ldrb	r2, [r7, #7]
 800a206:	4906      	ldr	r1, [pc, #24]	; (800a220 <disk_ioctl+0x38>)
 800a208:	440a      	add	r2, r1
 800a20a:	7a10      	ldrb	r0, [r2, #8]
 800a20c:	79b9      	ldrb	r1, [r7, #6]
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	4798      	blx	r3
 800a212:	4603      	mov	r3, r0
 800a214:	73fb      	strb	r3, [r7, #15]
  return res;
 800a216:	7bfb      	ldrb	r3, [r7, #15]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	2000066c 	.word	0x2000066c

0800a224 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	3301      	adds	r3, #1
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a234:	89fb      	ldrh	r3, [r7, #14]
 800a236:	021b      	lsls	r3, r3, #8
 800a238:	b21a      	sxth	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	b21b      	sxth	r3, r3
 800a240:	4313      	orrs	r3, r2
 800a242:	b21b      	sxth	r3, r3
 800a244:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a246:	89fb      	ldrh	r3, [r7, #14]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3714      	adds	r7, #20
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3303      	adds	r3, #3
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	021b      	lsls	r3, r3, #8
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	3202      	adds	r2, #2
 800a26c:	7812      	ldrb	r2, [r2, #0]
 800a26e:	4313      	orrs	r3, r2
 800a270:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	021b      	lsls	r3, r3, #8
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	3201      	adds	r2, #1
 800a27a:	7812      	ldrb	r2, [r2, #0]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	021b      	lsls	r3, r3, #8
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	7812      	ldrb	r2, [r2, #0]
 800a288:	4313      	orrs	r3, r2
 800a28a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a28c:	68fb      	ldr	r3, [r7, #12]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800a29a:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3307      	adds	r3, #7
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	f04f 0400 	mov.w	r4, #0
 800a2b0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800a2b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a2b8:	f04f 0b00 	mov.w	fp, #0
 800a2bc:	f04f 0c00 	mov.w	ip, #0
 800a2c0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800a2c4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800a2c8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	3206      	adds	r2, #6
 800a2d0:	7812      	ldrb	r2, [r2, #0]
 800a2d2:	b2d1      	uxtb	r1, r2
 800a2d4:	f04f 0200 	mov.w	r2, #0
 800a2d8:	ea4b 0301 	orr.w	r3, fp, r1
 800a2dc:	ea4c 0402 	orr.w	r4, ip, r2
 800a2e0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800a2e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a2e8:	f04f 0b00 	mov.w	fp, #0
 800a2ec:	f04f 0c00 	mov.w	ip, #0
 800a2f0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800a2f4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800a2f8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	3205      	adds	r2, #5
 800a300:	7812      	ldrb	r2, [r2, #0]
 800a302:	b2d1      	uxtb	r1, r2
 800a304:	f04f 0200 	mov.w	r2, #0
 800a308:	ea4b 0301 	orr.w	r3, fp, r1
 800a30c:	ea4c 0402 	orr.w	r4, ip, r2
 800a310:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 800a314:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a318:	f04f 0b00 	mov.w	fp, #0
 800a31c:	f04f 0c00 	mov.w	ip, #0
 800a320:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800a324:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800a328:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	3204      	adds	r2, #4
 800a330:	7812      	ldrb	r2, [r2, #0]
 800a332:	b2d1      	uxtb	r1, r2
 800a334:	f04f 0200 	mov.w	r2, #0
 800a338:	ea4b 0301 	orr.w	r3, fp, r1
 800a33c:	ea4c 0402 	orr.w	r4, ip, r2
 800a340:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800a344:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a348:	f04f 0b00 	mov.w	fp, #0
 800a34c:	f04f 0c00 	mov.w	ip, #0
 800a350:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800a354:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800a358:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	3203      	adds	r2, #3
 800a360:	7812      	ldrb	r2, [r2, #0]
 800a362:	b2d1      	uxtb	r1, r2
 800a364:	f04f 0200 	mov.w	r2, #0
 800a368:	ea4b 0301 	orr.w	r3, fp, r1
 800a36c:	ea4c 0402 	orr.w	r4, ip, r2
 800a370:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 800a374:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a378:	f04f 0b00 	mov.w	fp, #0
 800a37c:	f04f 0c00 	mov.w	ip, #0
 800a380:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800a384:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800a388:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	3202      	adds	r2, #2
 800a390:	7812      	ldrb	r2, [r2, #0]
 800a392:	b2d1      	uxtb	r1, r2
 800a394:	f04f 0200 	mov.w	r2, #0
 800a398:	ea4b 0301 	orr.w	r3, fp, r1
 800a39c:	ea4c 0402 	orr.w	r4, ip, r2
 800a3a0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 800a3a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a3a8:	f04f 0b00 	mov.w	fp, #0
 800a3ac:	f04f 0c00 	mov.w	ip, #0
 800a3b0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800a3b4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800a3b8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	3201      	adds	r2, #1
 800a3c0:	7812      	ldrb	r2, [r2, #0]
 800a3c2:	b2d1      	uxtb	r1, r2
 800a3c4:	f04f 0200 	mov.w	r2, #0
 800a3c8:	ea4b 0301 	orr.w	r3, fp, r1
 800a3cc:	ea4c 0402 	orr.w	r4, ip, r2
 800a3d0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 800a3d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a3d8:	f04f 0b00 	mov.w	fp, #0
 800a3dc:	f04f 0c00 	mov.w	ip, #0
 800a3e0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800a3e4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800a3e8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	7812      	ldrb	r2, [r2, #0]
 800a3f0:	b2d1      	uxtb	r1, r2
 800a3f2:	f04f 0200 	mov.w	r2, #0
 800a3f6:	ea4b 0301 	orr.w	r3, fp, r1
 800a3fa:	ea4c 0402 	orr.w	r4, ip, r2
 800a3fe:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800a402:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800a406:	4618      	mov	r0, r3
 800a408:	4621      	mov	r1, r4
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800a412:	4770      	bx	lr

0800a414 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	460b      	mov	r3, r1
 800a41e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	1c5a      	adds	r2, r3, #1
 800a424:	607a      	str	r2, [r7, #4]
 800a426:	887a      	ldrh	r2, [r7, #2]
 800a428:	b2d2      	uxtb	r2, r2
 800a42a:	701a      	strb	r2, [r3, #0]
 800a42c:	887b      	ldrh	r3, [r7, #2]
 800a42e:	0a1b      	lsrs	r3, r3, #8
 800a430:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	607a      	str	r2, [r7, #4]
 800a438:	887a      	ldrh	r2, [r7, #2]
 800a43a:	b2d2      	uxtb	r2, r2
 800a43c:	701a      	strb	r2, [r3, #0]
}
 800a43e:	bf00      	nop
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a44a:	b480      	push	{r7}
 800a44c:	b083      	sub	sp, #12
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	607a      	str	r2, [r7, #4]
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	b2d2      	uxtb	r2, r2
 800a45e:	701a      	strb	r2, [r3, #0]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	0a1b      	lsrs	r3, r3, #8
 800a464:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	607a      	str	r2, [r7, #4]
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	701a      	strb	r2, [r3, #0]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	0a1b      	lsrs	r3, r3, #8
 800a476:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	607a      	str	r2, [r7, #4]
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	701a      	strb	r2, [r3, #0]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	0a1b      	lsrs	r3, r3, #8
 800a488:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	1c5a      	adds	r2, r3, #1
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	683a      	ldr	r2, [r7, #0]
 800a492:	b2d2      	uxtb	r2, r2
 800a494:	701a      	strb	r2, [r3, #0]
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800a4a2:	b490      	push	{r4, r7}
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	60f8      	str	r0, [r7, #12]
 800a4aa:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	60fa      	str	r2, [r7, #12]
 800a4b4:	783a      	ldrb	r2, [r7, #0]
 800a4b6:	701a      	strb	r2, [r3, #0]
 800a4b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a4bc:	f04f 0300 	mov.w	r3, #0
 800a4c0:	f04f 0400 	mov.w	r4, #0
 800a4c4:	0a0b      	lsrs	r3, r1, #8
 800a4c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a4ca:	0a14      	lsrs	r4, r2, #8
 800a4cc:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	60fa      	str	r2, [r7, #12]
 800a4d6:	783a      	ldrb	r2, [r7, #0]
 800a4d8:	701a      	strb	r2, [r3, #0]
 800a4da:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a4de:	f04f 0300 	mov.w	r3, #0
 800a4e2:	f04f 0400 	mov.w	r4, #0
 800a4e6:	0a0b      	lsrs	r3, r1, #8
 800a4e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a4ec:	0a14      	lsrs	r4, r2, #8
 800a4ee:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	60fa      	str	r2, [r7, #12]
 800a4f8:	783a      	ldrb	r2, [r7, #0]
 800a4fa:	701a      	strb	r2, [r3, #0]
 800a4fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a500:	f04f 0300 	mov.w	r3, #0
 800a504:	f04f 0400 	mov.w	r4, #0
 800a508:	0a0b      	lsrs	r3, r1, #8
 800a50a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a50e:	0a14      	lsrs	r4, r2, #8
 800a510:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	1c5a      	adds	r2, r3, #1
 800a518:	60fa      	str	r2, [r7, #12]
 800a51a:	783a      	ldrb	r2, [r7, #0]
 800a51c:	701a      	strb	r2, [r3, #0]
 800a51e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a522:	f04f 0300 	mov.w	r3, #0
 800a526:	f04f 0400 	mov.w	r4, #0
 800a52a:	0a0b      	lsrs	r3, r1, #8
 800a52c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a530:	0a14      	lsrs	r4, r2, #8
 800a532:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	1c5a      	adds	r2, r3, #1
 800a53a:	60fa      	str	r2, [r7, #12]
 800a53c:	783a      	ldrb	r2, [r7, #0]
 800a53e:	701a      	strb	r2, [r3, #0]
 800a540:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a544:	f04f 0300 	mov.w	r3, #0
 800a548:	f04f 0400 	mov.w	r4, #0
 800a54c:	0a0b      	lsrs	r3, r1, #8
 800a54e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a552:	0a14      	lsrs	r4, r2, #8
 800a554:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	1c5a      	adds	r2, r3, #1
 800a55c:	60fa      	str	r2, [r7, #12]
 800a55e:	783a      	ldrb	r2, [r7, #0]
 800a560:	701a      	strb	r2, [r3, #0]
 800a562:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a566:	f04f 0300 	mov.w	r3, #0
 800a56a:	f04f 0400 	mov.w	r4, #0
 800a56e:	0a0b      	lsrs	r3, r1, #8
 800a570:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a574:	0a14      	lsrs	r4, r2, #8
 800a576:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	1c5a      	adds	r2, r3, #1
 800a57e:	60fa      	str	r2, [r7, #12]
 800a580:	783a      	ldrb	r2, [r7, #0]
 800a582:	701a      	strb	r2, [r3, #0]
 800a584:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a588:	f04f 0300 	mov.w	r3, #0
 800a58c:	f04f 0400 	mov.w	r4, #0
 800a590:	0a0b      	lsrs	r3, r1, #8
 800a592:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a596:	0a14      	lsrs	r4, r2, #8
 800a598:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	1c5a      	adds	r2, r3, #1
 800a5a0:	60fa      	str	r2, [r7, #12]
 800a5a2:	783a      	ldrb	r2, [r7, #0]
 800a5a4:	701a      	strb	r2, [r3, #0]
}
 800a5a6:	bf00      	nop
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bc90      	pop	{r4, r7}
 800a5ae:	4770      	bx	lr

0800a5b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00d      	beq.n	800a5e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	1c53      	adds	r3, r2, #1
 800a5ce:	613b      	str	r3, [r7, #16]
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	1c59      	adds	r1, r3, #1
 800a5d4:	6179      	str	r1, [r7, #20]
 800a5d6:	7812      	ldrb	r2, [r2, #0]
 800a5d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	607b      	str	r3, [r7, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1f1      	bne.n	800a5ca <mem_cpy+0x1a>
	}
}
 800a5e6:	bf00      	nop
 800a5e8:	371c      	adds	r7, #28
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a5f2:	b480      	push	{r7}
 800a5f4:	b087      	sub	sp, #28
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	60f8      	str	r0, [r7, #12]
 800a5fa:	60b9      	str	r1, [r7, #8]
 800a5fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	617a      	str	r2, [r7, #20]
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	b2d2      	uxtb	r2, r2
 800a60c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	3b01      	subs	r3, #1
 800a612:	607b      	str	r3, [r7, #4]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1f3      	bne.n	800a602 <mem_set+0x10>
}
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a626:	b480      	push	{r7}
 800a628:	b089      	sub	sp, #36	; 0x24
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	60b9      	str	r1, [r7, #8]
 800a630:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	61fa      	str	r2, [r7, #28]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	4619      	mov	r1, r3
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	1c5a      	adds	r2, r3, #1
 800a64c:	61ba      	str	r2, [r7, #24]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	1acb      	subs	r3, r1, r3
 800a652:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	3b01      	subs	r3, #1
 800a658:	607b      	str	r3, [r7, #4]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <mem_cmp+0x40>
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d0eb      	beq.n	800a63e <mem_cmp+0x18>

	return r;
 800a666:	697b      	ldr	r3, [r7, #20]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3724      	adds	r7, #36	; 0x24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a67e:	e002      	b.n	800a686 <chk_chr+0x12>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	3301      	adds	r3, #1
 800a684:	607b      	str	r3, [r7, #4]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d005      	beq.n	800a69a <chk_chr+0x26>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	4293      	cmp	r3, r2
 800a698:	d1f2      	bne.n	800a680 <chk_chr+0xc>
	return *str;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	781b      	ldrb	r3, [r3, #0]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr
	...

0800a6ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	60bb      	str	r3, [r7, #8]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	60fb      	str	r3, [r7, #12]
 800a6be:	e029      	b.n	800a714 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a6c0:	4a27      	ldr	r2, [pc, #156]	; (800a760 <chk_lock+0xb4>)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	011b      	lsls	r3, r3, #4
 800a6c6:	4413      	add	r3, r2
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d01d      	beq.n	800a70a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a6ce:	4a24      	ldr	r2, [pc, #144]	; (800a760 <chk_lock+0xb4>)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	011b      	lsls	r3, r3, #4
 800a6d4:	4413      	add	r3, r2
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d116      	bne.n	800a70e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a6e0:	4a1f      	ldr	r2, [pc, #124]	; (800a760 <chk_lock+0xb4>)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	011b      	lsls	r3, r3, #4
 800a6e6:	4413      	add	r3, r2
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d10c      	bne.n	800a70e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a6f4:	4a1a      	ldr	r2, [pc, #104]	; (800a760 <chk_lock+0xb4>)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	011b      	lsls	r3, r3, #4
 800a6fa:	4413      	add	r3, r2
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800a704:	429a      	cmp	r2, r3
 800a706:	d102      	bne.n	800a70e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a708:	e007      	b.n	800a71a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a70a:	2301      	movs	r3, #1
 800a70c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3301      	adds	r3, #1
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d9d2      	bls.n	800a6c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d109      	bne.n	800a734 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d102      	bne.n	800a72c <chk_lock+0x80>
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d101      	bne.n	800a730 <chk_lock+0x84>
 800a72c:	2300      	movs	r3, #0
 800a72e:	e010      	b.n	800a752 <chk_lock+0xa6>
 800a730:	2312      	movs	r3, #18
 800a732:	e00e      	b.n	800a752 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d108      	bne.n	800a74c <chk_lock+0xa0>
 800a73a:	4a09      	ldr	r2, [pc, #36]	; (800a760 <chk_lock+0xb4>)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	011b      	lsls	r3, r3, #4
 800a740:	4413      	add	r3, r2
 800a742:	330c      	adds	r3, #12
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a74a:	d101      	bne.n	800a750 <chk_lock+0xa4>
 800a74c:	2310      	movs	r3, #16
 800a74e:	e000      	b.n	800a752 <chk_lock+0xa6>
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	200001ec 	.word	0x200001ec

0800a764 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a76a:	2300      	movs	r3, #0
 800a76c:	607b      	str	r3, [r7, #4]
 800a76e:	e002      	b.n	800a776 <enq_lock+0x12>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	3301      	adds	r3, #1
 800a774:	607b      	str	r3, [r7, #4]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d806      	bhi.n	800a78a <enq_lock+0x26>
 800a77c:	4a09      	ldr	r2, [pc, #36]	; (800a7a4 <enq_lock+0x40>)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	011b      	lsls	r3, r3, #4
 800a782:	4413      	add	r3, r2
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1f2      	bne.n	800a770 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	bf14      	ite	ne
 800a790:	2301      	movne	r3, #1
 800a792:	2300      	moveq	r3, #0
 800a794:	b2db      	uxtb	r3, r3
}
 800a796:	4618      	mov	r0, r3
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	200001ec 	.word	0x200001ec

0800a7a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	60fb      	str	r3, [r7, #12]
 800a7b6:	e01f      	b.n	800a7f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a7b8:	4a41      	ldr	r2, [pc, #260]	; (800a8c0 <inc_lock+0x118>)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	011b      	lsls	r3, r3, #4
 800a7be:	4413      	add	r3, r2
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d113      	bne.n	800a7f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a7ca:	4a3d      	ldr	r2, [pc, #244]	; (800a8c0 <inc_lock+0x118>)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	011b      	lsls	r3, r3, #4
 800a7d0:	4413      	add	r3, r2
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d109      	bne.n	800a7f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a7de:	4a38      	ldr	r2, [pc, #224]	; (800a8c0 <inc_lock+0x118>)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	011b      	lsls	r3, r3, #4
 800a7e4:	4413      	add	r3, r2
 800a7e6:	3308      	adds	r3, #8
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d006      	beq.n	800a800 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d9dc      	bls.n	800a7b8 <inc_lock+0x10>
 800a7fe:	e000      	b.n	800a802 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a800:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2b02      	cmp	r3, #2
 800a806:	d132      	bne.n	800a86e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a808:	2300      	movs	r3, #0
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	e002      	b.n	800a814 <inc_lock+0x6c>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	3301      	adds	r3, #1
 800a812:	60fb      	str	r3, [r7, #12]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d806      	bhi.n	800a828 <inc_lock+0x80>
 800a81a:	4a29      	ldr	r2, [pc, #164]	; (800a8c0 <inc_lock+0x118>)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	4413      	add	r3, r2
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1f2      	bne.n	800a80e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d101      	bne.n	800a832 <inc_lock+0x8a>
 800a82e:	2300      	movs	r3, #0
 800a830:	e040      	b.n	800a8b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	4922      	ldr	r1, [pc, #136]	; (800a8c0 <inc_lock+0x118>)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	011b      	lsls	r3, r3, #4
 800a83c:	440b      	add	r3, r1
 800a83e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	689a      	ldr	r2, [r3, #8]
 800a844:	491e      	ldr	r1, [pc, #120]	; (800a8c0 <inc_lock+0x118>)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	011b      	lsls	r3, r3, #4
 800a84a:	440b      	add	r3, r1
 800a84c:	3304      	adds	r3, #4
 800a84e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a854:	491a      	ldr	r1, [pc, #104]	; (800a8c0 <inc_lock+0x118>)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	011b      	lsls	r3, r3, #4
 800a85a:	440b      	add	r3, r1
 800a85c:	3308      	adds	r3, #8
 800a85e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a860:	4a17      	ldr	r2, [pc, #92]	; (800a8c0 <inc_lock+0x118>)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	011b      	lsls	r3, r3, #4
 800a866:	4413      	add	r3, r2
 800a868:	330c      	adds	r3, #12
 800a86a:	2200      	movs	r2, #0
 800a86c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d009      	beq.n	800a888 <inc_lock+0xe0>
 800a874:	4a12      	ldr	r2, [pc, #72]	; (800a8c0 <inc_lock+0x118>)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	011b      	lsls	r3, r3, #4
 800a87a:	4413      	add	r3, r2
 800a87c:	330c      	adds	r3, #12
 800a87e:	881b      	ldrh	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <inc_lock+0xe0>
 800a884:	2300      	movs	r3, #0
 800a886:	e015      	b.n	800a8b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d108      	bne.n	800a8a0 <inc_lock+0xf8>
 800a88e:	4a0c      	ldr	r2, [pc, #48]	; (800a8c0 <inc_lock+0x118>)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	011b      	lsls	r3, r3, #4
 800a894:	4413      	add	r3, r2
 800a896:	330c      	adds	r3, #12
 800a898:	881b      	ldrh	r3, [r3, #0]
 800a89a:	3301      	adds	r3, #1
 800a89c:	b29a      	uxth	r2, r3
 800a89e:	e001      	b.n	800a8a4 <inc_lock+0xfc>
 800a8a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8a4:	4906      	ldr	r1, [pc, #24]	; (800a8c0 <inc_lock+0x118>)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	011b      	lsls	r3, r3, #4
 800a8aa:	440b      	add	r3, r1
 800a8ac:	330c      	adds	r3, #12
 800a8ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	3301      	adds	r3, #1
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	200001ec 	.word	0x200001ec

0800a8c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	607b      	str	r3, [r7, #4]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d825      	bhi.n	800a924 <dec_lock+0x60>
		n = Files[i].ctr;
 800a8d8:	4a17      	ldr	r2, [pc, #92]	; (800a938 <dec_lock+0x74>)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	011b      	lsls	r3, r3, #4
 800a8de:	4413      	add	r3, r2
 800a8e0:	330c      	adds	r3, #12
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a8e6:	89fb      	ldrh	r3, [r7, #14]
 800a8e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ec:	d101      	bne.n	800a8f2 <dec_lock+0x2e>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a8f2:	89fb      	ldrh	r3, [r7, #14]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <dec_lock+0x3a>
 800a8f8:	89fb      	ldrh	r3, [r7, #14]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a8fe:	4a0e      	ldr	r2, [pc, #56]	; (800a938 <dec_lock+0x74>)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	011b      	lsls	r3, r3, #4
 800a904:	4413      	add	r3, r2
 800a906:	330c      	adds	r3, #12
 800a908:	89fa      	ldrh	r2, [r7, #14]
 800a90a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a90c:	89fb      	ldrh	r3, [r7, #14]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d105      	bne.n	800a91e <dec_lock+0x5a>
 800a912:	4a09      	ldr	r2, [pc, #36]	; (800a938 <dec_lock+0x74>)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	011b      	lsls	r3, r3, #4
 800a918:	4413      	add	r3, r2
 800a91a:	2200      	movs	r2, #0
 800a91c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a91e:	2300      	movs	r3, #0
 800a920:	737b      	strb	r3, [r7, #13]
 800a922:	e001      	b.n	800a928 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a924:	2302      	movs	r3, #2
 800a926:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a928:	7b7b      	ldrb	r3, [r7, #13]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	200001ec 	.word	0x200001ec

0800a93c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a944:	2300      	movs	r3, #0
 800a946:	60fb      	str	r3, [r7, #12]
 800a948:	e010      	b.n	800a96c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a94a:	4a0d      	ldr	r2, [pc, #52]	; (800a980 <clear_lock+0x44>)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	011b      	lsls	r3, r3, #4
 800a950:	4413      	add	r3, r2
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	429a      	cmp	r2, r3
 800a958:	d105      	bne.n	800a966 <clear_lock+0x2a>
 800a95a:	4a09      	ldr	r2, [pc, #36]	; (800a980 <clear_lock+0x44>)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	011b      	lsls	r3, r3, #4
 800a960:	4413      	add	r3, r2
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3301      	adds	r3, #1
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d9eb      	bls.n	800a94a <clear_lock+0xe>
	}
}
 800a972:	bf00      	nop
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	200001ec 	.word	0x200001ec

0800a984 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	78db      	ldrb	r3, [r3, #3]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d034      	beq.n	800aa02 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	7858      	ldrb	r0, [r3, #1]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	f7ff fbfc 	bl	800a1a8 <disk_write>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <sync_window+0x38>
			res = FR_DISK_ERR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	73fb      	strb	r3, [r7, #15]
 800a9ba:	e022      	b.n	800aa02 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	1ad2      	subs	r2, r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d217      	bcs.n	800aa02 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	789b      	ldrb	r3, [r3, #2]
 800a9d6:	613b      	str	r3, [r7, #16]
 800a9d8:	e010      	b.n	800a9fc <sync_window+0x78>
					wsect += fs->fsize;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9de:	697a      	ldr	r2, [r7, #20]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	7858      	ldrb	r0, [r3, #1]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	f7ff fbd9 	bl	800a1a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	613b      	str	r3, [r7, #16]
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d8eb      	bhi.n	800a9da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aa02:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3718      	adds	r7, #24
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d01b      	beq.n	800aa5c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7ff ffad 	bl	800a984 <sync_window>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d113      	bne.n	800aa5c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	7858      	ldrb	r0, [r3, #1]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800aa3e:	2301      	movs	r3, #1
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	f7ff fb91 	bl	800a168 <disk_read>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d004      	beq.n	800aa56 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aa4c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	683a      	ldr	r2, [r7, #0]
 800aa5a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	3b02      	subs	r3, #2
 800aa74:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	3b02      	subs	r3, #2
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d301      	bcc.n	800aa86 <clust2sect+0x20>
 800aa82:	2300      	movs	r3, #0
 800aa84:	e008      	b.n	800aa98 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	895b      	ldrh	r3, [r3, #10]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	fb03 f202 	mul.w	r2, r3, r2
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa96:	4413      	add	r3, r2
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800aaa4:	b590      	push	{r4, r7, lr}
 800aaa6:	b089      	sub	sp, #36	; 0x24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d904      	bls.n	800aac4 <get_fat+0x20>
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	683a      	ldr	r2, [r7, #0]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d302      	bcc.n	800aaca <get_fat+0x26>
		val = 1;	/* Internal error */
 800aac4:	2301      	movs	r3, #1
 800aac6:	61fb      	str	r3, [r7, #28]
 800aac8:	e13a      	b.n	800ad40 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aaca:	f04f 33ff 	mov.w	r3, #4294967295
 800aace:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	3b01      	subs	r3, #1
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	f200 8126 	bhi.w	800ad28 <get_fat+0x284>
 800aadc:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <get_fat+0x40>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800aaf5 	.word	0x0800aaf5
 800aae8:	0800aba3 	.word	0x0800aba3
 800aaec:	0800abef 	.word	0x0800abef
 800aaf0:	0800ac3f 	.word	0x0800ac3f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	085b      	lsrs	r3, r3, #1
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	4413      	add	r3, r2
 800ab00:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	899b      	ldrh	r3, [r3, #12]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab12:	4413      	add	r3, r2
 800ab14:	4619      	mov	r1, r3
 800ab16:	69b8      	ldr	r0, [r7, #24]
 800ab18:	f7ff ff78 	bl	800aa0c <move_window>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f040 8105 	bne.w	800ad2e <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	60fa      	str	r2, [r7, #12]
 800ab2a:	69ba      	ldr	r2, [r7, #24]
 800ab2c:	8992      	ldrh	r2, [r2, #12]
 800ab2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab32:	fb02 f201 	mul.w	r2, r2, r1
 800ab36:	1a9b      	subs	r3, r3, r2
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab40:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	899b      	ldrh	r3, [r3, #12]
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab52:	4413      	add	r3, r2
 800ab54:	4619      	mov	r1, r3
 800ab56:	69b8      	ldr	r0, [r7, #24]
 800ab58:	f7ff ff58 	bl	800aa0c <move_window>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f040 80e7 	bne.w	800ad32 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	899b      	ldrh	r3, [r3, #12]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab70:	fb02 f201 	mul.w	r2, r2, r1
 800ab74:	1a9b      	subs	r3, r3, r2
 800ab76:	69ba      	ldr	r2, [r7, #24]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab7e:	021b      	lsls	r3, r3, #8
 800ab80:	461a      	mov	r2, r3
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d002      	beq.n	800ab98 <get_fat+0xf4>
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	091b      	lsrs	r3, r3, #4
 800ab96:	e002      	b.n	800ab9e <get_fat+0xfa>
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab9e:	61fb      	str	r3, [r7, #28]
			break;
 800aba0:	e0ce      	b.n	800ad40 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	899b      	ldrh	r3, [r3, #12]
 800abaa:	085b      	lsrs	r3, r3, #1
 800abac:	b29b      	uxth	r3, r3
 800abae:	4619      	mov	r1, r3
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800abb6:	4413      	add	r3, r2
 800abb8:	4619      	mov	r1, r3
 800abba:	69b8      	ldr	r0, [r7, #24]
 800abbc:	f7ff ff26 	bl	800aa0c <move_window>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f040 80b7 	bne.w	800ad36 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	005b      	lsls	r3, r3, #1
 800abd2:	69ba      	ldr	r2, [r7, #24]
 800abd4:	8992      	ldrh	r2, [r2, #12]
 800abd6:	fbb3 f0f2 	udiv	r0, r3, r2
 800abda:	fb02 f200 	mul.w	r2, r2, r0
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	440b      	add	r3, r1
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7ff fb1e 	bl	800a224 <ld_word>
 800abe8:	4603      	mov	r3, r0
 800abea:	61fb      	str	r3, [r7, #28]
			break;
 800abec:	e0a8      	b.n	800ad40 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	899b      	ldrh	r3, [r3, #12]
 800abf6:	089b      	lsrs	r3, r3, #2
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	4619      	mov	r1, r3
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac02:	4413      	add	r3, r2
 800ac04:	4619      	mov	r1, r3
 800ac06:	69b8      	ldr	r0, [r7, #24]
 800ac08:	f7ff ff00 	bl	800aa0c <move_window>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f040 8093 	bne.w	800ad3a <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	69ba      	ldr	r2, [r7, #24]
 800ac20:	8992      	ldrh	r2, [r2, #12]
 800ac22:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac26:	fb02 f200 	mul.w	r2, r2, r0
 800ac2a:	1a9b      	subs	r3, r3, r2
 800ac2c:	440b      	add	r3, r1
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7ff fb10 	bl	800a254 <ld_dword>
 800ac34:	4603      	mov	r3, r0
 800ac36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ac3a:	61fb      	str	r3, [r7, #28]
			break;
 800ac3c:	e080      	b.n	800ad40 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800ac44:	4323      	orrs	r3, r4
 800ac46:	d06f      	beq.n	800ad28 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800ac58:	f113 30ff 	adds.w	r0, r3, #4294967295
 800ac5c:	f144 31ff 	adc.w	r1, r4, #4294967295
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	899b      	ldrh	r3, [r3, #12]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	f04f 0400 	mov.w	r4, #0
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	4623      	mov	r3, r4
 800ac6e:	f7f5 fab3 	bl	80001d8 <__aeabi_uldivmod>
 800ac72:	4603      	mov	r3, r0
 800ac74:	460c      	mov	r4, r1
 800ac76:	461a      	mov	r2, r3
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	895b      	ldrh	r3, [r3, #10]
 800ac7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac80:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	79db      	ldrb	r3, [r3, #7]
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	d10e      	bne.n	800aca8 <get_fat+0x204>
					if (cofs <= clen) {
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d80a      	bhi.n	800aca8 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d002      	beq.n	800aca0 <get_fat+0x1fc>
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	e001      	b.n	800aca4 <get_fat+0x200>
 800aca0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800aca4:	61fb      	str	r3, [r7, #28]
						break;
 800aca6:	e04b      	b.n	800ad40 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	79db      	ldrb	r3, [r3, #7]
 800acac:	2b03      	cmp	r3, #3
 800acae:	d108      	bne.n	800acc2 <get_fat+0x21e>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	697a      	ldr	r2, [r7, #20]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d203      	bcs.n	800acc2 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	3301      	adds	r3, #1
 800acbe:	61fb      	str	r3, [r7, #28]
					break;
 800acc0:	e03e      	b.n	800ad40 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	79db      	ldrb	r3, [r3, #7]
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d02e      	beq.n	800ad28 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	69db      	ldr	r3, [r3, #28]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800acd2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800acd6:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800acd8:	e032      	b.n	800ad40 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	899b      	ldrh	r3, [r3, #12]
 800ace2:	089b      	lsrs	r3, r3, #2
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	4619      	mov	r1, r3
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	fbb3 f3f1 	udiv	r3, r3, r1
 800acee:	4413      	add	r3, r2
 800acf0:	4619      	mov	r1, r3
 800acf2:	69b8      	ldr	r0, [r7, #24]
 800acf4:	f7ff fe8a 	bl	800aa0c <move_window>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d11f      	bne.n	800ad3e <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	69ba      	ldr	r2, [r7, #24]
 800ad0a:	8992      	ldrh	r2, [r2, #12]
 800ad0c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad10:	fb02 f200 	mul.w	r2, r2, r0
 800ad14:	1a9b      	subs	r3, r3, r2
 800ad16:	440b      	add	r3, r1
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff fa9b 	bl	800a254 <ld_dword>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad24:	61fb      	str	r3, [r7, #28]
					break;
 800ad26:	e00b      	b.n	800ad40 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ad28:	2301      	movs	r3, #1
 800ad2a:	61fb      	str	r3, [r7, #28]
 800ad2c:	e008      	b.n	800ad40 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad2e:	bf00      	nop
 800ad30:	e006      	b.n	800ad40 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad32:	bf00      	nop
 800ad34:	e004      	b.n	800ad40 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ad36:	bf00      	nop
 800ad38:	e002      	b.n	800ad40 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad3a:	bf00      	nop
 800ad3c:	e000      	b.n	800ad40 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad3e:	bf00      	nop
		}
	}

	return val;
 800ad40:	69fb      	ldr	r3, [r7, #28]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3724      	adds	r7, #36	; 0x24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd90      	pop	{r4, r7, pc}
 800ad4a:	bf00      	nop

0800ad4c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ad4c:	b590      	push	{r4, r7, lr}
 800ad4e:	b089      	sub	sp, #36	; 0x24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ad58:	2302      	movs	r3, #2
 800ad5a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	f240 8111 	bls.w	800af86 <put_fat+0x23a>
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6a1b      	ldr	r3, [r3, #32]
 800ad68:	68ba      	ldr	r2, [r7, #8]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	f080 810b 	bcs.w	800af86 <put_fat+0x23a>
		switch (fs->fs_type) {
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	f200 8105 	bhi.w	800af86 <put_fat+0x23a>
 800ad7c:	a201      	add	r2, pc, #4	; (adr r2, 800ad84 <put_fat+0x38>)
 800ad7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad82:	bf00      	nop
 800ad84:	0800ad95 	.word	0x0800ad95
 800ad88:	0800ae99 	.word	0x0800ae99
 800ad8c:	0800aeef 	.word	0x0800aeef
 800ad90:	0800aeef 	.word	0x0800aeef
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	61bb      	str	r3, [r7, #24]
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	085b      	lsrs	r3, r3, #1
 800ad9c:	69ba      	ldr	r2, [r7, #24]
 800ad9e:	4413      	add	r3, r2
 800ada0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	899b      	ldrh	r3, [r3, #12]
 800adaa:	4619      	mov	r1, r3
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	fbb3 f3f1 	udiv	r3, r3, r1
 800adb2:	4413      	add	r3, r2
 800adb4:	4619      	mov	r1, r3
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f7ff fe28 	bl	800aa0c <move_window>
 800adbc:	4603      	mov	r3, r0
 800adbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800adc0:	7ffb      	ldrb	r3, [r7, #31]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f040 80d8 	bne.w	800af78 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	1c5a      	adds	r2, r3, #1
 800add2:	61ba      	str	r2, [r7, #24]
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	8992      	ldrh	r2, [r2, #12]
 800add8:	fbb3 f0f2 	udiv	r0, r3, r2
 800addc:	fb02 f200 	mul.w	r2, r2, r0
 800ade0:	1a9b      	subs	r3, r3, r2
 800ade2:	440b      	add	r3, r1
 800ade4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	f003 0301 	and.w	r3, r3, #1
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00d      	beq.n	800ae0c <put_fat+0xc0>
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	b25b      	sxtb	r3, r3
 800adf6:	f003 030f 	and.w	r3, r3, #15
 800adfa:	b25a      	sxtb	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	011b      	lsls	r3, r3, #4
 800ae02:	b25b      	sxtb	r3, r3
 800ae04:	4313      	orrs	r3, r2
 800ae06:	b25b      	sxtb	r3, r3
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	e001      	b.n	800ae10 <put_fat+0xc4>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	697a      	ldr	r2, [r7, #20]
 800ae12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2201      	movs	r2, #1
 800ae18:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	899b      	ldrh	r3, [r3, #12]
 800ae22:	4619      	mov	r1, r3
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae2a:	4413      	add	r3, r2
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7ff fdec 	bl	800aa0c <move_window>
 800ae34:	4603      	mov	r3, r0
 800ae36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae38:	7ffb      	ldrb	r3, [r7, #31]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f040 809e 	bne.w	800af7c <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	899b      	ldrh	r3, [r3, #12]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae52:	fb02 f200 	mul.w	r2, r2, r0
 800ae56:	1a9b      	subs	r3, r3, r2
 800ae58:	440b      	add	r3, r1
 800ae5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <put_fat+0x122>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	091b      	lsrs	r3, r3, #4
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	e00e      	b.n	800ae8c <put_fat+0x140>
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	b25b      	sxtb	r3, r3
 800ae74:	f023 030f 	bic.w	r3, r3, #15
 800ae78:	b25a      	sxtb	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	0a1b      	lsrs	r3, r3, #8
 800ae7e:	b25b      	sxtb	r3, r3
 800ae80:	f003 030f 	and.w	r3, r3, #15
 800ae84:	b25b      	sxtb	r3, r3
 800ae86:	4313      	orrs	r3, r2
 800ae88:	b25b      	sxtb	r3, r3
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	697a      	ldr	r2, [r7, #20]
 800ae8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2201      	movs	r2, #1
 800ae94:	70da      	strb	r2, [r3, #3]
			break;
 800ae96:	e076      	b.n	800af86 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	899b      	ldrh	r3, [r3, #12]
 800aea0:	085b      	lsrs	r3, r3, #1
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	4619      	mov	r1, r3
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	fbb3 f3f1 	udiv	r3, r3, r1
 800aeac:	4413      	add	r3, r2
 800aeae:	4619      	mov	r1, r3
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f7ff fdab 	bl	800aa0c <move_window>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aeba:	7ffb      	ldrb	r3, [r7, #31]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d15f      	bne.n	800af80 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	005b      	lsls	r3, r3, #1
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	8992      	ldrh	r2, [r2, #12]
 800aece:	fbb3 f0f2 	udiv	r0, r3, r2
 800aed2:	fb02 f200 	mul.w	r2, r2, r0
 800aed6:	1a9b      	subs	r3, r3, r2
 800aed8:	440b      	add	r3, r1
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	b292      	uxth	r2, r2
 800aede:	4611      	mov	r1, r2
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7ff fa97 	bl	800a414 <st_word>
			fs->wflag = 1;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2201      	movs	r2, #1
 800aeea:	70da      	strb	r2, [r3, #3]
			break;
 800aeec:	e04b      	b.n	800af86 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	899b      	ldrh	r3, [r3, #12]
 800aef6:	089b      	lsrs	r3, r3, #2
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	4619      	mov	r1, r3
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	fbb3 f3f1 	udiv	r3, r3, r1
 800af02:	4413      	add	r3, r2
 800af04:	4619      	mov	r1, r3
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f7ff fd80 	bl	800aa0c <move_window>
 800af0c:	4603      	mov	r3, r0
 800af0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af10:	7ffb      	ldrb	r3, [r7, #31]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d136      	bne.n	800af84 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b04      	cmp	r3, #4
 800af1c:	d017      	beq.n	800af4e <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	8992      	ldrh	r2, [r2, #12]
 800af32:	fbb3 f0f2 	udiv	r0, r3, r2
 800af36:	fb02 f200 	mul.w	r2, r2, r0
 800af3a:	1a9b      	subs	r3, r3, r2
 800af3c:	440b      	add	r3, r1
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff f988 	bl	800a254 <ld_dword>
 800af44:	4603      	mov	r3, r0
 800af46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af4a:	4323      	orrs	r3, r4
 800af4c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	8992      	ldrh	r2, [r2, #12]
 800af5c:	fbb3 f0f2 	udiv	r0, r3, r2
 800af60:	fb02 f200 	mul.w	r2, r2, r0
 800af64:	1a9b      	subs	r3, r3, r2
 800af66:	440b      	add	r3, r1
 800af68:	6879      	ldr	r1, [r7, #4]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7ff fa6d 	bl	800a44a <st_dword>
			fs->wflag = 1;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2201      	movs	r2, #1
 800af74:	70da      	strb	r2, [r3, #3]
			break;
 800af76:	e006      	b.n	800af86 <put_fat+0x23a>
			if (res != FR_OK) break;
 800af78:	bf00      	nop
 800af7a:	e004      	b.n	800af86 <put_fat+0x23a>
			if (res != FR_OK) break;
 800af7c:	bf00      	nop
 800af7e:	e002      	b.n	800af86 <put_fat+0x23a>
			if (res != FR_OK) break;
 800af80:	bf00      	nop
 800af82:	e000      	b.n	800af86 <put_fat+0x23a>
			if (res != FR_OK) break;
 800af84:	bf00      	nop
		}
	}
	return res;
 800af86:	7ffb      	ldrb	r3, [r7, #31]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3724      	adds	r7, #36	; 0x24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd90      	pop	{r4, r7, pc}

0800af90 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b08a      	sub	sp, #40	; 0x28
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	3b02      	subs	r3, #2
 800afa0:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	3b02      	subs	r3, #2
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d301      	bcc.n	800afb2 <find_bitmap+0x22>
 800afae:	2300      	movs	r3, #0
 800afb0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	61fb      	str	r3, [r7, #28]
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	61bb      	str	r3, [r7, #24]
 800afba:	2300      	movs	r3, #0
 800afbc:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	08db      	lsrs	r3, r3, #3
 800afc6:	68f9      	ldr	r1, [r7, #12]
 800afc8:	8989      	ldrh	r1, [r1, #12]
 800afca:	fbb3 f3f1 	udiv	r3, r3, r1
 800afce:	4413      	add	r3, r2
 800afd0:	4619      	mov	r1, r3
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f7ff fd1a 	bl	800aa0c <move_window>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d002      	beq.n	800afe4 <find_bitmap+0x54>
 800afde:	f04f 33ff 	mov.w	r3, #4294967295
 800afe2:	e058      	b.n	800b096 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	08db      	lsrs	r3, r3, #3
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	8992      	ldrh	r2, [r2, #12]
 800afec:	fbb3 f1f2 	udiv	r1, r3, r2
 800aff0:	fb02 f201 	mul.w	r2, r2, r1
 800aff4:	1a9b      	subs	r3, r3, r2
 800aff6:	623b      	str	r3, [r7, #32]
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	f003 0307 	and.w	r3, r3, #7
 800affe:	2201      	movs	r2, #1
 800b000:	fa02 f303 	lsl.w	r3, r2, r3
 800b004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	4413      	add	r3, r2
 800b00e:	333c      	adds	r3, #60	; 0x3c
 800b010:	781a      	ldrb	r2, [r3, #0]
 800b012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b016:	4013      	ands	r3, r2
 800b018:	74fb      	strb	r3, [r7, #19]
 800b01a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b01e:	005b      	lsls	r3, r3, #1
 800b020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	3301      	adds	r3, #1
 800b028:	61fb      	str	r3, [r7, #28]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6a1b      	ldr	r3, [r3, #32]
 800b02e:	3b02      	subs	r3, #2
 800b030:	69fa      	ldr	r2, [r7, #28]
 800b032:	429a      	cmp	r2, r3
 800b034:	d307      	bcc.n	800b046 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800b036:	2300      	movs	r3, #0
 800b038:	61fb      	str	r3, [r7, #28]
 800b03a:	2300      	movs	r3, #0
 800b03c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	899b      	ldrh	r3, [r3, #12]
 800b044:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800b046:	7cfb      	ldrb	r3, [r7, #19]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d109      	bne.n	800b060 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	3301      	adds	r3, #1
 800b050:	617b      	str	r3, [r7, #20]
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	429a      	cmp	r2, r3
 800b058:	d106      	bne.n	800b068 <find_bitmap+0xd8>
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	3302      	adds	r3, #2
 800b05e:	e01a      	b.n	800b096 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	61bb      	str	r3, [r7, #24]
 800b064:	2300      	movs	r3, #0
 800b066:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800b068:	69fa      	ldr	r2, [r7, #28]
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d101      	bne.n	800b074 <find_bitmap+0xe4>
 800b070:	2300      	movs	r3, #0
 800b072:	e010      	b.n	800b096 <find_bitmap+0x106>
			} while (bm);
 800b074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1c5      	bne.n	800b008 <find_bitmap+0x78>
			bm = 1;
 800b07c:	2301      	movs	r3, #1
 800b07e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800b082:	6a3b      	ldr	r3, [r7, #32]
 800b084:	3301      	adds	r3, #1
 800b086:	623b      	str	r3, [r7, #32]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	899b      	ldrh	r3, [r3, #12]
 800b08c:	461a      	mov	r2, r3
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	4293      	cmp	r3, r2
 800b092:	d3b9      	bcc.n	800b008 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800b094:	e793      	b.n	800afbe <find_bitmap+0x2e>
	}
}
 800b096:	4618      	mov	r0, r3
 800b098:	3728      	adds	r7, #40	; 0x28
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b088      	sub	sp, #32
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	60f8      	str	r0, [r7, #12]
 800b0a6:	60b9      	str	r1, [r7, #8]
 800b0a8:	607a      	str	r2, [r7, #4]
 800b0aa:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	3b02      	subs	r3, #2
 800b0b0:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	08db      	lsrs	r3, r3, #3
 800b0ba:	68f9      	ldr	r1, [r7, #12]
 800b0bc:	8989      	ldrh	r1, [r1, #12]
 800b0be:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0c2:	4413      	add	r3, r2
 800b0c4:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	08db      	lsrs	r3, r3, #3
 800b0ca:	68fa      	ldr	r2, [r7, #12]
 800b0cc:	8992      	ldrh	r2, [r2, #12]
 800b0ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0d2:	fb02 f201 	mul.w	r2, r2, r1
 800b0d6:	1a9b      	subs	r3, r3, r2
 800b0d8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	f003 0307 	and.w	r3, r3, #7
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	1c5a      	adds	r2, r3, #1
 800b0ec:	617a      	str	r2, [r7, #20]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f7ff fc8b 	bl	800aa0c <move_window>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <change_bitmap+0x62>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e03f      	b.n	800b180 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	4413      	add	r3, r2
 800b106:	333c      	adds	r3, #60	; 0x3c
 800b108:	781a      	ldrb	r2, [r3, #0]
 800b10a:	7ffb      	ldrb	r3, [r7, #31]
 800b10c:	4013      	ands	r3, r2
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	2b00      	cmp	r3, #0
 800b112:	bf14      	ite	ne
 800b114:	2301      	movne	r3, #1
 800b116:	2300      	moveq	r3, #0
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	461a      	mov	r2, r3
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	4293      	cmp	r3, r2
 800b120:	d101      	bne.n	800b126 <change_bitmap+0x88>
 800b122:	2302      	movs	r3, #2
 800b124:	e02c      	b.n	800b180 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	4413      	add	r3, r2
 800b12c:	333c      	adds	r3, #60	; 0x3c
 800b12e:	781a      	ldrb	r2, [r3, #0]
 800b130:	7ffb      	ldrb	r3, [r7, #31]
 800b132:	4053      	eors	r3, r2
 800b134:	b2d9      	uxtb	r1, r3
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	4413      	add	r3, r2
 800b13c:	333c      	adds	r3, #60	; 0x3c
 800b13e:	460a      	mov	r2, r1
 800b140:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2201      	movs	r2, #1
 800b146:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3b01      	subs	r3, #1
 800b14c:	607b      	str	r3, [r7, #4]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d101      	bne.n	800b158 <change_bitmap+0xba>
 800b154:	2300      	movs	r3, #0
 800b156:	e013      	b.n	800b180 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800b158:	7ffb      	ldrb	r3, [r7, #31]
 800b15a:	005b      	lsls	r3, r3, #1
 800b15c:	77fb      	strb	r3, [r7, #31]
 800b15e:	7ffb      	ldrb	r3, [r7, #31]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1cd      	bne.n	800b100 <change_bitmap+0x62>
			bm = 1;
 800b164:	2301      	movs	r3, #1
 800b166:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	3301      	adds	r3, #1
 800b16c:	61bb      	str	r3, [r7, #24]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	899b      	ldrh	r3, [r3, #12]
 800b172:	461a      	mov	r2, r3
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	4293      	cmp	r3, r2
 800b178:	d3c2      	bcc.n	800b100 <change_bitmap+0x62>
		i = 0;
 800b17a:	2300      	movs	r3, #0
 800b17c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b17e:	e7b3      	b.n	800b0e8 <change_bitmap+0x4a>
	}
}
 800b180:	4618      	mov	r0, r3
 800b182:	3720      	adds	r7, #32
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	79db      	ldrb	r3, [r3, #7]
 800b194:	2b03      	cmp	r3, #3
 800b196:	d121      	bne.n	800b1dc <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	617b      	str	r3, [r7, #20]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	613b      	str	r3, [r7, #16]
 800b1a4:	e014      	b.n	800b1d0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6818      	ldr	r0, [r3, #0]
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	6979      	ldr	r1, [r7, #20]
 800b1b2:	f7ff fdcb 	bl	800ad4c <put_fat>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800b1ba:	7bfb      	ldrb	r3, [r7, #15]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <fill_first_frag+0x3c>
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
 800b1c2:	e00c      	b.n	800b1de <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	617b      	str	r3, [r7, #20]
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	613b      	str	r3, [r7, #16]
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1e7      	bne.n	800b1a6 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3718      	adds	r7, #24
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b086      	sub	sp, #24
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	60f8      	str	r0, [r7, #12]
 800b1ee:	60b9      	str	r1, [r7, #8]
 800b1f0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b1f2:	e020      	b.n	800b236 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6818      	ldr	r0, [r3, #0]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	69db      	ldr	r3, [r3, #28]
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	1c59      	adds	r1, r3, #1
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	69db      	ldr	r3, [r3, #28]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d905      	bls.n	800b216 <fill_last_frag+0x30>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	69db      	ldr	r3, [r3, #28]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	3302      	adds	r3, #2
 800b214:	e000      	b.n	800b218 <fill_last_frag+0x32>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	461a      	mov	r2, r3
 800b21a:	f7ff fd97 	bl	800ad4c <put_fat>
 800b21e:	4603      	mov	r3, r0
 800b220:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800b222:	7dfb      	ldrb	r3, [r7, #23]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <fill_last_frag+0x46>
 800b228:	7dfb      	ldrb	r3, [r7, #23]
 800b22a:	e009      	b.n	800b240 <fill_last_frag+0x5a>
		obj->n_frag--;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	69db      	ldr	r3, [r3, #28]
 800b230:	1e5a      	subs	r2, r3, #1
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	69db      	ldr	r3, [r3, #28]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1da      	bne.n	800b1f4 <fill_last_frag+0xe>
	}
	return FR_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3718      	adds	r7, #24
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b08a      	sub	sp, #40	; 0x28
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	627b      	str	r3, [r7, #36]	; 0x24
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d904      	bls.n	800b276 <remove_chain+0x2e>
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	6a1b      	ldr	r3, [r3, #32]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	429a      	cmp	r2, r3
 800b274:	d301      	bcc.n	800b27a <remove_chain+0x32>
 800b276:	2302      	movs	r3, #2
 800b278:	e096      	b.n	800b3a8 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d014      	beq.n	800b2aa <remove_chain+0x62>
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	2b04      	cmp	r3, #4
 800b286:	d103      	bne.n	800b290 <remove_chain+0x48>
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	79db      	ldrb	r3, [r3, #7]
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d00c      	beq.n	800b2aa <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b290:	f04f 32ff 	mov.w	r2, #4294967295
 800b294:	6879      	ldr	r1, [r7, #4]
 800b296:	69b8      	ldr	r0, [r7, #24]
 800b298:	f7ff fd58 	bl	800ad4c <put_fat>
 800b29c:	4603      	mov	r3, r0
 800b29e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b2a0:	7ffb      	ldrb	r3, [r7, #31]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <remove_chain+0x62>
 800b2a6:	7ffb      	ldrb	r3, [r7, #31]
 800b2a8:	e07e      	b.n	800b3a8 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b2aa:	68b9      	ldr	r1, [r7, #8]
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f7ff fbf9 	bl	800aaa4 <get_fat>
 800b2b2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d055      	beq.n	800b366 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d101      	bne.n	800b2c4 <remove_chain+0x7c>
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	e071      	b.n	800b3a8 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ca:	d101      	bne.n	800b2d0 <remove_chain+0x88>
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	e06b      	b.n	800b3a8 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	2b04      	cmp	r3, #4
 800b2d6:	d00b      	beq.n	800b2f0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b2d8:	2200      	movs	r2, #0
 800b2da:	68b9      	ldr	r1, [r7, #8]
 800b2dc:	69b8      	ldr	r0, [r7, #24]
 800b2de:	f7ff fd35 	bl	800ad4c <put_fat>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b2e6:	7ffb      	ldrb	r3, [r7, #31]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <remove_chain+0xa8>
 800b2ec:	7ffb      	ldrb	r3, [r7, #31]
 800b2ee:	e05b      	b.n	800b3a8 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	69da      	ldr	r2, [r3, #28]
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	6a1b      	ldr	r3, [r3, #32]
 800b2f8:	3b02      	subs	r3, #2
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d20b      	bcs.n	800b316 <remove_chain+0xce>
			fs->free_clst++;
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	69db      	ldr	r3, [r3, #28]
 800b302:	1c5a      	adds	r2, r3, #1
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	791b      	ldrb	r3, [r3, #4]
 800b30c:	f043 0301 	orr.w	r3, r3, #1
 800b310:	b2da      	uxtb	r2, r3
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800b316:	6a3b      	ldr	r3, [r7, #32]
 800b318:	3301      	adds	r3, #1
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d102      	bne.n	800b326 <remove_chain+0xde>
			ecl = nxt;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	623b      	str	r3, [r7, #32]
 800b324:	e017      	b.n	800b356 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	2b04      	cmp	r3, #4
 800b32c:	d10f      	bne.n	800b34e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800b32e:	6a3a      	ldr	r2, [r7, #32]
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	1ad3      	subs	r3, r2, r3
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	2300      	movs	r3, #0
 800b338:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b33a:	69b8      	ldr	r0, [r7, #24]
 800b33c:	f7ff feaf 	bl	800b09e <change_bitmap>
 800b340:	4603      	mov	r3, r0
 800b342:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800b344:	7ffb      	ldrb	r3, [r7, #31]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d001      	beq.n	800b34e <remove_chain+0x106>
 800b34a:	7ffb      	ldrb	r3, [r7, #31]
 800b34c:	e02c      	b.n	800b3a8 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	623b      	str	r3, [r7, #32]
 800b352:	6a3b      	ldr	r3, [r7, #32]
 800b354:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	429a      	cmp	r2, r3
 800b362:	d3a2      	bcc.n	800b2aa <remove_chain+0x62>
 800b364:	e000      	b.n	800b368 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800b366:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b04      	cmp	r3, #4
 800b36e:	d11a      	bne.n	800b3a6 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d103      	bne.n	800b37e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	71da      	strb	r2, [r3, #7]
 800b37c:	e013      	b.n	800b3a6 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	79db      	ldrb	r3, [r3, #7]
 800b382:	2b03      	cmp	r3, #3
 800b384:	d10f      	bne.n	800b3a6 <remove_chain+0x15e>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d30a      	bcc.n	800b3a6 <remove_chain+0x15e>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	689a      	ldr	r2, [r3, #8]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	4413      	add	r3, r2
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d802      	bhi.n	800b3a6 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3728      	adds	r7, #40	; 0x28
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b088      	sub	sp, #32
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d10d      	bne.n	800b3e2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d004      	beq.n	800b3dc <create_chain+0x2c>
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	6a1b      	ldr	r3, [r3, #32]
 800b3d6:	69ba      	ldr	r2, [r7, #24]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d31b      	bcc.n	800b414 <create_chain+0x64>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	61bb      	str	r3, [r7, #24]
 800b3e0:	e018      	b.n	800b414 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f7ff fb5d 	bl	800aaa4 <get_fat>
 800b3ea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d801      	bhi.n	800b3f6 <create_chain+0x46>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e0d9      	b.n	800b5aa <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fc:	d101      	bne.n	800b402 <create_chain+0x52>
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	e0d3      	b.n	800b5aa <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	6a1b      	ldr	r3, [r3, #32]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d201      	bcs.n	800b410 <create_chain+0x60>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	e0cc      	b.n	800b5aa <create_chain+0x1fa>
		scl = clst;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	2b04      	cmp	r3, #4
 800b41a:	d164      	bne.n	800b4e6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800b41c:	2201      	movs	r2, #1
 800b41e:	69b9      	ldr	r1, [r7, #24]
 800b420:	6938      	ldr	r0, [r7, #16]
 800b422:	f7ff fdb5 	bl	800af90 <find_bitmap>
 800b426:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d003      	beq.n	800b436 <create_chain+0x86>
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b434:	d101      	bne.n	800b43a <create_chain+0x8a>
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	e0b7      	b.n	800b5aa <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800b43a:	2301      	movs	r3, #1
 800b43c:	2201      	movs	r2, #1
 800b43e:	69f9      	ldr	r1, [r7, #28]
 800b440:	6938      	ldr	r0, [r7, #16]
 800b442:	f7ff fe2c 	bl	800b09e <change_bitmap>
 800b446:	4603      	mov	r3, r0
 800b448:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d101      	bne.n	800b454 <create_chain+0xa4>
 800b450:	2301      	movs	r3, #1
 800b452:	e0aa      	b.n	800b5aa <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d102      	bne.n	800b460 <create_chain+0xb0>
 800b45a:	f04f 33ff 	mov.w	r3, #4294967295
 800b45e:	e0a4      	b.n	800b5aa <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d103      	bne.n	800b46e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2202      	movs	r2, #2
 800b46a:	71da      	strb	r2, [r3, #7]
 800b46c:	e011      	b.n	800b492 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	79db      	ldrb	r3, [r3, #7]
 800b472:	2b02      	cmp	r3, #2
 800b474:	d10d      	bne.n	800b492 <create_chain+0xe2>
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	3301      	adds	r3, #1
 800b47a:	69fa      	ldr	r2, [r7, #28]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d008      	beq.n	800b492 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	1ad2      	subs	r2, r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2203      	movs	r2, #3
 800b490:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	79db      	ldrb	r3, [r3, #7]
 800b496:	2b02      	cmp	r3, #2
 800b498:	d064      	beq.n	800b564 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	3301      	adds	r3, #1
 800b49e:	69fa      	ldr	r2, [r7, #28]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d10b      	bne.n	800b4bc <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	69db      	ldr	r3, [r3, #28]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <create_chain+0x104>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	69db      	ldr	r3, [r3, #28]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	e000      	b.n	800b4b6 <create_chain+0x106>
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	61d3      	str	r3, [r2, #28]
 800b4ba:	e053      	b.n	800b564 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	69db      	ldr	r3, [r3, #28]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d102      	bne.n	800b4ca <create_chain+0x11a>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800b4ca:	69fa      	ldr	r2, [r7, #28]
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff fe89 	bl	800b1e6 <fill_last_frag>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d142      	bne.n	800b564 <create_chain+0x1b4>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	61da      	str	r2, [r3, #28]
 800b4e4:	e03e      	b.n	800b564 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	6a1b      	ldr	r3, [r3, #32]
 800b4f4:	69fa      	ldr	r2, [r7, #28]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d307      	bcc.n	800b50a <create_chain+0x15a>
				ncl = 2;
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b4fe:	69fa      	ldr	r2, [r7, #28]
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	429a      	cmp	r2, r3
 800b504:	d901      	bls.n	800b50a <create_chain+0x15a>
 800b506:	2300      	movs	r3, #0
 800b508:	e04f      	b.n	800b5aa <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b50a:	69f9      	ldr	r1, [r7, #28]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff fac9 	bl	800aaa4 <get_fat>
 800b512:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00e      	beq.n	800b538 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d003      	beq.n	800b528 <create_chain+0x178>
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b526:	d101      	bne.n	800b52c <create_chain+0x17c>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	e03e      	b.n	800b5aa <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800b52c:	69fa      	ldr	r2, [r7, #28]
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	429a      	cmp	r2, r3
 800b532:	d1da      	bne.n	800b4ea <create_chain+0x13a>
 800b534:	2300      	movs	r3, #0
 800b536:	e038      	b.n	800b5aa <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800b538:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b53a:	f04f 32ff 	mov.w	r2, #4294967295
 800b53e:	69f9      	ldr	r1, [r7, #28]
 800b540:	6938      	ldr	r0, [r7, #16]
 800b542:	f7ff fc03 	bl	800ad4c <put_fat>
 800b546:	4603      	mov	r3, r0
 800b548:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b54a:	7dfb      	ldrb	r3, [r7, #23]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d109      	bne.n	800b564 <create_chain+0x1b4>
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d006      	beq.n	800b564 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b556:	69fa      	ldr	r2, [r7, #28]
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6938      	ldr	r0, [r7, #16]
 800b55c:	f7ff fbf6 	bl	800ad4c <put_fat>
 800b560:	4603      	mov	r3, r0
 800b562:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b564:	7dfb      	ldrb	r3, [r7, #23]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d116      	bne.n	800b598 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	69fa      	ldr	r2, [r7, #28]
 800b56e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	69da      	ldr	r2, [r3, #28]
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	6a1b      	ldr	r3, [r3, #32]
 800b578:	3b02      	subs	r3, #2
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d804      	bhi.n	800b588 <create_chain+0x1d8>
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	69db      	ldr	r3, [r3, #28]
 800b582:	1e5a      	subs	r2, r3, #1
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	791b      	ldrb	r3, [r3, #4]
 800b58c:	f043 0301 	orr.w	r3, r3, #1
 800b590:	b2da      	uxtb	r2, r3
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	711a      	strb	r2, [r3, #4]
 800b596:	e007      	b.n	800b5a8 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b598:	7dfb      	ldrb	r3, [r7, #23]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d102      	bne.n	800b5a4 <create_chain+0x1f4>
 800b59e:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a2:	e000      	b.n	800b5a6 <create_chain+0x1f6>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b5a8:	69fb      	ldr	r3, [r7, #28]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3720      	adds	r7, #32
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b5b2:	b590      	push	{r4, r7, lr}
 800b5b4:	b089      	sub	sp, #36	; 0x24
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	60f8      	str	r0, [r7, #12]
 800b5ba:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	899b      	ldrh	r3, [r3, #12]
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	f04f 0400 	mov.w	r4, #0
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	4623      	mov	r3, r4
 800b5da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b5de:	f7f4 fdfb 	bl	80001d8 <__aeabi_uldivmod>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	4621      	mov	r1, r4
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	895b      	ldrh	r3, [r3, #10]
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	f04f 0400 	mov.w	r4, #0
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	4623      	mov	r3, r4
 800b5f8:	f7f4 fdee 	bl	80001d8 <__aeabi_uldivmod>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	460c      	mov	r4, r1
 800b600:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	1d1a      	adds	r2, r3, #4
 800b606:	61ba      	str	r2, [r7, #24]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <clmt_clust+0x64>
 800b612:	2300      	movs	r3, #0
 800b614:	e010      	b.n	800b638 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 800b616:	69fa      	ldr	r2, [r7, #28]
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d307      	bcc.n	800b62e <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 800b61e:	69fa      	ldr	r2, [r7, #28]
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	61fb      	str	r3, [r7, #28]
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	3304      	adds	r3, #4
 800b62a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b62c:	e7e9      	b.n	800b602 <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 800b62e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	4413      	add	r3, r2
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3724      	adds	r7, #36	; 0x24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd90      	pop	{r4, r7, pc}

0800b640 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	2b04      	cmp	r3, #4
 800b656:	d102      	bne.n	800b65e <dir_sdi+0x1e>
 800b658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b65c:	e001      	b.n	800b662 <dir_sdi+0x22>
 800b65e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d904      	bls.n	800b672 <dir_sdi+0x32>
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	f003 031f 	and.w	r3, r3, #31
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <dir_sdi+0x36>
		return FR_INT_ERR;
 800b672:	2302      	movs	r3, #2
 800b674:	e074      	b.n	800b760 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d109      	bne.n	800b69c <dir_sdi+0x5c>
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d905      	bls.n	800b69c <dir_sdi+0x5c>
		clst = fs->dirbase;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b694:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10c      	bne.n	800b6bc <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	095b      	lsrs	r3, r3, #5
 800b6a6:	693a      	ldr	r2, [r7, #16]
 800b6a8:	8912      	ldrh	r2, [r2, #8]
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d301      	bcc.n	800b6b2 <dir_sdi+0x72>
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	e056      	b.n	800b760 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	639a      	str	r2, [r3, #56]	; 0x38
 800b6ba:	e02d      	b.n	800b718 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	895b      	ldrh	r3, [r3, #10]
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	899b      	ldrh	r3, [r3, #12]
 800b6c6:	fb03 f302 	mul.w	r3, r3, r2
 800b6ca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b6cc:	e019      	b.n	800b702 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6979      	ldr	r1, [r7, #20]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff f9e6 	bl	800aaa4 <get_fat>
 800b6d8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e0:	d101      	bne.n	800b6e6 <dir_sdi+0xa6>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e03c      	b.n	800b760 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d904      	bls.n	800b6f6 <dir_sdi+0xb6>
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	6a1b      	ldr	r3, [r3, #32]
 800b6f0:	697a      	ldr	r2, [r7, #20]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d301      	bcc.n	800b6fa <dir_sdi+0xba>
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	e032      	b.n	800b760 <dir_sdi+0x120>
			ofs -= csz;
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	1ad3      	subs	r3, r2, r3
 800b700:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	429a      	cmp	r2, r3
 800b708:	d2e1      	bcs.n	800b6ce <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800b70a:	6979      	ldr	r1, [r7, #20]
 800b70c:	6938      	ldr	r0, [r7, #16]
 800b70e:	f7ff f9aa 	bl	800aa66 <clust2sect>
 800b712:	4602      	mov	r2, r0
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b722:	2b00      	cmp	r3, #0
 800b724:	d101      	bne.n	800b72a <dir_sdi+0xea>
 800b726:	2302      	movs	r3, #2
 800b728:	e01a      	b.n	800b760 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	899b      	ldrh	r3, [r3, #12]
 800b732:	4619      	mov	r1, r3
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	fbb3 f3f1 	udiv	r3, r3, r1
 800b73a:	441a      	add	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	899b      	ldrh	r3, [r3, #12]
 800b74a:	461a      	mov	r2, r3
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b752:	fb02 f200 	mul.w	r2, r2, r0
 800b756:	1a9b      	subs	r3, r3, r2
 800b758:	18ca      	adds	r2, r1, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3718      	adds	r7, #24
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b77c:	3320      	adds	r3, #32
 800b77e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00b      	beq.n	800b7a0 <dir_next+0x38>
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	2b04      	cmp	r3, #4
 800b78e:	d102      	bne.n	800b796 <dir_next+0x2e>
 800b790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b794:	e001      	b.n	800b79a <dir_next+0x32>
 800b796:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d801      	bhi.n	800b7a4 <dir_next+0x3c>
 800b7a0:	2304      	movs	r3, #4
 800b7a2:	e0c3      	b.n	800b92c <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	899b      	ldrh	r3, [r3, #12]
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7b0:	fb02 f201 	mul.w	r2, r2, r1
 800b7b4:	1a9b      	subs	r3, r3, r2
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f040 80a5 	bne.w	800b906 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c0:	1c5a      	adds	r2, r3, #1
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10b      	bne.n	800b7e6 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	095b      	lsrs	r3, r3, #5
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	8912      	ldrh	r2, [r2, #8]
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	f0c0 8095 	bcc.w	800b906 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	639a      	str	r2, [r3, #56]	; 0x38
 800b7e2:	2304      	movs	r3, #4
 800b7e4:	e0a2      	b.n	800b92c <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	899b      	ldrh	r3, [r3, #12]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	8952      	ldrh	r2, [r2, #10]
 800b7f6:	3a01      	subs	r2, #1
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f040 8083 	bne.w	800b906 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b806:	4619      	mov	r1, r3
 800b808:	4610      	mov	r0, r2
 800b80a:	f7ff f94b 	bl	800aaa4 <get_fat>
 800b80e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	2b01      	cmp	r3, #1
 800b814:	d801      	bhi.n	800b81a <dir_next+0xb2>
 800b816:	2302      	movs	r3, #2
 800b818:	e088      	b.n	800b92c <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b820:	d101      	bne.n	800b826 <dir_next+0xbe>
 800b822:	2301      	movs	r3, #1
 800b824:	e082      	b.n	800b92c <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	697a      	ldr	r2, [r7, #20]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d360      	bcc.n	800b8f2 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d104      	bne.n	800b840 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	639a      	str	r2, [r3, #56]	; 0x38
 800b83c:	2304      	movs	r3, #4
 800b83e:	e075      	b.n	800b92c <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b846:	4619      	mov	r1, r3
 800b848:	4610      	mov	r0, r2
 800b84a:	f7ff fdb1 	bl	800b3b0 <create_chain>
 800b84e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <dir_next+0xf2>
 800b856:	2307      	movs	r3, #7
 800b858:	e068      	b.n	800b92c <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d101      	bne.n	800b864 <dir_next+0xfc>
 800b860:	2302      	movs	r3, #2
 800b862:	e063      	b.n	800b92c <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86a:	d101      	bne.n	800b870 <dir_next+0x108>
 800b86c:	2301      	movs	r3, #1
 800b86e:	e05d      	b.n	800b92c <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	79db      	ldrb	r3, [r3, #7]
 800b874:	f043 0304 	orr.w	r3, r3, #4
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f7ff f880 	bl	800a984 <sync_window>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <dir_next+0x126>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e04e      	b.n	800b92c <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	899b      	ldrh	r3, [r3, #12]
 800b898:	461a      	mov	r2, r3
 800b89a:	2100      	movs	r1, #0
 800b89c:	f7fe fea9 	bl	800a5f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	613b      	str	r3, [r7, #16]
 800b8a4:	6979      	ldr	r1, [r7, #20]
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	f7ff f8dd 	bl	800aa66 <clust2sect>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	639a      	str	r2, [r3, #56]	; 0x38
 800b8b2:	e012      	b.n	800b8da <dir_next+0x172>
						fs->wflag = 1;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f7ff f862 	bl	800a984 <sync_window>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <dir_next+0x162>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e030      	b.n	800b92c <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	613b      	str	r3, [r7, #16]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d4:	1c5a      	adds	r2, r3, #1
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	639a      	str	r2, [r3, #56]	; 0x38
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	895b      	ldrh	r3, [r3, #10]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d3e6      	bcc.n	800b8b4 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	1ad2      	subs	r2, r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	697a      	ldr	r2, [r7, #20]
 800b8f6:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800b8f8:	6979      	ldr	r1, [r7, #20]
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f7ff f8b3 	bl	800aa66 <clust2sect>
 800b900:	4602      	mov	r2, r0
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	899b      	ldrh	r3, [r3, #12]
 800b916:	461a      	mov	r2, r3
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b91e:	fb02 f200 	mul.w	r2, r2, r0
 800b922:	1a9b      	subs	r3, r3, r2
 800b924:	18ca      	adds	r2, r1, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3718      	adds	r7, #24
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b086      	sub	sp, #24
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b944:	2100      	movs	r1, #0
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7ff fe7a 	bl	800b640 <dir_sdi>
 800b94c:	4603      	mov	r3, r0
 800b94e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b950:	7dfb      	ldrb	r3, [r7, #23]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d140      	bne.n	800b9d8 <dir_alloc+0xa4>
		n = 0;
 800b956:	2300      	movs	r3, #0
 800b958:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95e:	4619      	mov	r1, r3
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f7ff f853 	bl	800aa0c <move_window>
 800b966:	4603      	mov	r3, r0
 800b968:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b96a:	7dfb      	ldrb	r3, [r7, #23]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d132      	bne.n	800b9d6 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	2b04      	cmp	r3, #4
 800b976:	d108      	bne.n	800b98a <dir_alloc+0x56>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	b25b      	sxtb	r3, r3
 800b980:	43db      	mvns	r3, r3
 800b982:	b2db      	uxtb	r3, r3
 800b984:	09db      	lsrs	r3, r3, #7
 800b986:	b2db      	uxtb	r3, r3
 800b988:	e00f      	b.n	800b9aa <dir_alloc+0x76>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	2be5      	cmp	r3, #229	; 0xe5
 800b992:	d004      	beq.n	800b99e <dir_alloc+0x6a>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d101      	bne.n	800b9a2 <dir_alloc+0x6e>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e000      	b.n	800b9a4 <dir_alloc+0x70>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d007      	beq.n	800b9be <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	613b      	str	r3, [r7, #16]
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d102      	bne.n	800b9c2 <dir_alloc+0x8e>
 800b9bc:	e00c      	b.n	800b9d8 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b9be:	2300      	movs	r3, #0
 800b9c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b9c2:	2101      	movs	r1, #1
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff fecf 	bl	800b768 <dir_next>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b9ce:	7dfb      	ldrb	r3, [r7, #23]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d0c2      	beq.n	800b95a <dir_alloc+0x26>
 800b9d4:	e000      	b.n	800b9d8 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800b9d6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
 800b9da:	2b04      	cmp	r3, #4
 800b9dc:	d101      	bne.n	800b9e2 <dir_alloc+0xae>
 800b9de:	2307      	movs	r3, #7
 800b9e0:	75fb      	strb	r3, [r7, #23]
	return res;
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	331a      	adds	r3, #26
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fc12 	bl	800a224 <ld_word>
 800ba00:	4603      	mov	r3, r0
 800ba02:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	2b03      	cmp	r3, #3
 800ba0a:	d109      	bne.n	800ba20 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	3314      	adds	r3, #20
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe fc07 	bl	800a224 <ld_word>
 800ba16:	4603      	mov	r3, r0
 800ba18:	041b      	lsls	r3, r3, #16
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ba20:	68fb      	ldr	r3, [r7, #12]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	60f8      	str	r0, [r7, #12]
 800ba32:	60b9      	str	r1, [r7, #8]
 800ba34:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	331a      	adds	r3, #26
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	b292      	uxth	r2, r2
 800ba3e:	4611      	mov	r1, r2
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fe fce7 	bl	800a414 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b03      	cmp	r3, #3
 800ba4c:	d109      	bne.n	800ba62 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	f103 0214 	add.w	r2, r3, #20
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	0c1b      	lsrs	r3, r3, #16
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	f7fe fcd9 	bl	800a414 <st_word>
	}
}
 800ba62:	bf00      	nop
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
	...

0800ba6c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ba6c:	b590      	push	{r4, r7, lr}
 800ba6e:	b087      	sub	sp, #28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	331a      	adds	r3, #26
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fe fbd2 	bl	800a224 <ld_word>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <cmp_lfn+0x1e>
 800ba86:	2300      	movs	r3, #0
 800ba88:	e059      	b.n	800bb3e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba92:	1e5a      	subs	r2, r3, #1
 800ba94:	4613      	mov	r3, r2
 800ba96:	005b      	lsls	r3, r3, #1
 800ba98:	4413      	add	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800baa0:	2301      	movs	r3, #1
 800baa2:	81fb      	strh	r3, [r7, #14]
 800baa4:	2300      	movs	r3, #0
 800baa6:	613b      	str	r3, [r7, #16]
 800baa8:	e033      	b.n	800bb12 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800baaa:	4a27      	ldr	r2, [pc, #156]	; (800bb48 <cmp_lfn+0xdc>)
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	4413      	add	r3, r2
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	461a      	mov	r2, r3
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	4413      	add	r3, r2
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fe fbb3 	bl	800a224 <ld_word>
 800babe:	4603      	mov	r3, r0
 800bac0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bac2:	89fb      	ldrh	r3, [r7, #14]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d01a      	beq.n	800bafe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	2bfe      	cmp	r3, #254	; 0xfe
 800bacc:	d812      	bhi.n	800baf4 <cmp_lfn+0x88>
 800bace:	89bb      	ldrh	r3, [r7, #12]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f003 f941 	bl	800ed58 <ff_wtoupper>
 800bad6:	4603      	mov	r3, r0
 800bad8:	461c      	mov	r4, r3
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	1c5a      	adds	r2, r3, #1
 800bade:	617a      	str	r2, [r7, #20]
 800bae0:	005b      	lsls	r3, r3, #1
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	4413      	add	r3, r2
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	4618      	mov	r0, r3
 800baea:	f003 f935 	bl	800ed58 <ff_wtoupper>
 800baee:	4603      	mov	r3, r0
 800baf0:	429c      	cmp	r4, r3
 800baf2:	d001      	beq.n	800baf8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800baf4:	2300      	movs	r3, #0
 800baf6:	e022      	b.n	800bb3e <cmp_lfn+0xd2>
			}
			wc = uc;
 800baf8:	89bb      	ldrh	r3, [r7, #12]
 800bafa:	81fb      	strh	r3, [r7, #14]
 800bafc:	e006      	b.n	800bb0c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bafe:	89bb      	ldrh	r3, [r7, #12]
 800bb00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d001      	beq.n	800bb0c <cmp_lfn+0xa0>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e018      	b.n	800bb3e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	613b      	str	r3, [r7, #16]
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	2b0c      	cmp	r3, #12
 800bb16:	d9c8      	bls.n	800baaa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00b      	beq.n	800bb3c <cmp_lfn+0xd0>
 800bb24:	89fb      	ldrh	r3, [r7, #14]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d008      	beq.n	800bb3c <cmp_lfn+0xd0>
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	005b      	lsls	r3, r3, #1
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	4413      	add	r3, r2
 800bb32:	881b      	ldrh	r3, [r3, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <cmp_lfn+0xd0>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	e000      	b.n	800bb3e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bb3c:	2301      	movs	r3, #1
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	371c      	adds	r7, #28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd90      	pop	{r4, r7, pc}
 800bb46:	bf00      	nop
 800bb48:	0800fb04 	.word	0x0800fb04

0800bb4c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	331a      	adds	r3, #26
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fe fb62 	bl	800a224 <ld_word>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <pick_lfn+0x1e>
 800bb66:	2300      	movs	r3, #0
 800bb68:	e04d      	b.n	800bc06 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb72:	1e5a      	subs	r2, r3, #1
 800bb74:	4613      	mov	r3, r2
 800bb76:	005b      	lsls	r3, r3, #1
 800bb78:	4413      	add	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	4413      	add	r3, r2
 800bb7e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb80:	2301      	movs	r3, #1
 800bb82:	81fb      	strh	r3, [r7, #14]
 800bb84:	2300      	movs	r3, #0
 800bb86:	613b      	str	r3, [r7, #16]
 800bb88:	e028      	b.n	800bbdc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bb8a:	4a21      	ldr	r2, [pc, #132]	; (800bc10 <pick_lfn+0xc4>)
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	4413      	add	r3, r2
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	461a      	mov	r2, r3
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	4413      	add	r3, r2
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fe fb43 	bl	800a224 <ld_word>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bba2:	89fb      	ldrh	r3, [r7, #14]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00f      	beq.n	800bbc8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	2bfe      	cmp	r3, #254	; 0xfe
 800bbac:	d901      	bls.n	800bbb2 <pick_lfn+0x66>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	e029      	b.n	800bc06 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bbb2:	89bb      	ldrh	r3, [r7, #12]
 800bbb4:	81fb      	strh	r3, [r7, #14]
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	1c5a      	adds	r2, r3, #1
 800bbba:	617a      	str	r2, [r7, #20]
 800bbbc:	005b      	lsls	r3, r3, #1
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	89fa      	ldrh	r2, [r7, #14]
 800bbc4:	801a      	strh	r2, [r3, #0]
 800bbc6:	e006      	b.n	800bbd6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bbc8:	89bb      	ldrh	r3, [r7, #12]
 800bbca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d001      	beq.n	800bbd6 <pick_lfn+0x8a>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	e017      	b.n	800bc06 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	613b      	str	r3, [r7, #16]
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	2b0c      	cmp	r3, #12
 800bbe0:	d9d3      	bls.n	800bb8a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00a      	beq.n	800bc04 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	2bfe      	cmp	r3, #254	; 0xfe
 800bbf2:	d901      	bls.n	800bbf8 <pick_lfn+0xac>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e006      	b.n	800bc06 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	005b      	lsls	r3, r3, #1
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	4413      	add	r3, r2
 800bc00:	2200      	movs	r2, #0
 800bc02:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800bc04:	2301      	movs	r3, #1
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3718      	adds	r7, #24
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	0800fb04 	.word	0x0800fb04

0800bc14 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	4611      	mov	r1, r2
 800bc20:	461a      	mov	r2, r3
 800bc22:	460b      	mov	r3, r1
 800bc24:	71fb      	strb	r3, [r7, #7]
 800bc26:	4613      	mov	r3, r2
 800bc28:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	330d      	adds	r3, #13
 800bc2e:	79ba      	ldrb	r2, [r7, #6]
 800bc30:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	330b      	adds	r3, #11
 800bc36:	220f      	movs	r2, #15
 800bc38:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	330c      	adds	r3, #12
 800bc3e:	2200      	movs	r2, #0
 800bc40:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	331a      	adds	r3, #26
 800bc46:	2100      	movs	r1, #0
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fe fbe3 	bl	800a414 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bc4e:	79fb      	ldrb	r3, [r7, #7]
 800bc50:	1e5a      	subs	r2, r3, #1
 800bc52:	4613      	mov	r3, r2
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	4413      	add	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	4413      	add	r3, r2
 800bc5c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	82fb      	strh	r3, [r7, #22]
 800bc62:	2300      	movs	r3, #0
 800bc64:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bc66:	8afb      	ldrh	r3, [r7, #22]
 800bc68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d007      	beq.n	800bc80 <put_lfn+0x6c>
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	1c5a      	adds	r2, r3, #1
 800bc74:	61fa      	str	r2, [r7, #28]
 800bc76:	005b      	lsls	r3, r3, #1
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bc80:	4a17      	ldr	r2, [pc, #92]	; (800bce0 <put_lfn+0xcc>)
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	4413      	add	r3, r2
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	461a      	mov	r2, r3
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	8afa      	ldrh	r2, [r7, #22]
 800bc90:	4611      	mov	r1, r2
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fe fbbe 	bl	800a414 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bc98:	8afb      	ldrh	r3, [r7, #22]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d102      	bne.n	800bca4 <put_lfn+0x90>
 800bc9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bca2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	3301      	adds	r3, #1
 800bca8:	61bb      	str	r3, [r7, #24]
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	2b0c      	cmp	r3, #12
 800bcae:	d9da      	bls.n	800bc66 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bcb0:	8afb      	ldrh	r3, [r7, #22]
 800bcb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d006      	beq.n	800bcc8 <put_lfn+0xb4>
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	881b      	ldrh	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d103      	bne.n	800bcd0 <put_lfn+0xbc>
 800bcc8:	79fb      	ldrb	r3, [r7, #7]
 800bcca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcce:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	79fa      	ldrb	r2, [r7, #7]
 800bcd4:	701a      	strb	r2, [r3, #0]
}
 800bcd6:	bf00      	nop
 800bcd8:	3720      	adds	r7, #32
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	0800fb04 	.word	0x0800fb04

0800bce4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b08c      	sub	sp, #48	; 0x30
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
 800bcf0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bcf2:	220b      	movs	r2, #11
 800bcf4:	68b9      	ldr	r1, [r7, #8]
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f7fe fc5a 	bl	800a5b0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	2b05      	cmp	r3, #5
 800bd00:	d92b      	bls.n	800bd5a <gen_numname+0x76>
		sr = seq;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bd06:	e022      	b.n	800bd4e <gen_numname+0x6a>
			wc = *lfn++;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	1c9a      	adds	r2, r3, #2
 800bd0c:	607a      	str	r2, [r7, #4]
 800bd0e:	881b      	ldrh	r3, [r3, #0]
 800bd10:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bd12:	2300      	movs	r3, #0
 800bd14:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd16:	e017      	b.n	800bd48 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	005a      	lsls	r2, r3, #1
 800bd1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd1e:	f003 0301 	and.w	r3, r3, #1
 800bd22:	4413      	add	r3, r2
 800bd24:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bd26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd28:	085b      	lsrs	r3, r3, #1
 800bd2a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d005      	beq.n	800bd42 <gen_numname+0x5e>
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bd3c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bd40:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	3301      	adds	r3, #1
 800bd46:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4a:	2b0f      	cmp	r3, #15
 800bd4c:	d9e4      	bls.n	800bd18 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1d8      	bne.n	800bd08 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bd5a:	2307      	movs	r3, #7
 800bd5c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	f003 030f 	and.w	r3, r3, #15
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	3330      	adds	r3, #48	; 0x30
 800bd6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bd6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd72:	2b39      	cmp	r3, #57	; 0x39
 800bd74:	d904      	bls.n	800bd80 <gen_numname+0x9c>
 800bd76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd7a:	3307      	adds	r3, #7
 800bd7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd82:	1e5a      	subs	r2, r3, #1
 800bd84:	62ba      	str	r2, [r7, #40]	; 0x28
 800bd86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bd90:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	091b      	lsrs	r3, r3, #4
 800bd98:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1de      	bne.n	800bd5e <gen_numname+0x7a>
	ns[i] = '~';
 800bda0:	f107 0214 	add.w	r2, r7, #20
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	4413      	add	r3, r2
 800bda8:	227e      	movs	r2, #126	; 0x7e
 800bdaa:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bdac:	2300      	movs	r3, #0
 800bdae:	627b      	str	r3, [r7, #36]	; 0x24
 800bdb0:	e002      	b.n	800bdb8 <gen_numname+0xd4>
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	627b      	str	r3, [r7, #36]	; 0x24
 800bdb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d205      	bcs.n	800bdcc <gen_numname+0xe8>
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	4413      	add	r3, r2
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	2b20      	cmp	r3, #32
 800bdca:	d1f2      	bne.n	800bdb2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	2b07      	cmp	r3, #7
 800bdd0:	d808      	bhi.n	800bde4 <gen_numname+0x100>
 800bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd4:	1c5a      	adds	r2, r3, #1
 800bdd6:	62ba      	str	r2, [r7, #40]	; 0x28
 800bdd8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bddc:	4413      	add	r3, r2
 800bdde:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bde2:	e000      	b.n	800bde6 <gen_numname+0x102>
 800bde4:	2120      	movs	r1, #32
 800bde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde8:	1c5a      	adds	r2, r3, #1
 800bdea:	627a      	str	r2, [r7, #36]	; 0x24
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	4413      	add	r3, r2
 800bdf0:	460a      	mov	r2, r1
 800bdf2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	2b07      	cmp	r3, #7
 800bdf8:	d9e8      	bls.n	800bdcc <gen_numname+0xe8>
}
 800bdfa:	bf00      	nop
 800bdfc:	3730      	adds	r7, #48	; 0x30
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800be02:	b480      	push	{r7}
 800be04:	b085      	sub	sp, #20
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800be0e:	230b      	movs	r3, #11
 800be10:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800be12:	7bfb      	ldrb	r3, [r7, #15]
 800be14:	b2da      	uxtb	r2, r3
 800be16:	0852      	lsrs	r2, r2, #1
 800be18:	01db      	lsls	r3, r3, #7
 800be1a:	4313      	orrs	r3, r2
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	1c59      	adds	r1, r3, #1
 800be22:	6079      	str	r1, [r7, #4]
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	4413      	add	r3, r2
 800be28:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	60bb      	str	r3, [r7, #8]
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1ed      	bne.n	800be12 <sum_sfn+0x10>
	return sum;
 800be36:	7bfb      	ldrb	r3, [r7, #15]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800be44:	b480      	push	{r7}
 800be46:	b087      	sub	sp, #28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	3301      	adds	r3, #1
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	3301      	adds	r3, #1
 800be54:	015b      	lsls	r3, r3, #5
 800be56:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800be58:	2300      	movs	r3, #0
 800be5a:	827b      	strh	r3, [r7, #18]
 800be5c:	2300      	movs	r3, #0
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	e018      	b.n	800be94 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	2b02      	cmp	r3, #2
 800be66:	d103      	bne.n	800be70 <xdir_sum+0x2c>
			i++;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	3301      	adds	r3, #1
 800be6c:	617b      	str	r3, [r7, #20]
 800be6e:	e00e      	b.n	800be8e <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800be70:	8a7b      	ldrh	r3, [r7, #18]
 800be72:	03db      	lsls	r3, r3, #15
 800be74:	b29a      	uxth	r2, r3
 800be76:	8a7b      	ldrh	r3, [r7, #18]
 800be78:	085b      	lsrs	r3, r3, #1
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	4413      	add	r3, r2
 800be7e:	b29a      	uxth	r2, r3
 800be80:	6879      	ldr	r1, [r7, #4]
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	440b      	add	r3, r1
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	b29b      	uxth	r3, r3
 800be8a:	4413      	add	r3, r2
 800be8c:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	3301      	adds	r3, #1
 800be92:	617b      	str	r3, [r7, #20]
 800be94:	697a      	ldr	r2, [r7, #20]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d3e2      	bcc.n	800be62 <xdir_sum+0x1e>
		}
	}
	return sum;
 800be9c:	8a7b      	ldrh	r3, [r7, #18]
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	371c      	adds	r7, #28
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b084      	sub	sp, #16
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800beb6:	e01f      	b.n	800bef8 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800beb8:	89bb      	ldrh	r3, [r7, #12]
 800beba:	4618      	mov	r0, r3
 800bebc:	f002 ff4c 	bl	800ed58 <ff_wtoupper>
 800bec0:	4603      	mov	r3, r0
 800bec2:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800bec4:	89fb      	ldrh	r3, [r7, #14]
 800bec6:	03db      	lsls	r3, r3, #15
 800bec8:	b29a      	uxth	r2, r3
 800beca:	89fb      	ldrh	r3, [r7, #14]
 800becc:	085b      	lsrs	r3, r3, #1
 800bece:	b29b      	uxth	r3, r3
 800bed0:	4413      	add	r3, r2
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	89bb      	ldrh	r3, [r7, #12]
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	b29b      	uxth	r3, r3
 800beda:	4413      	add	r3, r2
 800bedc:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800bede:	89fb      	ldrh	r3, [r7, #14]
 800bee0:	03db      	lsls	r3, r3, #15
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	89fb      	ldrh	r3, [r7, #14]
 800bee6:	085b      	lsrs	r3, r3, #1
 800bee8:	b29b      	uxth	r3, r3
 800beea:	4413      	add	r3, r2
 800beec:	b29a      	uxth	r2, r3
 800beee:	89bb      	ldrh	r3, [r7, #12]
 800bef0:	0a1b      	lsrs	r3, r3, #8
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	4413      	add	r3, r2
 800bef6:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	1c9a      	adds	r2, r3, #2
 800befc:	607a      	str	r2, [r7, #4]
 800befe:	881b      	ldrh	r3, [r3, #0]
 800bf00:	81bb      	strh	r3, [r7, #12]
 800bf02:	89bb      	ldrh	r3, [r7, #12]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d1d7      	bne.n	800beb8 <xname_sum+0xe>
	}
	return sum;
 800bf08:	89fb      	ldrh	r3, [r7, #14]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800bf12:	b590      	push	{r4, r7, lr}
 800bf14:	b087      	sub	sp, #28
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bf20:	2340      	movs	r3, #64	; 0x40
 800bf22:	613b      	str	r3, [r7, #16]
 800bf24:	2300      	movs	r3, #0
 800bf26:	60fb      	str	r3, [r7, #12]
 800bf28:	e02c      	b.n	800bf84 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	f003 031f 	and.w	r3, r3, #31
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d102      	bne.n	800bf3a <get_xdir_info+0x28>
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	3302      	adds	r3, #2
 800bf38:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	4413      	add	r3, r2
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fe f96f 	bl	800a224 <ld_word>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2100      	movs	r1, #0
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f002 fec8 	bl	800ece0 <ff_convert>
 800bf50:	4603      	mov	r3, r0
 800bf52:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800bf54:	897b      	ldrh	r3, [r7, #10]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d002      	beq.n	800bf60 <get_xdir_info+0x4e>
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2bfe      	cmp	r3, #254	; 0xfe
 800bf5e:	d902      	bls.n	800bf66 <get_xdir_info+0x54>
 800bf60:	2300      	movs	r3, #0
 800bf62:	617b      	str	r3, [r7, #20]
 800bf64:	e015      	b.n	800bf92 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	1c5a      	adds	r2, r3, #1
 800bf6a:	617a      	str	r2, [r7, #20]
 800bf6c:	897a      	ldrh	r2, [r7, #10]
 800bf6e:	b2d1      	uxtb	r1, r2
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	4413      	add	r3, r2
 800bf74:	460a      	mov	r2, r1
 800bf76:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	3302      	adds	r3, #2
 800bf7c:	613b      	str	r3, [r7, #16]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	3301      	adds	r3, #1
 800bf82:	60fb      	str	r3, [r7, #12]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	3323      	adds	r3, #35	; 0x23
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d3cb      	bcc.n	800bf2a <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d106      	bne.n	800bfa6 <get_xdir_info+0x94>
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	617a      	str	r2, [r7, #20]
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	223f      	movs	r2, #63	; 0x3f
 800bfa4:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	4413      	add	r3, r2
 800bfac:	331a      	adds	r3, #26
 800bfae:	2200      	movs	r2, #0
 800bfb0:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	791a      	ldrb	r2, [r3, #4]
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	7b1b      	ldrb	r3, [r3, #12]
 800bfc4:	f003 0310 	and.w	r3, r3, #16
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d107      	bne.n	800bfdc <get_xdir_info+0xca>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	3338      	adds	r3, #56	; 0x38
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fe f962 	bl	800a29a <ld_qword>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	460c      	mov	r4, r1
 800bfda:	e003      	b.n	800bfe4 <get_xdir_info+0xd2>
 800bfdc:	f04f 0300 	mov.w	r3, #0
 800bfe0:	f04f 0400 	mov.w	r4, #0
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	e9c2 3400 	strd	r3, r4, [r2]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	330c      	adds	r3, #12
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fe f918 	bl	800a224 <ld_word>
 800bff4:	4603      	mov	r3, r0
 800bff6:	461a      	mov	r2, r3
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	330e      	adds	r3, #14
 800c000:	4618      	mov	r0, r3
 800c002:	f7fe f90f 	bl	800a224 <ld_word>
 800c006:	4603      	mov	r3, r0
 800c008:	461a      	mov	r2, r3
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	811a      	strh	r2, [r3, #8]
}
 800c00e:	bf00      	nop
 800c010:	371c      	adds	r7, #28
 800c012:	46bd      	mov	sp, r7
 800c014:	bd90      	pop	{r4, r7, pc}
	...

0800c018 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800c018:	b590      	push	{r4, r7, lr}
 800c01a:	b087      	sub	sp, #28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c030:	4619      	mov	r1, r3
 800c032:	4610      	mov	r0, r2
 800c034:	f7fe fcea 	bl	800aa0c <move_window>
 800c038:	4603      	mov	r3, r0
 800c03a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c03c:	7bfb      	ldrb	r3, [r7, #15]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d001      	beq.n	800c046 <load_xdir+0x2e>
 800c042:	7bfb      	ldrb	r3, [r7, #15]
 800c044:	e09f      	b.n	800c186 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	2b85      	cmp	r3, #133	; 0x85
 800c04e:	d001      	beq.n	800c054 <load_xdir+0x3c>
 800c050:	2302      	movs	r3, #2
 800c052:	e098      	b.n	800c186 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c058:	2220      	movs	r2, #32
 800c05a:	4619      	mov	r1, r3
 800c05c:	6938      	ldr	r0, [r7, #16]
 800c05e:	f7fe faa7 	bl	800a5b0 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	3301      	adds	r3, #1
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	3301      	adds	r3, #1
 800c06a:	015b      	lsls	r3, r3, #5
 800c06c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	2b5f      	cmp	r3, #95	; 0x5f
 800c072:	d903      	bls.n	800c07c <load_xdir+0x64>
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c07a:	d901      	bls.n	800c080 <load_xdir+0x68>
 800c07c:	2302      	movs	r3, #2
 800c07e:	e082      	b.n	800c186 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800c080:	2100      	movs	r1, #0
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f7ff fb70 	bl	800b768 <dir_next>
 800c088:	4603      	mov	r3, r0
 800c08a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c08c:	7bfb      	ldrb	r3, [r7, #15]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <load_xdir+0x7e>
 800c092:	7bfb      	ldrb	r3, [r7, #15]
 800c094:	e077      	b.n	800c186 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09e:	4619      	mov	r1, r3
 800c0a0:	4610      	mov	r0, r2
 800c0a2:	f7fe fcb3 	bl	800aa0c <move_window>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c0aa:	7bfb      	ldrb	r3, [r7, #15]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d001      	beq.n	800c0b4 <load_xdir+0x9c>
 800c0b0:	7bfb      	ldrb	r3, [r7, #15]
 800c0b2:	e068      	b.n	800c186 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	2bc0      	cmp	r3, #192	; 0xc0
 800c0bc:	d001      	beq.n	800c0c2 <load_xdir+0xaa>
 800c0be:	2302      	movs	r3, #2
 800c0c0:	e061      	b.n	800c186 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	f103 0020 	add.w	r0, r3, #32
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0cc:	2220      	movs	r2, #32
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	f7fe fa6e 	bl	800a5b0 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	3323      	adds	r3, #35	; 0x23
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	332c      	adds	r3, #44	; 0x2c
 800c0dc:	4a2c      	ldr	r2, [pc, #176]	; (800c190 <load_xdir+0x178>)
 800c0de:	fba2 2303 	umull	r2, r3, r2, r3
 800c0e2:	08db      	lsrs	r3, r3, #3
 800c0e4:	015b      	lsls	r3, r3, #5
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d201      	bcs.n	800c0f0 <load_xdir+0xd8>
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	e04a      	b.n	800c186 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800c0f0:	2340      	movs	r3, #64	; 0x40
 800c0f2:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7ff fb36 	bl	800b768 <dir_next>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800c100:	7bfb      	ldrb	r3, [r7, #15]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <load_xdir+0xf2>
 800c106:	7bfb      	ldrb	r3, [r7, #15]
 800c108:	e03d      	b.n	800c186 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c112:	4619      	mov	r1, r3
 800c114:	4610      	mov	r0, r2
 800c116:	f7fe fc79 	bl	800aa0c <move_window>
 800c11a:	4603      	mov	r3, r0
 800c11c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800c11e:	7bfb      	ldrb	r3, [r7, #15]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <load_xdir+0x110>
 800c124:	7bfb      	ldrb	r3, [r7, #15]
 800c126:	e02e      	b.n	800c186 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	2bc1      	cmp	r3, #193	; 0xc1
 800c130:	d001      	beq.n	800c136 <load_xdir+0x11e>
 800c132:	2302      	movs	r3, #2
 800c134:	e027      	b.n	800c186 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c13c:	d208      	bcs.n	800c150 <load_xdir+0x138>
 800c13e:	693a      	ldr	r2, [r7, #16]
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	18d0      	adds	r0, r2, r3
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c148:	2220      	movs	r2, #32
 800c14a:	4619      	mov	r1, r3
 800c14c:	f7fe fa30 	bl	800a5b0 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	3320      	adds	r3, #32
 800c154:	617b      	str	r3, [r7, #20]
 800c156:	697a      	ldr	r2, [r7, #20]
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d3ca      	bcc.n	800c0f4 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c164:	d80e      	bhi.n	800c184 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800c166:	6938      	ldr	r0, [r7, #16]
 800c168:	f7ff fe6c 	bl	800be44 <xdir_sum>
 800c16c:	4603      	mov	r3, r0
 800c16e:	461c      	mov	r4, r3
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	3302      	adds	r3, #2
 800c174:	4618      	mov	r0, r3
 800c176:	f7fe f855 	bl	800a224 <ld_word>
 800c17a:	4603      	mov	r3, r0
 800c17c:	429c      	cmp	r4, r3
 800c17e:	d001      	beq.n	800c184 <load_xdir+0x16c>
 800c180:	2302      	movs	r3, #2
 800c182:	e000      	b.n	800c186 <load_xdir+0x16e>
	}
	return FR_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	371c      	adds	r7, #28
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd90      	pop	{r4, r7, pc}
 800c18e:	bf00      	nop
 800c190:	88888889 	.word	0x88888889

0800c194 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800c194:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c198:	b084      	sub	sp, #16
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	6a1a      	ldr	r2, [r3, #32]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b4:	b2da      	uxtb	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1be:	469b      	mov	fp, r3
 800c1c0:	f04f 0c00 	mov.w	ip, #0
 800c1c4:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800c1c8:	f04f 0200 	mov.w	r2, #0
 800c1cc:	ea0b 0301 	and.w	r3, fp, r1
 800c1d0:	ea0c 0402 	and.w	r4, ip, r2
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f7ff fa29 	bl	800b640 <dir_sdi>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d104      	bne.n	800c202 <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7ff ff0d 	bl	800c018 <load_xdir>
 800c1fe:	4603      	mov	r3, r0
 800c200:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800c202:	7bfb      	ldrb	r3, [r7, #15]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800c20e <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800c20e:	b590      	push	{r4, r7, lr}
 800c210:	b087      	sub	sp, #28
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	695b      	ldr	r3, [r3, #20]
 800c21c:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	1c9c      	adds	r4, r3, #2
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f7ff fe0e 	bl	800be44 <xdir_sum>
 800c228:	4603      	mov	r3, r0
 800c22a:	4619      	mov	r1, r3
 800c22c:	4620      	mov	r0, r4
 800c22e:	f7fe f8f1 	bl	800a414 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3301      	adds	r3, #1
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	3301      	adds	r3, #1
 800c23a:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c240:	4619      	mov	r1, r3
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f7ff f9fc 	bl	800b640 <dir_sdi>
 800c248:	4603      	mov	r3, r0
 800c24a:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c24c:	e026      	b.n	800c29c <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c256:	4619      	mov	r1, r3
 800c258:	4610      	mov	r0, r2
 800c25a:	f7fe fbd7 	bl	800aa0c <move_window>
 800c25e:	4603      	mov	r3, r0
 800c260:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c262:	7dfb      	ldrb	r3, [r7, #23]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d11d      	bne.n	800c2a4 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c26c:	2220      	movs	r2, #32
 800c26e:	68f9      	ldr	r1, [r7, #12]
 800c270:	4618      	mov	r0, r3
 800c272:	f7fe f99d 	bl	800a5b0 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2201      	movs	r2, #1
 800c27c:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	3b01      	subs	r3, #1
 800c282:	613b      	str	r3, [r7, #16]
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00e      	beq.n	800c2a8 <store_xdir+0x9a>
		dirb += SZDIRE;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	3320      	adds	r3, #32
 800c28e:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800c290:	2100      	movs	r1, #0
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f7ff fa68 	bl	800b768 <dir_next>
 800c298:	4603      	mov	r3, r0
 800c29a:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c29c:	7dfb      	ldrb	r3, [r7, #23]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d0d5      	beq.n	800c24e <store_xdir+0x40>
 800c2a2:	e002      	b.n	800c2aa <store_xdir+0x9c>
		if (res != FR_OK) break;
 800c2a4:	bf00      	nop
 800c2a6:	e000      	b.n	800c2aa <store_xdir+0x9c>
		if (--nent == 0) break;
 800c2a8:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <store_xdir+0xa8>
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d101      	bne.n	800c2ba <store_xdir+0xac>
 800c2b6:	7dfb      	ldrb	r3, [r7, #23]
 800c2b8:	e000      	b.n	800c2bc <store_xdir+0xae>
 800c2ba:	2302      	movs	r3, #2
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	371c      	adds	r7, #28
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd90      	pop	{r4, r7, pc}

0800c2c4 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800c2c4:	b590      	push	{r4, r7, lr}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800c2ce:	2240      	movs	r2, #64	; 0x40
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7fe f98d 	bl	800a5f2 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2285      	movs	r2, #133	; 0x85
 800c2dc:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	3320      	adds	r3, #32
 800c2e2:	22c0      	movs	r2, #192	; 0xc0
 800c2e4:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	72bb      	strb	r3, [r7, #10]
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	72fb      	strb	r3, [r7, #11]
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	813b      	strh	r3, [r7, #8]
 800c2f2:	2340      	movs	r3, #64	; 0x40
 800c2f4:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	1c5a      	adds	r2, r3, #1
 800c2fa:	60fa      	str	r2, [r7, #12]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	4413      	add	r3, r2
 800c300:	22c1      	movs	r2, #193	; 0xc1
 800c302:	701a      	strb	r2, [r3, #0]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	1c5a      	adds	r2, r3, #1
 800c308:	60fa      	str	r2, [r7, #12]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	4413      	add	r3, r2
 800c30e:	2200      	movs	r2, #0
 800c310:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800c312:	893b      	ldrh	r3, [r7, #8]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d00b      	beq.n	800c330 <create_xdir+0x6c>
 800c318:	7abb      	ldrb	r3, [r7, #10]
 800c31a:	005b      	lsls	r3, r3, #1
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	4413      	add	r3, r2
 800c320:	881b      	ldrh	r3, [r3, #0]
 800c322:	813b      	strh	r3, [r7, #8]
 800c324:	893b      	ldrh	r3, [r7, #8]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d002      	beq.n	800c330 <create_xdir+0x6c>
 800c32a:	7abb      	ldrb	r3, [r7, #10]
 800c32c:	3301      	adds	r3, #1
 800c32e:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	4413      	add	r3, r2
 800c336:	893a      	ldrh	r2, [r7, #8]
 800c338:	4611      	mov	r1, r2
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fe f86a 	bl	800a414 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	3302      	adds	r3, #2
 800c344:	60fb      	str	r3, [r7, #12]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f003 031f 	and.w	r3, r3, #31
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1e0      	bne.n	800c312 <create_xdir+0x4e>
		nb++;
 800c350:	7afb      	ldrb	r3, [r7, #11]
 800c352:	3301      	adds	r3, #1
 800c354:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800c356:	7abb      	ldrb	r3, [r7, #10]
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	683a      	ldr	r2, [r7, #0]
 800c35c:	4413      	add	r3, r2
 800c35e:	881b      	ldrh	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1c8      	bne.n	800c2f6 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	3323      	adds	r3, #35	; 0x23
 800c368:	7aba      	ldrb	r2, [r7, #10]
 800c36a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	3301      	adds	r3, #1
 800c370:	7afa      	ldrb	r2, [r7, #11]
 800c372:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800c37a:	6838      	ldr	r0, [r7, #0]
 800c37c:	f7ff fd95 	bl	800beaa <xname_sum>
 800c380:	4603      	mov	r3, r0
 800c382:	4619      	mov	r1, r3
 800c384:	4620      	mov	r0, r4
 800c386:	f7fe f845 	bl	800a414 <st_word>
}
 800c38a:	bf00      	nop
 800c38c:	3714      	adds	r7, #20
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd90      	pop	{r4, r7, pc}

0800c392 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b086      	sub	sp, #24
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c39c:	2304      	movs	r3, #4
 800c39e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c3a6:	23ff      	movs	r3, #255	; 0xff
 800c3a8:	757b      	strb	r3, [r7, #21]
 800c3aa:	23ff      	movs	r3, #255	; 0xff
 800c3ac:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c3ae:	e09f      	b.n	800c4f0 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	6938      	ldr	r0, [r7, #16]
 800c3b8:	f7fe fb28 	bl	800aa0c <move_window>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c3c0:	7dfb      	ldrb	r3, [r7, #23]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f040 809a 	bne.w	800c4fc <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c3d0:	7dbb      	ldrb	r3, [r7, #22]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d102      	bne.n	800c3dc <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c3d6:	2304      	movs	r3, #4
 800c3d8:	75fb      	strb	r3, [r7, #23]
 800c3da:	e096      	b.n	800c50a <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	2b04      	cmp	r3, #4
 800c3e2:	d118      	bne.n	800c416 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800c3e4:	7dbb      	ldrb	r3, [r7, #22]
 800c3e6:	2b85      	cmp	r3, #133	; 0x85
 800c3e8:	d179      	bne.n	800c4de <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7ff fe10 	bl	800c018 <load_xdir>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d17e      	bne.n	800c500 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	3304      	adds	r3, #4
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c40e:	b2da      	uxtb	r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	719a      	strb	r2, [r3, #6]
					}
					break;
 800c414:	e074      	b.n	800c500 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c41a:	330b      	adds	r3, #11
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c422:	73fb      	strb	r3, [r7, #15]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	7bfa      	ldrb	r2, [r7, #15]
 800c428:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c42a:	7dbb      	ldrb	r3, [r7, #22]
 800c42c:	2be5      	cmp	r3, #229	; 0xe5
 800c42e:	d00e      	beq.n	800c44e <dir_read+0xbc>
 800c430:	7dbb      	ldrb	r3, [r7, #22]
 800c432:	2b2e      	cmp	r3, #46	; 0x2e
 800c434:	d00b      	beq.n	800c44e <dir_read+0xbc>
 800c436:	7bfb      	ldrb	r3, [r7, #15]
 800c438:	f023 0320 	bic.w	r3, r3, #32
 800c43c:	2b08      	cmp	r3, #8
 800c43e:	bf0c      	ite	eq
 800c440:	2301      	moveq	r3, #1
 800c442:	2300      	movne	r3, #0
 800c444:	b2db      	uxtb	r3, r3
 800c446:	461a      	mov	r2, r3
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d002      	beq.n	800c454 <dir_read+0xc2>
				ord = 0xFF;
 800c44e:	23ff      	movs	r3, #255	; 0xff
 800c450:	757b      	strb	r3, [r7, #21]
 800c452:	e044      	b.n	800c4de <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c454:	7bfb      	ldrb	r3, [r7, #15]
 800c456:	2b0f      	cmp	r3, #15
 800c458:	d12f      	bne.n	800c4ba <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c45a:	7dbb      	ldrb	r3, [r7, #22]
 800c45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00d      	beq.n	800c480 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c468:	7b5b      	ldrb	r3, [r3, #13]
 800c46a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c46c:	7dbb      	ldrb	r3, [r7, #22]
 800c46e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c472:	75bb      	strb	r3, [r7, #22]
 800c474:	7dbb      	ldrb	r3, [r7, #22]
 800c476:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c480:	7dba      	ldrb	r2, [r7, #22]
 800c482:	7d7b      	ldrb	r3, [r7, #21]
 800c484:	429a      	cmp	r2, r3
 800c486:	d115      	bne.n	800c4b4 <dir_read+0x122>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c48c:	330d      	adds	r3, #13
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	7d3a      	ldrb	r2, [r7, #20]
 800c492:	429a      	cmp	r2, r3
 800c494:	d10e      	bne.n	800c4b4 <dir_read+0x122>
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	691a      	ldr	r2, [r3, #16]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c49e:	4619      	mov	r1, r3
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	f7ff fb53 	bl	800bb4c <pick_lfn>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d003      	beq.n	800c4b4 <dir_read+0x122>
 800c4ac:	7d7b      	ldrb	r3, [r7, #21]
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	e000      	b.n	800c4b6 <dir_read+0x124>
 800c4b4:	23ff      	movs	r3, #255	; 0xff
 800c4b6:	757b      	strb	r3, [r7, #21]
 800c4b8:	e011      	b.n	800c4de <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c4ba:	7d7b      	ldrb	r3, [r7, #21]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d109      	bne.n	800c4d4 <dir_read+0x142>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7ff fc9c 	bl	800be02 <sum_sfn>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	7d3b      	ldrb	r3, [r7, #20]
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d017      	beq.n	800c504 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4da:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800c4dc:	e012      	b.n	800c504 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c4de:	2100      	movs	r1, #0
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f7ff f941 	bl	800b768 <dir_next>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c4ea:	7dfb      	ldrb	r3, [r7, #23]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10b      	bne.n	800c508 <dir_read+0x176>
	while (dp->sect) {
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f47f af5b 	bne.w	800c3b0 <dir_read+0x1e>
 800c4fa:	e006      	b.n	800c50a <dir_read+0x178>
		if (res != FR_OK) break;
 800c4fc:	bf00      	nop
 800c4fe:	e004      	b.n	800c50a <dir_read+0x178>
					break;
 800c500:	bf00      	nop
 800c502:	e002      	b.n	800c50a <dir_read+0x178>
					break;
 800c504:	bf00      	nop
 800c506:	e000      	b.n	800c50a <dir_read+0x178>
		if (res != FR_OK) break;
 800c508:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c50a:	7dfb      	ldrb	r3, [r7, #23]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <dir_read+0x184>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800c516:	7dfb      	ldrb	r3, [r7, #23]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3718      	adds	r7, #24
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c520:	b590      	push	{r4, r7, lr}
 800c522:	b089      	sub	sp, #36	; 0x24
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c52e:	2100      	movs	r1, #0
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7ff f885 	bl	800b640 <dir_sdi>
 800c536:	4603      	mov	r3, r0
 800c538:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800c53a:	7ffb      	ldrb	r3, [r7, #31]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d001      	beq.n	800c544 <dir_find+0x24>
 800c540:	7ffb      	ldrb	r3, [r7, #31]
 800c542:	e112      	b.n	800c76a <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	2b04      	cmp	r3, #4
 800c54a:	d164      	bne.n	800c616 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	4618      	mov	r0, r3
 800c552:	f7ff fcaa 	bl	800beaa <xname_sum>
 800c556:	4603      	mov	r3, r0
 800c558:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c55a:	e04f      	b.n	800c5fc <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	695b      	ldr	r3, [r3, #20]
 800c560:	3324      	adds	r3, #36	; 0x24
 800c562:	4618      	mov	r0, r3
 800c564:	f7fd fe5e 	bl	800a224 <ld_word>
 800c568:	4603      	mov	r3, r0
 800c56a:	461a      	mov	r2, r3
 800c56c:	893b      	ldrh	r3, [r7, #8]
 800c56e:	4293      	cmp	r3, r2
 800c570:	d000      	beq.n	800c574 <dir_find+0x54>
 800c572:	e043      	b.n	800c5fc <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	695b      	ldr	r3, [r3, #20]
 800c578:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c57c:	76fb      	strb	r3, [r7, #27]
 800c57e:	2340      	movs	r3, #64	; 0x40
 800c580:	617b      	str	r3, [r7, #20]
 800c582:	2300      	movs	r3, #0
 800c584:	613b      	str	r3, [r7, #16]
 800c586:	e029      	b.n	800c5dc <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	f003 031f 	and.w	r3, r3, #31
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d102      	bne.n	800c598 <dir_find+0x78>
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	3302      	adds	r3, #2
 800c596:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	695a      	ldr	r2, [r3, #20]
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	4413      	add	r3, r2
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7fd fe3f 	bl	800a224 <ld_word>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f002 fbd5 	bl	800ed58 <ff_wtoupper>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	461c      	mov	r4, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	691a      	ldr	r2, [r3, #16]
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	4413      	add	r3, r2
 800c5bc:	881b      	ldrh	r3, [r3, #0]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f002 fbca 	bl	800ed58 <ff_wtoupper>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	429c      	cmp	r4, r3
 800c5c8:	d10c      	bne.n	800c5e4 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c5ca:	7efb      	ldrb	r3, [r7, #27]
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	76fb      	strb	r3, [r7, #27]
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	3302      	adds	r3, #2
 800c5d4:	617b      	str	r3, [r7, #20]
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	613b      	str	r3, [r7, #16]
 800c5dc:	7efb      	ldrb	r3, [r7, #27]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1d2      	bne.n	800c588 <dir_find+0x68>
 800c5e2:	e000      	b.n	800c5e6 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c5e4:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c5e6:	7efb      	ldrb	r3, [r7, #27]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d107      	bne.n	800c5fc <dir_find+0xdc>
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	691a      	ldr	r2, [r3, #16]
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	005b      	lsls	r3, r3, #1
 800c5f4:	4413      	add	r3, r2
 800c5f6:	881b      	ldrh	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d009      	beq.n	800c610 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7ff fec7 	bl	800c392 <dir_read>
 800c604:	4603      	mov	r3, r0
 800c606:	77fb      	strb	r3, [r7, #31]
 800c608:	7ffb      	ldrb	r3, [r7, #31]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d0a6      	beq.n	800c55c <dir_find+0x3c>
 800c60e:	e000      	b.n	800c612 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c610:	bf00      	nop
		}
		return res;
 800c612:	7ffb      	ldrb	r3, [r7, #31]
 800c614:	e0a9      	b.n	800c76a <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c616:	23ff      	movs	r3, #255	; 0xff
 800c618:	773b      	strb	r3, [r7, #28]
 800c61a:	7f3b      	ldrb	r3, [r7, #28]
 800c61c:	777b      	strb	r3, [r7, #29]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f04f 32ff 	mov.w	r2, #4294967295
 800c624:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c62a:	4619      	mov	r1, r3
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f7fe f9ed 	bl	800aa0c <move_window>
 800c632:	4603      	mov	r3, r0
 800c634:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800c636:	7ffb      	ldrb	r3, [r7, #31]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f040 8090 	bne.w	800c75e <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c646:	7fbb      	ldrb	r3, [r7, #30]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d102      	bne.n	800c652 <dir_find+0x132>
 800c64c:	2304      	movs	r3, #4
 800c64e:	77fb      	strb	r3, [r7, #31]
 800c650:	e08a      	b.n	800c768 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c656:	330b      	adds	r3, #11
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c65e:	72fb      	strb	r3, [r7, #11]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	7afa      	ldrb	r2, [r7, #11]
 800c664:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c666:	7fbb      	ldrb	r3, [r7, #30]
 800c668:	2be5      	cmp	r3, #229	; 0xe5
 800c66a:	d007      	beq.n	800c67c <dir_find+0x15c>
 800c66c:	7afb      	ldrb	r3, [r7, #11]
 800c66e:	f003 0308 	and.w	r3, r3, #8
 800c672:	2b00      	cmp	r3, #0
 800c674:	d009      	beq.n	800c68a <dir_find+0x16a>
 800c676:	7afb      	ldrb	r3, [r7, #11]
 800c678:	2b0f      	cmp	r3, #15
 800c67a:	d006      	beq.n	800c68a <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c67c:	23ff      	movs	r3, #255	; 0xff
 800c67e:	777b      	strb	r3, [r7, #29]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f04f 32ff 	mov.w	r2, #4294967295
 800c686:	64da      	str	r2, [r3, #76]	; 0x4c
 800c688:	e05e      	b.n	800c748 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c68a:	7afb      	ldrb	r3, [r7, #11]
 800c68c:	2b0f      	cmp	r3, #15
 800c68e:	d136      	bne.n	800c6fe <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d154      	bne.n	800c748 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c69e:	7fbb      	ldrb	r3, [r7, #30]
 800c6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00d      	beq.n	800c6c4 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ac:	7b5b      	ldrb	r3, [r3, #13]
 800c6ae:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c6b0:	7fbb      	ldrb	r3, [r7, #30]
 800c6b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6b6:	77bb      	strb	r3, [r7, #30]
 800c6b8:	7fbb      	ldrb	r3, [r7, #30]
 800c6ba:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c6c4:	7fba      	ldrb	r2, [r7, #30]
 800c6c6:	7f7b      	ldrb	r3, [r7, #29]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d115      	bne.n	800c6f8 <dir_find+0x1d8>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d0:	330d      	adds	r3, #13
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	7f3a      	ldrb	r2, [r7, #28]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d10e      	bne.n	800c6f8 <dir_find+0x1d8>
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	691a      	ldr	r2, [r3, #16]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	4610      	mov	r0, r2
 800c6e6:	f7ff f9c1 	bl	800ba6c <cmp_lfn>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d003      	beq.n	800c6f8 <dir_find+0x1d8>
 800c6f0:	7f7b      	ldrb	r3, [r7, #29]
 800c6f2:	3b01      	subs	r3, #1
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	e000      	b.n	800c6fa <dir_find+0x1da>
 800c6f8:	23ff      	movs	r3, #255	; 0xff
 800c6fa:	777b      	strb	r3, [r7, #29]
 800c6fc:	e024      	b.n	800c748 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c6fe:	7f7b      	ldrb	r3, [r7, #29]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d109      	bne.n	800c718 <dir_find+0x1f8>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c708:	4618      	mov	r0, r3
 800c70a:	f7ff fb7a 	bl	800be02 <sum_sfn>
 800c70e:	4603      	mov	r3, r0
 800c710:	461a      	mov	r2, r3
 800c712:	7f3b      	ldrb	r3, [r7, #28]
 800c714:	4293      	cmp	r3, r2
 800c716:	d024      	beq.n	800c762 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c71e:	f003 0301 	and.w	r3, r3, #1
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10a      	bne.n	800c73c <dir_find+0x21c>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	3340      	adds	r3, #64	; 0x40
 800c72e:	220b      	movs	r2, #11
 800c730:	4619      	mov	r1, r3
 800c732:	f7fd ff78 	bl	800a626 <mem_cmp>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d014      	beq.n	800c766 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c73c:	23ff      	movs	r3, #255	; 0xff
 800c73e:	777b      	strb	r3, [r7, #29]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f04f 32ff 	mov.w	r2, #4294967295
 800c746:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c748:	2100      	movs	r1, #0
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7ff f80c 	bl	800b768 <dir_next>
 800c750:	4603      	mov	r3, r0
 800c752:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800c754:	7ffb      	ldrb	r3, [r7, #31]
 800c756:	2b00      	cmp	r3, #0
 800c758:	f43f af65 	beq.w	800c626 <dir_find+0x106>
 800c75c:	e004      	b.n	800c768 <dir_find+0x248>
		if (res != FR_OK) break;
 800c75e:	bf00      	nop
 800c760:	e002      	b.n	800c768 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c762:	bf00      	nop
 800c764:	e000      	b.n	800c768 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c766:	bf00      	nop

	return res;
 800c768:	7ffb      	ldrb	r3, [r7, #31]
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3724      	adds	r7, #36	; 0x24
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd90      	pop	{r4, r7, pc}
	...

0800c774 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c774:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c778:	b0a0      	sub	sp, #128	; 0x80
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c78a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d001      	beq.n	800c796 <dir_register+0x22>
 800c792:	2306      	movs	r3, #6
 800c794:	e198      	b.n	800cac8 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c796:	2300      	movs	r3, #0
 800c798:	677b      	str	r3, [r7, #116]	; 0x74
 800c79a:	e002      	b.n	800c7a2 <dir_register+0x2e>
 800c79c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c79e:	3301      	adds	r3, #1
 800c7a0:	677b      	str	r3, [r7, #116]	; 0x74
 800c7a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7a4:	691a      	ldr	r2, [r3, #16]
 800c7a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	4413      	add	r3, r2
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d1f4      	bne.n	800c79c <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c7b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	2b04      	cmp	r3, #4
 800c7b8:	f040 80a9 	bne.w	800c90e <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800c7bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7be:	330e      	adds	r3, #14
 800c7c0:	4aa7      	ldr	r2, [pc, #668]	; (800ca60 <dir_register+0x2ec>)
 800c7c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7c6:	08db      	lsrs	r3, r3, #3
 800c7c8:	3302      	adds	r3, #2
 800c7ca:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800c7cc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f7ff f8b0 	bl	800b934 <dir_alloc>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800c7da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d002      	beq.n	800c7e8 <dir_register+0x74>
 800c7e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c7e6:	e16f      	b.n	800cac8 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7ee:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	015b      	lsls	r3, r3, #5
 800c7f6:	1ad2      	subs	r2, r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d07a      	beq.n	800c8fa <dir_register+0x186>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	79db      	ldrb	r3, [r3, #7]
 800c808:	f003 0304 	and.w	r3, r3, #4
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d074      	beq.n	800c8fa <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800c816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c818:	895b      	ldrh	r3, [r3, #10]
 800c81a:	4618      	mov	r0, r3
 800c81c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c81e:	899b      	ldrh	r3, [r3, #12]
 800c820:	fb03 f300 	mul.w	r3, r3, r0
 800c824:	469b      	mov	fp, r3
 800c826:	f04f 0c00 	mov.w	ip, #0
 800c82a:	eb1b 0301 	adds.w	r3, fp, r1
 800c82e:	eb4c 0402 	adc.w	r4, ip, r2
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe fca4 	bl	800b188 <fill_first_frag>
 800c840:	4603      	mov	r3, r0
 800c842:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c846:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d002      	beq.n	800c854 <dir_register+0xe0>
 800c84e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c852:	e139      	b.n	800cac8 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c85a:	f04f 32ff 	mov.w	r2, #4294967295
 800c85e:	4619      	mov	r1, r3
 800c860:	f7fe fcc1 	bl	800b1e6 <fill_last_frag>
 800c864:	4603      	mov	r3, r0
 800c866:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c86a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d002      	beq.n	800c878 <dir_register+0x104>
 800c872:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c876:	e127      	b.n	800cac8 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	f107 0308 	add.w	r3, r7, #8
 800c87e:	4611      	mov	r1, r2
 800c880:	4618      	mov	r0, r3
 800c882:	f7ff fc87 	bl	800c194 <load_obj_dir>
 800c886:	4603      	mov	r3, r0
 800c888:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c88c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c890:	2b00      	cmp	r3, #0
 800c892:	d002      	beq.n	800c89a <dir_register+0x126>
 800c894:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c898:	e116      	b.n	800cac8 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800c89a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c89c:	695b      	ldr	r3, [r3, #20]
 800c89e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	4623      	mov	r3, r4
 800c8ac:	4608      	mov	r0, r1
 800c8ae:	f7fd fdf8 	bl	800a4a2 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8b4:	695b      	ldr	r3, [r3, #20]
 800c8b6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	4623      	mov	r3, r4
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	f7fd fdec 	bl	800a4a2 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	79da      	ldrb	r2, [r3, #7]
 800c8ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8d0:	695b      	ldr	r3, [r3, #20]
 800c8d2:	3321      	adds	r3, #33	; 0x21
 800c8d4:	f042 0201 	orr.w	r2, r2, #1
 800c8d8:	b2d2      	uxtb	r2, r2
 800c8da:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c8dc:	f107 0308 	add.w	r3, r7, #8
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7ff fc94 	bl	800c20e <store_xdir>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c8ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d002      	beq.n	800c8fa <dir_register+0x186>
 800c8f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c8f8:	e0e6      	b.n	800cac8 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c8fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8fc:	695a      	ldr	r2, [r3, #20]
 800c8fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	4619      	mov	r1, r3
 800c904:	4610      	mov	r0, r2
 800c906:	f7ff fcdd 	bl	800c2c4 <create_xdir>
		return FR_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	e0dc      	b.n	800cac8 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800c914:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c918:	220c      	movs	r2, #12
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fd fe48 	bl	800a5b0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c920:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c924:	f003 0301 	and.w	r3, r3, #1
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d033      	beq.n	800c994 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2240      	movs	r2, #64	; 0x40
 800c930:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800c934:	2301      	movs	r3, #1
 800c936:	67bb      	str	r3, [r7, #120]	; 0x78
 800c938:	e016      	b.n	800c968 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c942:	691a      	ldr	r2, [r3, #16]
 800c944:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800c948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c94a:	f7ff f9cb 	bl	800bce4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7ff fde6 	bl	800c520 <dir_find>
 800c954:	4603      	mov	r3, r0
 800c956:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800c95a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d106      	bne.n	800c970 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 800c962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c964:	3301      	adds	r3, #1
 800c966:	67bb      	str	r3, [r7, #120]	; 0x78
 800c968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c96a:	2b63      	cmp	r3, #99	; 0x63
 800c96c:	d9e5      	bls.n	800c93a <dir_register+0x1c6>
 800c96e:	e000      	b.n	800c972 <dir_register+0x1fe>
			if (res != FR_OK) break;
 800c970:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c974:	2b64      	cmp	r3, #100	; 0x64
 800c976:	d101      	bne.n	800c97c <dir_register+0x208>
 800c978:	2307      	movs	r3, #7
 800c97a:	e0a5      	b.n	800cac8 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c97c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c980:	2b04      	cmp	r3, #4
 800c982:	d002      	beq.n	800c98a <dir_register+0x216>
 800c984:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c988:	e09e      	b.n	800cac8 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c98a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c994:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c998:	f003 0302 	and.w	r3, r3, #2
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d007      	beq.n	800c9b0 <dir_register+0x23c>
 800c9a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9a2:	330c      	adds	r3, #12
 800c9a4:	4a2f      	ldr	r2, [pc, #188]	; (800ca64 <dir_register+0x2f0>)
 800c9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9aa:	089b      	lsrs	r3, r3, #2
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	e000      	b.n	800c9b2 <dir_register+0x23e>
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c9b4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7fe ffbc 	bl	800b934 <dir_alloc>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c9c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d14f      	bne.n	800ca6a <dir_register+0x2f6>
 800c9ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	673b      	str	r3, [r7, #112]	; 0x70
 800c9d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d049      	beq.n	800ca6a <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9dc:	015b      	lsls	r3, r3, #5
 800c9de:	1ad3      	subs	r3, r2, r3
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7fe fe2c 	bl	800b640 <dir_sdi>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800c9ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d139      	bne.n	800ca6a <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	3340      	adds	r3, #64	; 0x40
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7ff fa01 	bl	800be02 <sum_sfn>
 800ca00:	4603      	mov	r3, r0
 800ca02:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ca0e:	f7fd fffd 	bl	800aa0c <move_window>
 800ca12:	4603      	mov	r3, r0
 800ca14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800ca18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d123      	bne.n	800ca68 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ca20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca22:	6918      	ldr	r0, [r3, #16]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ca28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ca30:	f7ff f8f0 	bl	800bc14 <put_lfn>
				fs->wflag = 1;
 800ca34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca36:	2201      	movs	r2, #1
 800ca38:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f7fe fe93 	bl	800b768 <dir_next>
 800ca42:	4603      	mov	r3, r0
 800ca44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800ca48:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10c      	bne.n	800ca6a <dir_register+0x2f6>
 800ca50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca52:	3b01      	subs	r3, #1
 800ca54:	673b      	str	r3, [r7, #112]	; 0x70
 800ca56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1d4      	bne.n	800ca06 <dir_register+0x292>
 800ca5c:	e005      	b.n	800ca6a <dir_register+0x2f6>
 800ca5e:	bf00      	nop
 800ca60:	88888889 	.word	0x88888889
 800ca64:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800ca68:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ca6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d128      	bne.n	800cac4 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca76:	4619      	mov	r1, r3
 800ca78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ca7a:	f7fd ffc7 	bl	800aa0c <move_window>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800ca84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d11b      	bne.n	800cac4 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca90:	2220      	movs	r2, #32
 800ca92:	2100      	movs	r1, #0
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fd fdac 	bl	800a5f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	3340      	adds	r3, #64	; 0x40
 800caa2:	220b      	movs	r2, #11
 800caa4:	4619      	mov	r1, r3
 800caa6:	f7fd fd83 	bl	800a5b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cab4:	330c      	adds	r3, #12
 800cab6:	f002 0218 	and.w	r2, r2, #24
 800caba:	b2d2      	uxtb	r2, r2
 800cabc:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cabe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cac0:	2201      	movs	r2, #1
 800cac2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cac4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3780      	adds	r7, #128	; 0x80
 800cacc:	46bd      	mov	sp, r7
 800cace:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800cad2:	bf00      	nop

0800cad4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cad4:	b590      	push	{r4, r7, lr}
 800cad6:	b089      	sub	sp, #36	; 0x24
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	2200      	movs	r2, #0
 800cae8:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f000 80d7 	beq.w	800cca2 <get_fileinfo+0x1ce>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	2b04      	cmp	r3, #4
 800cafa:	d106      	bne.n	800cb0a <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	695b      	ldr	r3, [r3, #20]
 800cb00:	6839      	ldr	r1, [r7, #0]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7ff fa05 	bl	800bf12 <get_xdir_info>
		return;
 800cb08:	e0cc      	b.n	800cca4 <get_fileinfo+0x1d0>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb12:	d032      	beq.n	800cb7a <get_fileinfo+0xa6>
			i = j = 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	61bb      	str	r3, [r7, #24]
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cb1c:	e01b      	b.n	800cb56 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cb1e:	89fb      	ldrh	r3, [r7, #14]
 800cb20:	2100      	movs	r1, #0
 800cb22:	4618      	mov	r0, r3
 800cb24:	f002 f8dc 	bl	800ece0 <ff_convert>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800cb2c:	89fb      	ldrh	r3, [r7, #14]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d102      	bne.n	800cb38 <get_fileinfo+0x64>
 800cb32:	2300      	movs	r3, #0
 800cb34:	61fb      	str	r3, [r7, #28]
 800cb36:	e01a      	b.n	800cb6e <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	2bfe      	cmp	r3, #254	; 0xfe
 800cb3c:	d902      	bls.n	800cb44 <get_fileinfo+0x70>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	61fb      	str	r3, [r7, #28]
 800cb42:	e014      	b.n	800cb6e <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	1c5a      	adds	r2, r3, #1
 800cb48:	61fa      	str	r2, [r7, #28]
 800cb4a:	89fa      	ldrh	r2, [r7, #14]
 800cb4c:	b2d1      	uxtb	r1, r2
 800cb4e:	683a      	ldr	r2, [r7, #0]
 800cb50:	4413      	add	r3, r2
 800cb52:	460a      	mov	r2, r1
 800cb54:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	691a      	ldr	r2, [r3, #16]
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	1c59      	adds	r1, r3, #1
 800cb5e:	61b9      	str	r1, [r7, #24]
 800cb60:	005b      	lsls	r3, r3, #1
 800cb62:	4413      	add	r3, r2
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	81fb      	strh	r3, [r7, #14]
 800cb68:	89fb      	ldrh	r3, [r7, #14]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1d7      	bne.n	800cb1e <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cb6e:	683a      	ldr	r2, [r7, #0]
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	4413      	add	r3, r2
 800cb74:	331a      	adds	r3, #26
 800cb76:	2200      	movs	r2, #0
 800cb78:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	61bb      	str	r3, [r7, #24]
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cb82:	683a      	ldr	r2, [r7, #0]
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	4413      	add	r3, r2
 800cb88:	331a      	adds	r3, #26
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800cb8e:	e04c      	b.n	800cc2a <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	1c59      	adds	r1, r3, #1
 800cb98:	61f9      	str	r1, [r7, #28]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cba0:	7dfb      	ldrb	r3, [r7, #23]
 800cba2:	2b20      	cmp	r3, #32
 800cba4:	d100      	bne.n	800cba8 <get_fileinfo+0xd4>
 800cba6:	e040      	b.n	800cc2a <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cba8:	7dfb      	ldrb	r3, [r7, #23]
 800cbaa:	2b05      	cmp	r3, #5
 800cbac:	d101      	bne.n	800cbb2 <get_fileinfo+0xde>
 800cbae:	23e5      	movs	r3, #229	; 0xe5
 800cbb0:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	2b09      	cmp	r3, #9
 800cbb6:	d10f      	bne.n	800cbd8 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800cbb8:	89bb      	ldrh	r3, [r7, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d105      	bne.n	800cbca <get_fileinfo+0xf6>
 800cbbe:	683a      	ldr	r2, [r7, #0]
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	331a      	adds	r3, #26
 800cbc6:	222e      	movs	r2, #46	; 0x2e
 800cbc8:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	1c5a      	adds	r2, r3, #1
 800cbce:	61ba      	str	r2, [r7, #24]
 800cbd0:	683a      	ldr	r2, [r7, #0]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	222e      	movs	r2, #46	; 0x2e
 800cbd6:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cbd8:	683a      	ldr	r2, [r7, #0]
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	4413      	add	r3, r2
 800cbde:	330d      	adds	r3, #13
 800cbe0:	7dfa      	ldrb	r2, [r7, #23]
 800cbe2:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cbe4:	89bb      	ldrh	r3, [r7, #12]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d11c      	bne.n	800cc24 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
 800cbec:	2b40      	cmp	r3, #64	; 0x40
 800cbee:	d913      	bls.n	800cc18 <get_fileinfo+0x144>
 800cbf0:	7dfb      	ldrb	r3, [r7, #23]
 800cbf2:	2b5a      	cmp	r3, #90	; 0x5a
 800cbf4:	d810      	bhi.n	800cc18 <get_fileinfo+0x144>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfa:	330c      	adds	r3, #12
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	461a      	mov	r2, r3
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	2b08      	cmp	r3, #8
 800cc04:	d901      	bls.n	800cc0a <get_fileinfo+0x136>
 800cc06:	2310      	movs	r3, #16
 800cc08:	e000      	b.n	800cc0c <get_fileinfo+0x138>
 800cc0a:	2308      	movs	r3, #8
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d002      	beq.n	800cc18 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800cc12:	7dfb      	ldrb	r3, [r7, #23]
 800cc14:	3320      	adds	r3, #32
 800cc16:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800cc18:	683a      	ldr	r2, [r7, #0]
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	331a      	adds	r3, #26
 800cc20:	7dfa      	ldrb	r2, [r7, #23]
 800cc22:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	3301      	adds	r3, #1
 800cc28:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	2b0a      	cmp	r3, #10
 800cc2e:	d9af      	bls.n	800cb90 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800cc30:	89bb      	ldrh	r3, [r7, #12]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10d      	bne.n	800cc52 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800cc36:	683a      	ldr	r2, [r7, #0]
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	331a      	adds	r3, #26
 800cc3e:	2200      	movs	r2, #0
 800cc40:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc46:	330c      	adds	r3, #12
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <get_fileinfo+0x17e>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	4413      	add	r3, r2
 800cc58:	330d      	adds	r3, #13
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc62:	7ada      	ldrb	r2, [r3, #11]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc6c:	331c      	adds	r3, #28
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fd faf0 	bl	800a254 <ld_dword>
 800cc74:	4603      	mov	r3, r0
 800cc76:	f04f 0400 	mov.w	r4, #0
 800cc7a:	683a      	ldr	r2, [r7, #0]
 800cc7c:	e9c2 3400 	strd	r3, r4, [r2]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc84:	3316      	adds	r3, #22
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7fd fae4 	bl	800a254 <ld_dword>
 800cc8c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	815a      	strh	r2, [r3, #10]
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	0c1b      	lsrs	r3, r3, #16
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	811a      	strh	r2, [r3, #8]
 800cca0:	e000      	b.n	800cca4 <get_fileinfo+0x1d0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cca2:	bf00      	nop
}
 800cca4:	3724      	adds	r7, #36	; 0x24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd90      	pop	{r4, r7, pc}
	...

0800ccac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b08a      	sub	sp, #40	; 0x28
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	613b      	str	r3, [r7, #16]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	60fb      	str	r3, [r7, #12]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	617b      	str	r3, [r7, #20]
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	1c5a      	adds	r2, r3, #1
 800ccd0:	61ba      	str	r2, [r7, #24]
 800ccd2:	693a      	ldr	r2, [r7, #16]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ccda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccdc:	2b1f      	cmp	r3, #31
 800ccde:	d940      	bls.n	800cd62 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cce2:	2b2f      	cmp	r3, #47	; 0x2f
 800cce4:	d006      	beq.n	800ccf4 <create_name+0x48>
 800cce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cce8:	2b5c      	cmp	r3, #92	; 0x5c
 800ccea:	d110      	bne.n	800cd0e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ccec:	e002      	b.n	800ccf4 <create_name+0x48>
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	61bb      	str	r3, [r7, #24]
 800ccf4:	693a      	ldr	r2, [r7, #16]
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b2f      	cmp	r3, #47	; 0x2f
 800ccfe:	d0f6      	beq.n	800ccee <create_name+0x42>
 800cd00:	693a      	ldr	r2, [r7, #16]
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	4413      	add	r3, r2
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b5c      	cmp	r3, #92	; 0x5c
 800cd0a:	d0f0      	beq.n	800ccee <create_name+0x42>
			break;
 800cd0c:	e02a      	b.n	800cd64 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	2bfe      	cmp	r3, #254	; 0xfe
 800cd12:	d901      	bls.n	800cd18 <create_name+0x6c>
 800cd14:	2306      	movs	r3, #6
 800cd16:	e177      	b.n	800d008 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cd18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cd1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd20:	2101      	movs	r1, #1
 800cd22:	4618      	mov	r0, r3
 800cd24:	f001 ffdc 	bl	800ece0 <ff_convert>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cd2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <create_name+0x8a>
 800cd32:	2306      	movs	r3, #6
 800cd34:	e168      	b.n	800d008 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cd36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd38:	2b7f      	cmp	r3, #127	; 0x7f
 800cd3a:	d809      	bhi.n	800cd50 <create_name+0xa4>
 800cd3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd3e:	4619      	mov	r1, r3
 800cd40:	48b3      	ldr	r0, [pc, #716]	; (800d010 <create_name+0x364>)
 800cd42:	f7fd fc97 	bl	800a674 <chk_chr>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <create_name+0xa4>
 800cd4c:	2306      	movs	r3, #6
 800cd4e:	e15b      	b.n	800d008 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	1c5a      	adds	r2, r3, #1
 800cd54:	617a      	str	r2, [r7, #20]
 800cd56:	005b      	lsls	r3, r3, #1
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cd5e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cd60:	e7b4      	b.n	800cccc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cd62:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cd64:	693a      	ldr	r2, [r7, #16]
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	441a      	add	r2, r3
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cd6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd70:	2b1f      	cmp	r3, #31
 800cd72:	d801      	bhi.n	800cd78 <create_name+0xcc>
 800cd74:	2304      	movs	r3, #4
 800cd76:	e000      	b.n	800cd7a <create_name+0xce>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cd7e:	e011      	b.n	800cda4 <create_name+0xf8>
		w = lfn[di - 1];
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cd86:	3b01      	subs	r3, #1
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	881b      	ldrh	r3, [r3, #0]
 800cd90:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800cd92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd94:	2b20      	cmp	r3, #32
 800cd96:	d002      	beq.n	800cd9e <create_name+0xf2>
 800cd98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd9a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd9c:	d106      	bne.n	800cdac <create_name+0x100>
		di--;
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	3b01      	subs	r3, #1
 800cda2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1ea      	bne.n	800cd80 <create_name+0xd4>
 800cdaa:	e000      	b.n	800cdae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cdac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	005b      	lsls	r3, r3, #1
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d101      	bne.n	800cdc4 <create_name+0x118>
 800cdc0:	2306      	movs	r3, #6
 800cdc2:	e121      	b.n	800d008 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	3340      	adds	r3, #64	; 0x40
 800cdc8:	220b      	movs	r2, #11
 800cdca:	2120      	movs	r1, #32
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7fd fc10 	bl	800a5f2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	61bb      	str	r3, [r7, #24]
 800cdd6:	e002      	b.n	800cdde <create_name+0x132>
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	3301      	adds	r3, #1
 800cddc:	61bb      	str	r3, [r7, #24]
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	005b      	lsls	r3, r3, #1
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	4413      	add	r3, r2
 800cde6:	881b      	ldrh	r3, [r3, #0]
 800cde8:	2b20      	cmp	r3, #32
 800cdea:	d0f5      	beq.n	800cdd8 <create_name+0x12c>
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	005b      	lsls	r3, r3, #1
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	881b      	ldrh	r3, [r3, #0]
 800cdf6:	2b2e      	cmp	r3, #46	; 0x2e
 800cdf8:	d0ee      	beq.n	800cdd8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d009      	beq.n	800ce14 <create_name+0x168>
 800ce00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce04:	f043 0303 	orr.w	r3, r3, #3
 800ce08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ce0c:	e002      	b.n	800ce14 <create_name+0x168>
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	3b01      	subs	r3, #1
 800ce12:	617b      	str	r3, [r7, #20]
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d009      	beq.n	800ce2e <create_name+0x182>
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce20:	3b01      	subs	r3, #1
 800ce22:	005b      	lsls	r3, r3, #1
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	4413      	add	r3, r2
 800ce28:	881b      	ldrh	r3, [r3, #0]
 800ce2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ce2c:	d1ef      	bne.n	800ce0e <create_name+0x162>

	i = b = 0; ni = 8;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ce34:	2300      	movs	r3, #0
 800ce36:	623b      	str	r3, [r7, #32]
 800ce38:	2308      	movs	r3, #8
 800ce3a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	1c5a      	adds	r2, r3, #1
 800ce40:	61ba      	str	r2, [r7, #24]
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	4413      	add	r3, r2
 800ce48:	881b      	ldrh	r3, [r3, #0]
 800ce4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ce4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 8090 	beq.w	800cf74 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ce54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce56:	2b20      	cmp	r3, #32
 800ce58:	d006      	beq.n	800ce68 <create_name+0x1bc>
 800ce5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ce5e:	d10a      	bne.n	800ce76 <create_name+0x1ca>
 800ce60:	69ba      	ldr	r2, [r7, #24]
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d006      	beq.n	800ce76 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ce68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce6c:	f043 0303 	orr.w	r3, r3, #3
 800ce70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce74:	e07d      	b.n	800cf72 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ce76:	6a3a      	ldr	r2, [r7, #32]
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d203      	bcs.n	800ce86 <create_name+0x1da>
 800ce7e:	69ba      	ldr	r2, [r7, #24]
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d123      	bne.n	800cece <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	2b0b      	cmp	r3, #11
 800ce8a:	d106      	bne.n	800ce9a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ce8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce90:	f043 0303 	orr.w	r3, r3, #3
 800ce94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce98:	e06f      	b.n	800cf7a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ce9a:	69ba      	ldr	r2, [r7, #24]
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d005      	beq.n	800ceae <create_name+0x202>
 800cea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cea6:	f043 0303 	orr.w	r3, r3, #3
 800ceaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ceae:	69ba      	ldr	r2, [r7, #24]
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d860      	bhi.n	800cf78 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	61bb      	str	r3, [r7, #24]
 800ceba:	2308      	movs	r3, #8
 800cebc:	623b      	str	r3, [r7, #32]
 800cebe:	230b      	movs	r3, #11
 800cec0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cec2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cecc:	e051      	b.n	800cf72 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ced0:	2b7f      	cmp	r3, #127	; 0x7f
 800ced2:	d914      	bls.n	800cefe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ced4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ced6:	2100      	movs	r1, #0
 800ced8:	4618      	mov	r0, r3
 800ceda:	f001 ff01 	bl	800ece0 <ff_convert>
 800cede:	4603      	mov	r3, r0
 800cee0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d004      	beq.n	800cef2 <create_name+0x246>
 800cee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceea:	3b80      	subs	r3, #128	; 0x80
 800ceec:	4a49      	ldr	r2, [pc, #292]	; (800d014 <create_name+0x368>)
 800ceee:	5cd3      	ldrb	r3, [r2, r3]
 800cef0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cef6:	f043 0302 	orr.w	r3, r3, #2
 800cefa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cefe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d007      	beq.n	800cf14 <create_name+0x268>
 800cf04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf06:	4619      	mov	r1, r3
 800cf08:	4843      	ldr	r0, [pc, #268]	; (800d018 <create_name+0x36c>)
 800cf0a:	f7fd fbb3 	bl	800a674 <chk_chr>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d008      	beq.n	800cf26 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cf14:	235f      	movs	r3, #95	; 0x5f
 800cf16:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cf18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf1c:	f043 0303 	orr.w	r3, r3, #3
 800cf20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf24:	e01b      	b.n	800cf5e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cf26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf28:	2b40      	cmp	r3, #64	; 0x40
 800cf2a:	d909      	bls.n	800cf40 <create_name+0x294>
 800cf2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf2e:	2b5a      	cmp	r3, #90	; 0x5a
 800cf30:	d806      	bhi.n	800cf40 <create_name+0x294>
					b |= 2;
 800cf32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf36:	f043 0302 	orr.w	r3, r3, #2
 800cf3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf3e:	e00e      	b.n	800cf5e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cf40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf42:	2b60      	cmp	r3, #96	; 0x60
 800cf44:	d90b      	bls.n	800cf5e <create_name+0x2b2>
 800cf46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf48:	2b7a      	cmp	r3, #122	; 0x7a
 800cf4a:	d808      	bhi.n	800cf5e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cf4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf50:	f043 0301 	orr.w	r3, r3, #1
 800cf54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf5a:	3b20      	subs	r3, #32
 800cf5c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cf5e:	6a3b      	ldr	r3, [r7, #32]
 800cf60:	1c5a      	adds	r2, r3, #1
 800cf62:	623a      	str	r2, [r7, #32]
 800cf64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf66:	b2d1      	uxtb	r1, r2
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	460a      	mov	r2, r1
 800cf6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800cf72:	e763      	b.n	800ce3c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cf74:	bf00      	nop
 800cf76:	e000      	b.n	800cf7a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800cf78:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf80:	2be5      	cmp	r3, #229	; 0xe5
 800cf82:	d103      	bne.n	800cf8c <create_name+0x2e0>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2205      	movs	r2, #5
 800cf88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	2b08      	cmp	r3, #8
 800cf90:	d104      	bne.n	800cf9c <create_name+0x2f0>
 800cf92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cf9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfa0:	f003 030c 	and.w	r3, r3, #12
 800cfa4:	2b0c      	cmp	r3, #12
 800cfa6:	d005      	beq.n	800cfb4 <create_name+0x308>
 800cfa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfac:	f003 0303 	and.w	r3, r3, #3
 800cfb0:	2b03      	cmp	r3, #3
 800cfb2:	d105      	bne.n	800cfc0 <create_name+0x314>
 800cfb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfb8:	f043 0302 	orr.w	r3, r3, #2
 800cfbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cfc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfc4:	f003 0302 	and.w	r3, r3, #2
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d117      	bne.n	800cffc <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cfcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfd0:	f003 0303 	and.w	r3, r3, #3
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d105      	bne.n	800cfe4 <create_name+0x338>
 800cfd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfdc:	f043 0310 	orr.w	r3, r3, #16
 800cfe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cfe4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfe8:	f003 030c 	and.w	r3, r3, #12
 800cfec:	2b04      	cmp	r3, #4
 800cfee:	d105      	bne.n	800cffc <create_name+0x350>
 800cff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cff4:	f043 0308 	orr.w	r3, r3, #8
 800cff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d002:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800d006:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3728      	adds	r7, #40	; 0x28
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	0800f81c 	.word	0x0800f81c
 800d014:	0800fa84 	.word	0x0800fa84
 800d018:	0800f828 	.word	0x0800f828

0800d01c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d01c:	b590      	push	{r4, r7, lr}
 800d01e:	b087      	sub	sp, #28
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d030:	e002      	b.n	800d038 <follow_path+0x1c>
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	3301      	adds	r3, #1
 800d036:	603b      	str	r3, [r7, #0]
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	2b2f      	cmp	r3, #47	; 0x2f
 800d03e:	d0f8      	beq.n	800d032 <follow_path+0x16>
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	2b5c      	cmp	r3, #92	; 0x5c
 800d046:	d0f4      	beq.n	800d032 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	2200      	movs	r2, #0
 800d04c:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	2200      	movs	r2, #0
 800d052:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	2b1f      	cmp	r3, #31
 800d05a:	d80a      	bhi.n	800d072 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2280      	movs	r2, #128	; 0x80
 800d060:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800d064:	2100      	movs	r1, #0
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7fe faea 	bl	800b640 <dir_sdi>
 800d06c:	4603      	mov	r3, r0
 800d06e:	75fb      	strb	r3, [r7, #23]
 800d070:	e07c      	b.n	800d16c <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d072:	463b      	mov	r3, r7
 800d074:	4619      	mov	r1, r3
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7ff fe18 	bl	800ccac <create_name>
 800d07c:	4603      	mov	r3, r0
 800d07e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d080:	7dfb      	ldrb	r3, [r7, #23]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d16d      	bne.n	800d162 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f7ff fa4a 	bl	800c520 <dir_find>
 800d08c:	4603      	mov	r3, r0
 800d08e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d096:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d098:	7dfb      	ldrb	r3, [r7, #23]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00a      	beq.n	800d0b4 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d09e:	7dfb      	ldrb	r3, [r7, #23]
 800d0a0:	2b04      	cmp	r3, #4
 800d0a2:	d160      	bne.n	800d166 <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d0a4:	7afb      	ldrb	r3, [r7, #11]
 800d0a6:	f003 0304 	and.w	r3, r3, #4
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d15b      	bne.n	800d166 <follow_path+0x14a>
 800d0ae:	2305      	movs	r3, #5
 800d0b0:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d0b2:	e058      	b.n	800d166 <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d0b4:	7afb      	ldrb	r3, [r7, #11]
 800d0b6:	f003 0304 	and.w	r3, r3, #4
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d155      	bne.n	800d16a <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	799b      	ldrb	r3, [r3, #6]
 800d0c2:	f003 0310 	and.w	r3, r3, #16
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d102      	bne.n	800d0d0 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800d0ca:	2305      	movs	r3, #5
 800d0cc:	75fb      	strb	r3, [r7, #23]
 800d0ce:	e04d      	b.n	800d16c <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	2b04      	cmp	r3, #4
 800d0d6:	d12f      	bne.n	800d138 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	689a      	ldr	r2, [r3, #8]
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800d0e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d0ea:	693a      	ldr	r2, [r7, #16]
 800d0ec:	79d2      	ldrb	r2, [r2, #7]
 800d0ee:	431a      	orrs	r2, r3
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	695b      	ldr	r3, [r3, #20]
 800d100:	3334      	adds	r3, #52	; 0x34
 800d102:	4618      	mov	r0, r3
 800d104:	f7fd f8a6 	bl	800a254 <ld_dword>
 800d108:	4602      	mov	r2, r0
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	695b      	ldr	r3, [r3, #20]
 800d112:	3321      	adds	r3, #33	; 0x21
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	f003 0302 	and.w	r3, r3, #2
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	695b      	ldr	r3, [r3, #20]
 800d124:	3338      	adds	r3, #56	; 0x38
 800d126:	4618      	mov	r0, r3
 800d128:	f7fd f8b7 	bl	800a29a <ld_qword>
 800d12c:	4603      	mov	r3, r0
 800d12e:	460c      	mov	r4, r1
 800d130:	693a      	ldr	r2, [r7, #16]
 800d132:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800d136:	e79c      	b.n	800d072 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d142:	68fa      	ldr	r2, [r7, #12]
 800d144:	8992      	ldrh	r2, [r2, #12]
 800d146:	fbb3 f0f2 	udiv	r0, r3, r2
 800d14a:	fb02 f200 	mul.w	r2, r2, r0
 800d14e:	1a9b      	subs	r3, r3, r2
 800d150:	440b      	add	r3, r1
 800d152:	4619      	mov	r1, r3
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f7fe fc49 	bl	800b9ec <ld_clust>
 800d15a:	4602      	mov	r2, r0
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d160:	e787      	b.n	800d072 <follow_path+0x56>
			if (res != FR_OK) break;
 800d162:	bf00      	nop
 800d164:	e002      	b.n	800d16c <follow_path+0x150>
				break;
 800d166:	bf00      	nop
 800d168:	e000      	b.n	800d16c <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d16a:	bf00      	nop
			}
		}
	}

	return res;
 800d16c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d16e:	4618      	mov	r0, r3
 800d170:	371c      	adds	r7, #28
 800d172:	46bd      	mov	sp, r7
 800d174:	bd90      	pop	{r4, r7, pc}

0800d176 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d176:	b480      	push	{r7}
 800d178:	b087      	sub	sp, #28
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d17e:	f04f 33ff 	mov.w	r3, #4294967295
 800d182:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d031      	beq.n	800d1f0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	617b      	str	r3, [r7, #20]
 800d192:	e002      	b.n	800d19a <get_ldnumber+0x24>
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	3301      	adds	r3, #1
 800d198:	617b      	str	r3, [r7, #20]
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	2b1f      	cmp	r3, #31
 800d1a0:	d903      	bls.n	800d1aa <get_ldnumber+0x34>
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	2b3a      	cmp	r3, #58	; 0x3a
 800d1a8:	d1f4      	bne.n	800d194 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	2b3a      	cmp	r3, #58	; 0x3a
 800d1b0:	d11c      	bne.n	800d1ec <get_ldnumber+0x76>
			tp = *path;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	1c5a      	adds	r2, r3, #1
 800d1bc:	60fa      	str	r2, [r7, #12]
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	3b30      	subs	r3, #48	; 0x30
 800d1c2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	2b09      	cmp	r3, #9
 800d1c8:	d80e      	bhi.n	800d1e8 <get_ldnumber+0x72>
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d10a      	bne.n	800d1e8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d107      	bne.n	800d1e8 <get_ldnumber+0x72>
					vol = (int)i;
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	617b      	str	r3, [r7, #20]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	697a      	ldr	r2, [r7, #20]
 800d1e6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	e002      	b.n	800d1f2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d1f0:	693b      	ldr	r3, [r7, #16]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	371c      	adds	r7, #28
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
	...

0800d200 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	70da      	strb	r2, [r3, #3]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f04f 32ff 	mov.w	r2, #4294967295
 800d216:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f7fd fbf6 	bl	800aa0c <move_window>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <check_fs+0x2a>
 800d226:	2304      	movs	r3, #4
 800d228:	e044      	b.n	800d2b4 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	333c      	adds	r3, #60	; 0x3c
 800d22e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d232:	4618      	mov	r0, r3
 800d234:	f7fc fff6 	bl	800a224 <ld_word>
 800d238:	4603      	mov	r3, r0
 800d23a:	461a      	mov	r2, r3
 800d23c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d240:	429a      	cmp	r2, r3
 800d242:	d001      	beq.n	800d248 <check_fs+0x48>
 800d244:	2303      	movs	r3, #3
 800d246:	e035      	b.n	800d2b4 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d24e:	2be9      	cmp	r3, #233	; 0xe9
 800d250:	d009      	beq.n	800d266 <check_fs+0x66>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d258:	2beb      	cmp	r3, #235	; 0xeb
 800d25a:	d11e      	bne.n	800d29a <check_fs+0x9a>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d262:	2b90      	cmp	r3, #144	; 0x90
 800d264:	d119      	bne.n	800d29a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	333c      	adds	r3, #60	; 0x3c
 800d26a:	3336      	adds	r3, #54	; 0x36
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7fc fff1 	bl	800a254 <ld_dword>
 800d272:	4603      	mov	r3, r0
 800d274:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d278:	4a10      	ldr	r2, [pc, #64]	; (800d2bc <check_fs+0xbc>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d101      	bne.n	800d282 <check_fs+0x82>
 800d27e:	2300      	movs	r3, #0
 800d280:	e018      	b.n	800d2b4 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	333c      	adds	r3, #60	; 0x3c
 800d286:	3352      	adds	r3, #82	; 0x52
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fc ffe3 	bl	800a254 <ld_dword>
 800d28e:	4602      	mov	r2, r0
 800d290:	4b0b      	ldr	r3, [pc, #44]	; (800d2c0 <check_fs+0xc0>)
 800d292:	429a      	cmp	r2, r3
 800d294:	d101      	bne.n	800d29a <check_fs+0x9a>
 800d296:	2300      	movs	r3, #0
 800d298:	e00c      	b.n	800d2b4 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	333c      	adds	r3, #60	; 0x3c
 800d29e:	220b      	movs	r2, #11
 800d2a0:	4908      	ldr	r1, [pc, #32]	; (800d2c4 <check_fs+0xc4>)
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fd f9bf 	bl	800a626 <mem_cmp>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d101      	bne.n	800d2b2 <check_fs+0xb2>
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e000      	b.n	800d2b4 <check_fs+0xb4>
#endif
	return 2;
 800d2b2:	2302      	movs	r3, #2
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	00544146 	.word	0x00544146
 800d2c0:	33544146 	.word	0x33544146
 800d2c4:	0800f830 	.word	0x0800f830

0800d2c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d2c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800d2cc:	b098      	sub	sp, #96	; 0x60
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	60f8      	str	r0, [r7, #12]
 800d2d2:	60b9      	str	r1, [r7, #8]
 800d2d4:	4613      	mov	r3, r2
 800d2d6:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f7ff ff49 	bl	800d176 <get_ldnumber>
 800d2e4:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800d2e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	da01      	bge.n	800d2f0 <find_volume+0x28>
 800d2ec:	230b      	movs	r3, #11
 800d2ee:	e36e      	b.n	800d9ce <find_volume+0x706>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d2f0:	4aaa      	ldr	r2, [pc, #680]	; (800d59c <find_volume+0x2d4>)
 800d2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2f8:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d101      	bne.n	800d304 <find_volume+0x3c>
 800d300:	230c      	movs	r3, #12
 800d302:	e364      	b.n	800d9ce <find_volume+0x706>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d308:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d30a:	79fb      	ldrb	r3, [r7, #7]
 800d30c:	f023 0301 	bic.w	r3, r3, #1
 800d310:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d01a      	beq.n	800d350 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800d31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d31c:	785b      	ldrb	r3, [r3, #1]
 800d31e:	4618      	mov	r0, r3
 800d320:	f7fc fee2 	bl	800a0e8 <disk_status>
 800d324:	4603      	mov	r3, r0
 800d326:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d32a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d32e:	f003 0301 	and.w	r3, r3, #1
 800d332:	2b00      	cmp	r3, #0
 800d334:	d10c      	bne.n	800d350 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d336:	79fb      	ldrb	r3, [r7, #7]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d007      	beq.n	800d34c <find_volume+0x84>
 800d33c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d340:	f003 0304 	and.w	r3, r3, #4
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800d348:	230a      	movs	r3, #10
 800d34a:	e340      	b.n	800d9ce <find_volume+0x706>
			}
			return FR_OK;				/* The file system object is valid */
 800d34c:	2300      	movs	r3, #0
 800d34e:	e33e      	b.n	800d9ce <find_volume+0x706>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d352:	2200      	movs	r2, #0
 800d354:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d35c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d360:	785b      	ldrb	r3, [r3, #1]
 800d362:	4618      	mov	r0, r3
 800d364:	f7fc feda 	bl	800a11c <disk_initialize>
 800d368:	4603      	mov	r3, r0
 800d36a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d36e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d372:	f003 0301 	and.w	r3, r3, #1
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d37a:	2303      	movs	r3, #3
 800d37c:	e327      	b.n	800d9ce <find_volume+0x706>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d37e:	79fb      	ldrb	r3, [r7, #7]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d007      	beq.n	800d394 <find_volume+0xcc>
 800d384:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d388:	f003 0304 	and.w	r3, r3, #4
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d001      	beq.n	800d394 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800d390:	230a      	movs	r3, #10
 800d392:	e31c      	b.n	800d9ce <find_volume+0x706>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d396:	7858      	ldrb	r0, [r3, #1]
 800d398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d39a:	330c      	adds	r3, #12
 800d39c:	461a      	mov	r2, r3
 800d39e:	2102      	movs	r1, #2
 800d3a0:	f7fc ff22 	bl	800a1e8 <disk_ioctl>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d001      	beq.n	800d3ae <find_volume+0xe6>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e30f      	b.n	800d9ce <find_volume+0x706>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d3ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3b0:	899b      	ldrh	r3, [r3, #12]
 800d3b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3b6:	d80d      	bhi.n	800d3d4 <find_volume+0x10c>
 800d3b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3ba:	899b      	ldrh	r3, [r3, #12]
 800d3bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3c0:	d308      	bcc.n	800d3d4 <find_volume+0x10c>
 800d3c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3c4:	899b      	ldrh	r3, [r3, #12]
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3ca:	899b      	ldrh	r3, [r3, #12]
 800d3cc:	3b01      	subs	r3, #1
 800d3ce:	4013      	ands	r3, r2
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d001      	beq.n	800d3d8 <find_volume+0x110>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e2fa      	b.n	800d9ce <find_volume+0x706>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d3dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d3de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d3e0:	f7ff ff0e 	bl	800d200 <check_fs>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d3ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3ee:	2b02      	cmp	r3, #2
 800d3f0:	d14b      	bne.n	800d48a <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3f6:	e01f      	b.n	800d438 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3fa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d3fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d400:	011b      	lsls	r3, r3, #4
 800d402:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d406:	4413      	add	r3, r2
 800d408:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40c:	3304      	adds	r3, #4
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d006      	beq.n	800d422 <find_volume+0x15a>
 800d414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d416:	3308      	adds	r3, #8
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fc ff1b 	bl	800a254 <ld_dword>
 800d41e:	4602      	mov	r2, r0
 800d420:	e000      	b.n	800d424 <find_volume+0x15c>
 800d422:	2200      	movs	r2, #0
 800d424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800d42c:	440b      	add	r3, r1
 800d42e:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d434:	3301      	adds	r3, #1
 800d436:	64bb      	str	r3, [r7, #72]	; 0x48
 800d438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d43a:	2b03      	cmp	r3, #3
 800d43c:	d9dc      	bls.n	800d3f8 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d43e:	2300      	movs	r3, #0
 800d440:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800d442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d444:	2b00      	cmp	r3, #0
 800d446:	d002      	beq.n	800d44e <find_volume+0x186>
 800d448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d44a:	3b01      	subs	r3, #1
 800d44c:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d44e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d456:	4413      	add	r3, r2
 800d458:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d45c:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d45e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d460:	2b00      	cmp	r3, #0
 800d462:	d005      	beq.n	800d470 <find_volume+0x1a8>
 800d464:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d466:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d468:	f7ff feca 	bl	800d200 <check_fs>
 800d46c:	4603      	mov	r3, r0
 800d46e:	e000      	b.n	800d472 <find_volume+0x1aa>
 800d470:	2303      	movs	r3, #3
 800d472:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d476:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d905      	bls.n	800d48a <find_volume+0x1c2>
 800d47e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d480:	3301      	adds	r3, #1
 800d482:	64bb      	str	r3, [r7, #72]	; 0x48
 800d484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d486:	2b03      	cmp	r3, #3
 800d488:	d9e1      	bls.n	800d44e <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d48a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d48e:	2b04      	cmp	r3, #4
 800d490:	d101      	bne.n	800d496 <find_volume+0x1ce>
 800d492:	2301      	movs	r3, #1
 800d494:	e29b      	b.n	800d9ce <find_volume+0x706>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d901      	bls.n	800d4a2 <find_volume+0x1da>
 800d49e:	230d      	movs	r3, #13
 800d4a0:	e295      	b.n	800d9ce <find_volume+0x706>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800d4a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	f040 8101 	bne.w	800d6ae <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800d4ac:	230b      	movs	r3, #11
 800d4ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4b0:	e002      	b.n	800d4b8 <find_volume+0x1f0>
 800d4b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4ba:	2b3f      	cmp	r3, #63	; 0x3f
 800d4bc:	d806      	bhi.n	800d4cc <find_volume+0x204>
 800d4be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4c2:	4413      	add	r3, r2
 800d4c4:	333c      	adds	r3, #60	; 0x3c
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d0f2      	beq.n	800d4b2 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d4cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4ce:	2b3f      	cmp	r3, #63	; 0x3f
 800d4d0:	d801      	bhi.n	800d4d6 <find_volume+0x20e>
 800d4d2:	230d      	movs	r3, #13
 800d4d4:	e27b      	b.n	800d9ce <find_volume+0x706>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800d4d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4d8:	333c      	adds	r3, #60	; 0x3c
 800d4da:	3368      	adds	r3, #104	; 0x68
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7fc fea1 	bl	800a224 <ld_word>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4e8:	d001      	beq.n	800d4ee <find_volume+0x226>
 800d4ea:	230d      	movs	r3, #13
 800d4ec:	e26f      	b.n	800d9ce <find_volume+0x706>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800d4ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4f0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	4093      	lsls	r3, r2
 800d4fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4fc:	8992      	ldrh	r2, [r2, #12]
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d001      	beq.n	800d506 <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 800d502:	230d      	movs	r3, #13
 800d504:	e263      	b.n	800d9ce <find_volume+0x706>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d508:	333c      	adds	r3, #60	; 0x3c
 800d50a:	3348      	adds	r3, #72	; 0x48
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7fc fec4 	bl	800a29a <ld_qword>
 800d512:	460a      	mov	r2, r1
 800d514:	4601      	mov	r1, r0
 800d516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d518:	469b      	mov	fp, r3
 800d51a:	f04f 0c00 	mov.w	ip, #0
 800d51e:	eb1b 0301 	adds.w	r3, fp, r1
 800d522:	eb4c 0402 	adc.w	r4, ip, r2
 800d526:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d52a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d52e:	2c01      	cmp	r4, #1
 800d530:	bf08      	it	eq
 800d532:	2b00      	cmpeq	r3, #0
 800d534:	d301      	bcc.n	800d53a <find_volume+0x272>
 800d536:	230d      	movs	r3, #13
 800d538:	e249      	b.n	800d9ce <find_volume+0x706>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800d53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d53c:	333c      	adds	r3, #60	; 0x3c
 800d53e:	3354      	adds	r3, #84	; 0x54
 800d540:	4618      	mov	r0, r3
 800d542:	f7fc fe87 	bl	800a254 <ld_dword>
 800d546:	4602      	mov	r2, r0
 800d548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d54a:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d54e:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800d552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d554:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d558:	789b      	ldrb	r3, [r3, #2]
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d001      	beq.n	800d562 <find_volume+0x29a>
 800d55e:	230d      	movs	r3, #13
 800d560:	e235      	b.n	800d9ce <find_volume+0x706>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800d562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d564:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800d568:	461a      	mov	r2, r3
 800d56a:	2301      	movs	r3, #1
 800d56c:	4093      	lsls	r3, r2
 800d56e:	b29a      	uxth	r2, r3
 800d570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d572:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d576:	895b      	ldrh	r3, [r3, #10]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d101      	bne.n	800d580 <find_volume+0x2b8>
 800d57c:	230d      	movs	r3, #13
 800d57e:	e226      	b.n	800d9ce <find_volume+0x706>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800d580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d582:	333c      	adds	r3, #60	; 0x3c
 800d584:	335c      	adds	r3, #92	; 0x5c
 800d586:	4618      	mov	r0, r3
 800d588:	f7fc fe64 	bl	800a254 <ld_dword>
 800d58c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d590:	4a03      	ldr	r2, [pc, #12]	; (800d5a0 <find_volume+0x2d8>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d906      	bls.n	800d5a4 <find_volume+0x2dc>
 800d596:	230d      	movs	r3, #13
 800d598:	e219      	b.n	800d9ce <find_volume+0x706>
 800d59a:	bf00      	nop
 800d59c:	200001e4 	.word	0x200001e4
 800d5a0:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800d5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a6:	1c9a      	adds	r2, r3, #2
 800d5a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5aa:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800d5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5b0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5b4:	333c      	adds	r3, #60	; 0x3c
 800d5b6:	3358      	adds	r3, #88	; 0x58
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fc fe4b 	bl	800a254 <ld_dword>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5c2:	441a      	add	r2, r3
 800d5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5c6:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800d5c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ca:	333c      	adds	r3, #60	; 0x3c
 800d5cc:	3350      	adds	r3, #80	; 0x50
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7fc fe40 	bl	800a254 <ld_dword>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5d8:	441a      	add	r2, r3
 800d5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5dc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d5de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	f04f 0200 	mov.w	r2, #0
 800d5e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ea:	895b      	ldrh	r3, [r3, #10]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f0:	fb03 f300 	mul.w	r3, r3, r0
 800d5f4:	469b      	mov	fp, r3
 800d5f6:	f04f 0c00 	mov.w	ip, #0
 800d5fa:	eb1b 0301 	adds.w	r3, fp, r1
 800d5fe:	eb4c 0402 	adc.w	r4, ip, r2
 800d602:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d606:	42a2      	cmp	r2, r4
 800d608:	bf08      	it	eq
 800d60a:	4299      	cmpeq	r1, r3
 800d60c:	d201      	bcs.n	800d612 <find_volume+0x34a>
 800d60e:	230d      	movs	r3, #13
 800d610:	e1dd      	b.n	800d9ce <find_volume+0x706>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d614:	333c      	adds	r3, #60	; 0x3c
 800d616:	3360      	adds	r3, #96	; 0x60
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fc fe1b 	bl	800a254 <ld_dword>
 800d61e:	4602      	mov	r2, r0
 800d620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d622:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d628:	4619      	mov	r1, r3
 800d62a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d62c:	f7fd fa1b 	bl	800aa66 <clust2sect>
 800d630:	4603      	mov	r3, r0
 800d632:	4619      	mov	r1, r3
 800d634:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d636:	f7fd f9e9 	bl	800aa0c <move_window>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d001      	beq.n	800d644 <find_volume+0x37c>
 800d640:	2301      	movs	r3, #1
 800d642:	e1c4      	b.n	800d9ce <find_volume+0x706>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d644:	2300      	movs	r3, #0
 800d646:	64bb      	str	r3, [r7, #72]	; 0x48
 800d648:	e015      	b.n	800d676 <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d64a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d64c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d64e:	4413      	add	r3, r2
 800d650:	333c      	adds	r3, #60	; 0x3c
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	2b81      	cmp	r3, #129	; 0x81
 800d656:	d10b      	bne.n	800d670 <find_volume+0x3a8>
 800d658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d65a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d660:	3314      	adds	r3, #20
 800d662:	4413      	add	r3, r2
 800d664:	4618      	mov	r0, r3
 800d666:	f7fc fdf5 	bl	800a254 <ld_dword>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d009      	beq.n	800d684 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d672:	3320      	adds	r3, #32
 800d674:	64bb      	str	r3, [r7, #72]	; 0x48
 800d676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d678:	899b      	ldrh	r3, [r3, #12]
 800d67a:	461a      	mov	r2, r3
 800d67c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d67e:	4293      	cmp	r3, r2
 800d680:	d3e3      	bcc.n	800d64a <find_volume+0x382>
 800d682:	e000      	b.n	800d686 <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d684:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d688:	899b      	ldrh	r3, [r3, #12]
 800d68a:	461a      	mov	r2, r3
 800d68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d68e:	4293      	cmp	r3, r2
 800d690:	d101      	bne.n	800d696 <find_volume+0x3ce>
 800d692:	230d      	movs	r3, #13
 800d694:	e19b      	b.n	800d9ce <find_volume+0x706>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d698:	f04f 32ff 	mov.w	r2, #4294967295
 800d69c:	61da      	str	r2, [r3, #28]
 800d69e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6a0:	69da      	ldr	r2, [r3, #28]
 800d6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6a4:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d6a6:	2304      	movs	r3, #4
 800d6a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d6ac:	e177      	b.n	800d99e <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6b0:	333c      	adds	r3, #60	; 0x3c
 800d6b2:	330b      	adds	r3, #11
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7fc fdb5 	bl	800a224 <ld_word>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	461a      	mov	r2, r3
 800d6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c0:	899b      	ldrh	r3, [r3, #12]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d001      	beq.n	800d6ca <find_volume+0x402>
 800d6c6:	230d      	movs	r3, #13
 800d6c8:	e181      	b.n	800d9ce <find_volume+0x706>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d6ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6cc:	333c      	adds	r3, #60	; 0x3c
 800d6ce:	3316      	adds	r3, #22
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7fc fda7 	bl	800a224 <ld_word>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d6da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d106      	bne.n	800d6ee <find_volume+0x426>
 800d6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6e2:	333c      	adds	r3, #60	; 0x3c
 800d6e4:	3324      	adds	r3, #36	; 0x24
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fc fdb4 	bl	800a254 <ld_dword>
 800d6ec:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800d6ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6f2:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6f6:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800d6fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6fc:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d6fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d700:	789b      	ldrb	r3, [r3, #2]
 800d702:	2b01      	cmp	r3, #1
 800d704:	d005      	beq.n	800d712 <find_volume+0x44a>
 800d706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d708:	789b      	ldrb	r3, [r3, #2]
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d001      	beq.n	800d712 <find_volume+0x44a>
 800d70e:	230d      	movs	r3, #13
 800d710:	e15d      	b.n	800d9ce <find_volume+0x706>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d714:	789b      	ldrb	r3, [r3, #2]
 800d716:	461a      	mov	r2, r3
 800d718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d71a:	fb02 f303 	mul.w	r3, r2, r3
 800d71e:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d722:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d726:	b29a      	uxth	r2, r3
 800d728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d72a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d72e:	895b      	ldrh	r3, [r3, #10]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d008      	beq.n	800d746 <find_volume+0x47e>
 800d734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d736:	895b      	ldrh	r3, [r3, #10]
 800d738:	461a      	mov	r2, r3
 800d73a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d73c:	895b      	ldrh	r3, [r3, #10]
 800d73e:	3b01      	subs	r3, #1
 800d740:	4013      	ands	r3, r2
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <find_volume+0x482>
 800d746:	230d      	movs	r3, #13
 800d748:	e141      	b.n	800d9ce <find_volume+0x706>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d74a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d74c:	333c      	adds	r3, #60	; 0x3c
 800d74e:	3311      	adds	r3, #17
 800d750:	4618      	mov	r0, r3
 800d752:	f7fc fd67 	bl	800a224 <ld_word>
 800d756:	4603      	mov	r3, r0
 800d758:	461a      	mov	r2, r3
 800d75a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d75c:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d75e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d760:	891b      	ldrh	r3, [r3, #8]
 800d762:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d764:	8992      	ldrh	r2, [r2, #12]
 800d766:	0952      	lsrs	r2, r2, #5
 800d768:	b292      	uxth	r2, r2
 800d76a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d76e:	fb02 f201 	mul.w	r2, r2, r1
 800d772:	1a9b      	subs	r3, r3, r2
 800d774:	b29b      	uxth	r3, r3
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <find_volume+0x4b6>
 800d77a:	230d      	movs	r3, #13
 800d77c:	e127      	b.n	800d9ce <find_volume+0x706>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d780:	333c      	adds	r3, #60	; 0x3c
 800d782:	3313      	adds	r3, #19
 800d784:	4618      	mov	r0, r3
 800d786:	f7fc fd4d 	bl	800a224 <ld_word>
 800d78a:	4603      	mov	r3, r0
 800d78c:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d78e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d790:	2b00      	cmp	r3, #0
 800d792:	d106      	bne.n	800d7a2 <find_volume+0x4da>
 800d794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d796:	333c      	adds	r3, #60	; 0x3c
 800d798:	3320      	adds	r3, #32
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fc fd5a 	bl	800a254 <ld_dword>
 800d7a0:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d7a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7a4:	333c      	adds	r3, #60	; 0x3c
 800d7a6:	330e      	adds	r3, #14
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fc fd3b 	bl	800a224 <ld_word>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d7b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d101      	bne.n	800d7bc <find_volume+0x4f4>
 800d7b8:	230d      	movs	r3, #13
 800d7ba:	e108      	b.n	800d9ce <find_volume+0x706>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d7bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d7be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7c0:	4413      	add	r3, r2
 800d7c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7c4:	8911      	ldrh	r1, [r2, #8]
 800d7c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7c8:	8992      	ldrh	r2, [r2, #12]
 800d7ca:	0952      	lsrs	r2, r2, #5
 800d7cc:	b292      	uxth	r2, r2
 800d7ce:	fbb1 f2f2 	udiv	r2, r1, r2
 800d7d2:	b292      	uxth	r2, r2
 800d7d4:	4413      	add	r3, r2
 800d7d6:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d7d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d201      	bcs.n	800d7e4 <find_volume+0x51c>
 800d7e0:	230d      	movs	r3, #13
 800d7e2:	e0f4      	b.n	800d9ce <find_volume+0x706>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d7e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e8:	1ad3      	subs	r3, r2, r3
 800d7ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7ec:	8952      	ldrh	r2, [r2, #10]
 800d7ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d101      	bne.n	800d7fe <find_volume+0x536>
 800d7fa:	230d      	movs	r3, #13
 800d7fc:	e0e7      	b.n	800d9ce <find_volume+0x706>
		fmt = FS_FAT32;
 800d7fe:	2303      	movs	r3, #3
 800d800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d806:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d802      	bhi.n	800d814 <find_volume+0x54c>
 800d80e:	2302      	movs	r3, #2
 800d810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d802      	bhi.n	800d824 <find_volume+0x55c>
 800d81e:	2301      	movs	r3, #1
 800d820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d826:	1c9a      	adds	r2, r3, #2
 800d828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d82a:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800d82c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d82e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d830:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d832:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d836:	441a      	add	r2, r3
 800d838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d83a:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800d83c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d840:	441a      	add	r2, r3
 800d842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d844:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800d846:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d84a:	2b03      	cmp	r3, #3
 800d84c:	d11e      	bne.n	800d88c <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d850:	333c      	adds	r3, #60	; 0x3c
 800d852:	332a      	adds	r3, #42	; 0x2a
 800d854:	4618      	mov	r0, r3
 800d856:	f7fc fce5 	bl	800a224 <ld_word>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <find_volume+0x59c>
 800d860:	230d      	movs	r3, #13
 800d862:	e0b4      	b.n	800d9ce <find_volume+0x706>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d866:	891b      	ldrh	r3, [r3, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d001      	beq.n	800d870 <find_volume+0x5a8>
 800d86c:	230d      	movs	r3, #13
 800d86e:	e0ae      	b.n	800d9ce <find_volume+0x706>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d872:	333c      	adds	r3, #60	; 0x3c
 800d874:	332c      	adds	r3, #44	; 0x2c
 800d876:	4618      	mov	r0, r3
 800d878:	f7fc fcec 	bl	800a254 <ld_dword>
 800d87c:	4602      	mov	r2, r0
 800d87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d880:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d884:	6a1b      	ldr	r3, [r3, #32]
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d88a:	e01f      	b.n	800d8cc <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d88c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d88e:	891b      	ldrh	r3, [r3, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d101      	bne.n	800d898 <find_volume+0x5d0>
 800d894:	230d      	movs	r3, #13
 800d896:	e09a      	b.n	800d9ce <find_volume+0x706>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d89e:	441a      	add	r2, r3
 800d8a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8a2:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d8a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8a8:	2b02      	cmp	r3, #2
 800d8aa:	d103      	bne.n	800d8b4 <find_volume+0x5ec>
 800d8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8ae:	6a1b      	ldr	r3, [r3, #32]
 800d8b0:	005b      	lsls	r3, r3, #1
 800d8b2:	e00a      	b.n	800d8ca <find_volume+0x602>
 800d8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8b6:	6a1a      	ldr	r2, [r3, #32]
 800d8b8:	4613      	mov	r3, r2
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	4413      	add	r3, r2
 800d8be:	085a      	lsrs	r2, r3, #1
 800d8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8c2:	6a1b      	ldr	r3, [r3, #32]
 800d8c4:	f003 0301 	and.w	r3, r3, #1
 800d8c8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d8ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d8cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8d2:	899b      	ldrh	r3, [r3, #12]
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8d8:	440b      	add	r3, r1
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d8de:	8989      	ldrh	r1, [r1, #12]
 800d8e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d201      	bcs.n	800d8ec <find_volume+0x624>
 800d8e8:	230d      	movs	r3, #13
 800d8ea:	e070      	b.n	800d9ce <find_volume+0x706>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f2:	61da      	str	r2, [r3, #28]
 800d8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8f6:	69da      	ldr	r2, [r3, #28]
 800d8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8fa:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800d8fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8fe:	2280      	movs	r2, #128	; 0x80
 800d900:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d906:	2b03      	cmp	r3, #3
 800d908:	d149      	bne.n	800d99e <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d90a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d90c:	333c      	adds	r3, #60	; 0x3c
 800d90e:	3330      	adds	r3, #48	; 0x30
 800d910:	4618      	mov	r0, r3
 800d912:	f7fc fc87 	bl	800a224 <ld_word>
 800d916:	4603      	mov	r3, r0
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d140      	bne.n	800d99e <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d91c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d91e:	3301      	adds	r3, #1
 800d920:	4619      	mov	r1, r3
 800d922:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d924:	f7fd f872 	bl	800aa0c <move_window>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d137      	bne.n	800d99e <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 800d92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d930:	2200      	movs	r2, #0
 800d932:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d936:	333c      	adds	r3, #60	; 0x3c
 800d938:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fc fc71 	bl	800a224 <ld_word>
 800d942:	4603      	mov	r3, r0
 800d944:	461a      	mov	r2, r3
 800d946:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d127      	bne.n	800d99e <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d94e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d950:	333c      	adds	r3, #60	; 0x3c
 800d952:	4618      	mov	r0, r3
 800d954:	f7fc fc7e 	bl	800a254 <ld_dword>
 800d958:	4602      	mov	r2, r0
 800d95a:	4b1f      	ldr	r3, [pc, #124]	; (800d9d8 <find_volume+0x710>)
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d11e      	bne.n	800d99e <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d962:	333c      	adds	r3, #60	; 0x3c
 800d964:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fc fc73 	bl	800a254 <ld_dword>
 800d96e:	4602      	mov	r2, r0
 800d970:	4b1a      	ldr	r3, [pc, #104]	; (800d9dc <find_volume+0x714>)
 800d972:	429a      	cmp	r2, r3
 800d974:	d113      	bne.n	800d99e <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d978:	333c      	adds	r3, #60	; 0x3c
 800d97a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fc fc68 	bl	800a254 <ld_dword>
 800d984:	4602      	mov	r2, r0
 800d986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d988:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d98a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d98c:	333c      	adds	r3, #60	; 0x3c
 800d98e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d992:	4618      	mov	r0, r3
 800d994:	f7fc fc5e 	bl	800a254 <ld_dword>
 800d998:	4602      	mov	r2, r0
 800d99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d99c:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d99e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9a0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800d9a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d9a6:	4b0e      	ldr	r3, [pc, #56]	; (800d9e0 <find_volume+0x718>)
 800d9a8:	881b      	ldrh	r3, [r3, #0]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	4b0c      	ldr	r3, [pc, #48]	; (800d9e0 <find_volume+0x718>)
 800d9b0:	801a      	strh	r2, [r3, #0]
 800d9b2:	4b0b      	ldr	r3, [pc, #44]	; (800d9e0 <find_volume+0x718>)
 800d9b4:	881a      	ldrh	r2, [r3, #0]
 800d9b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9b8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d9ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9bc:	4a09      	ldr	r2, [pc, #36]	; (800d9e4 <find_volume+0x71c>)
 800d9be:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800d9c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9c2:	4a09      	ldr	r2, [pc, #36]	; (800d9e8 <find_volume+0x720>)
 800d9c4:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d9c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d9c8:	f7fc ffb8 	bl	800a93c <clear_lock>
#endif
	return FR_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3760      	adds	r7, #96	; 0x60
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800d9d8:	41615252 	.word	0x41615252
 800d9dc:	61417272 	.word	0x61417272
 800d9e0:	200001e8 	.word	0x200001e8
 800d9e4:	2000046c 	.word	0x2000046c
 800d9e8:	2000020c 	.word	0x2000020c

0800d9ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d9f6:	2309      	movs	r3, #9
 800d9f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d01c      	beq.n	800da3a <validate+0x4e>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d018      	beq.n	800da3a <validate+0x4e>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d013      	beq.n	800da3a <validate+0x4e>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	889a      	ldrh	r2, [r3, #4]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	88db      	ldrh	r3, [r3, #6]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d10c      	bne.n	800da3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	785b      	ldrb	r3, [r3, #1]
 800da26:	4618      	mov	r0, r3
 800da28:	f7fc fb5e 	bl	800a0e8 <disk_status>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f003 0301 	and.w	r3, r3, #1
 800da32:	2b00      	cmp	r3, #0
 800da34:	d101      	bne.n	800da3a <validate+0x4e>
			res = FR_OK;
 800da36:	2300      	movs	r3, #0
 800da38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800da3a:	7bfb      	ldrb	r3, [r7, #15]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d102      	bne.n	800da46 <validate+0x5a>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	e000      	b.n	800da48 <validate+0x5c>
 800da46:	2300      	movs	r3, #0
 800da48:	683a      	ldr	r2, [r7, #0]
 800da4a:	6013      	str	r3, [r2, #0]
	return res;
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
	...

0800da58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b088      	sub	sp, #32
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	4613      	mov	r3, r2
 800da64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800da6a:	f107 0310 	add.w	r3, r7, #16
 800da6e:	4618      	mov	r0, r3
 800da70:	f7ff fb81 	bl	800d176 <get_ldnumber>
 800da74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	da01      	bge.n	800da80 <f_mount+0x28>
 800da7c:	230b      	movs	r3, #11
 800da7e:	e02b      	b.n	800dad8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800da80:	4a17      	ldr	r2, [pc, #92]	; (800dae0 <f_mount+0x88>)
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d005      	beq.n	800da9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800da90:	69b8      	ldr	r0, [r7, #24]
 800da92:	f7fc ff53 	bl	800a93c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	2200      	movs	r2, #0
 800da9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d002      	beq.n	800daa8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2200      	movs	r2, #0
 800daa6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	490d      	ldr	r1, [pc, #52]	; (800dae0 <f_mount+0x88>)
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d002      	beq.n	800dabe <f_mount+0x66>
 800dab8:	79fb      	ldrb	r3, [r7, #7]
 800daba:	2b01      	cmp	r3, #1
 800dabc:	d001      	beq.n	800dac2 <f_mount+0x6a>
 800dabe:	2300      	movs	r3, #0
 800dac0:	e00a      	b.n	800dad8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dac2:	f107 010c 	add.w	r1, r7, #12
 800dac6:	f107 0308 	add.w	r3, r7, #8
 800daca:	2200      	movs	r2, #0
 800dacc:	4618      	mov	r0, r3
 800dace:	f7ff fbfb 	bl	800d2c8 <find_volume>
 800dad2:	4603      	mov	r3, r0
 800dad4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3720      	adds	r7, #32
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	200001e4 	.word	0x200001e4

0800dae4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dae4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800dae8:	b0a2      	sub	sp, #136	; 0x88
 800daea:	af00      	add	r7, sp, #0
 800daec:	60f8      	str	r0, [r7, #12]
 800daee:	60b9      	str	r1, [r7, #8]
 800daf0:	4613      	mov	r3, r2
 800daf2:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d101      	bne.n	800dafe <f_open+0x1a>
 800dafa:	2309      	movs	r3, #9
 800dafc:	e2a8      	b.n	800e050 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dafe:	79fb      	ldrb	r3, [r7, #7]
 800db00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db04:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800db06:	79fa      	ldrb	r2, [r7, #7]
 800db08:	f107 0114 	add.w	r1, r7, #20
 800db0c:	f107 0308 	add.w	r3, r7, #8
 800db10:	4618      	mov	r0, r3
 800db12:	f7ff fbd9 	bl	800d2c8 <find_volume>
 800db16:	4603      	mov	r3, r0
 800db18:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 800db1c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800db20:	2b00      	cmp	r3, #0
 800db22:	f040 828c 	bne.w	800e03e <f_open+0x55a>
		dj.obj.fs = fs;
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	f107 0318 	add.w	r3, r7, #24
 800db30:	4611      	mov	r1, r2
 800db32:	4618      	mov	r0, r3
 800db34:	f7ff fa72 	bl	800d01c <follow_path>
 800db38:	4603      	mov	r3, r0
 800db3a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800db3e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800db42:	2b00      	cmp	r3, #0
 800db44:	d11a      	bne.n	800db7c <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800db46:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800db4a:	b25b      	sxtb	r3, r3
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	da03      	bge.n	800db58 <f_open+0x74>
				res = FR_INVALID_NAME;
 800db50:	2306      	movs	r3, #6
 800db52:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800db56:	e011      	b.n	800db7c <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800db58:	79fb      	ldrb	r3, [r7, #7]
 800db5a:	f023 0301 	bic.w	r3, r3, #1
 800db5e:	2b00      	cmp	r3, #0
 800db60:	bf14      	ite	ne
 800db62:	2301      	movne	r3, #1
 800db64:	2300      	moveq	r3, #0
 800db66:	b2db      	uxtb	r3, r3
 800db68:	461a      	mov	r2, r3
 800db6a:	f107 0318 	add.w	r3, r7, #24
 800db6e:	4611      	mov	r1, r2
 800db70:	4618      	mov	r0, r3
 800db72:	f7fc fd9b 	bl	800a6ac <chk_lock>
 800db76:	4603      	mov	r3, r0
 800db78:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800db7c:	79fb      	ldrb	r3, [r7, #7]
 800db7e:	f003 031c 	and.w	r3, r3, #28
 800db82:	2b00      	cmp	r3, #0
 800db84:	f000 8109 	beq.w	800dd9a <f_open+0x2b6>
			if (res != FR_OK) {					/* No file, create new */
 800db88:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d017      	beq.n	800dbc0 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800db90:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800db94:	2b04      	cmp	r3, #4
 800db96:	d10e      	bne.n	800dbb6 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800db98:	f7fc fde4 	bl	800a764 <enq_lock>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d006      	beq.n	800dbb0 <f_open+0xcc>
 800dba2:	f107 0318 	add.w	r3, r7, #24
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fe fde4 	bl	800c774 <dir_register>
 800dbac:	4603      	mov	r3, r0
 800dbae:	e000      	b.n	800dbb2 <f_open+0xce>
 800dbb0:	2312      	movs	r3, #18
 800dbb2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dbb6:	79fb      	ldrb	r3, [r7, #7]
 800dbb8:	f043 0308 	orr.w	r3, r3, #8
 800dbbc:	71fb      	strb	r3, [r7, #7]
 800dbbe:	e010      	b.n	800dbe2 <f_open+0xfe>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dbc0:	7fbb      	ldrb	r3, [r7, #30]
 800dbc2:	f003 0311 	and.w	r3, r3, #17
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d003      	beq.n	800dbd2 <f_open+0xee>
					res = FR_DENIED;
 800dbca:	2307      	movs	r3, #7
 800dbcc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800dbd0:	e007      	b.n	800dbe2 <f_open+0xfe>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dbd2:	79fb      	ldrb	r3, [r7, #7]
 800dbd4:	f003 0304 	and.w	r3, r3, #4
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d002      	beq.n	800dbe2 <f_open+0xfe>
 800dbdc:	2308      	movs	r3, #8
 800dbde:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dbe2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	f040 80f1 	bne.w	800ddce <f_open+0x2ea>
 800dbec:	79fb      	ldrb	r3, [r7, #7]
 800dbee:	f003 0308 	and.w	r3, r3, #8
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	f000 80eb 	beq.w	800ddce <f_open+0x2ea>
				dw = GET_FATTIME();
 800dbf8:	f7f9 fa7e 	bl	80070f8 <get_fattime>
 800dbfc:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	2b04      	cmp	r3, #4
 800dc04:	f040 8082 	bne.w	800dd0c <f_open+0x228>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800dc08:	697a      	ldr	r2, [r7, #20]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	695b      	ldr	r3, [r3, #20]
 800dc12:	3334      	adds	r3, #52	; 0x34
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fc fb1d 	bl	800a254 <ld_dword>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	695b      	ldr	r3, [r3, #20]
 800dc24:	3338      	adds	r3, #56	; 0x38
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7fc fb37 	bl	800a29a <ld_qword>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	460c      	mov	r4, r1
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	695b      	ldr	r3, [r3, #20]
 800dc3a:	3321      	adds	r3, #33	; 0x21
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	f003 0302 	and.w	r3, r3, #2
 800dc42:	b2da      	uxtb	r2, r3
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	695b      	ldr	r3, [r3, #20]
 800dc52:	3308      	adds	r3, #8
 800dc54:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fc fbf7 	bl	800a44a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	695b      	ldr	r3, [r3, #20]
 800dc60:	3314      	adds	r3, #20
 800dc62:	2200      	movs	r2, #0
 800dc64:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	695b      	ldr	r3, [r3, #20]
 800dc6a:	330c      	adds	r3, #12
 800dc6c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7fc fbeb 	bl	800a44a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	695b      	ldr	r3, [r3, #20]
 800dc78:	3315      	adds	r3, #21
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	695b      	ldr	r3, [r3, #20]
 800dc82:	3304      	adds	r3, #4
 800dc84:	2220      	movs	r2, #32
 800dc86:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	695b      	ldr	r3, [r3, #20]
 800dc8c:	3334      	adds	r3, #52	; 0x34
 800dc8e:	2100      	movs	r1, #0
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fc fbda 	bl	800a44a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	695b      	ldr	r3, [r3, #20]
 800dc9a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dc9e:	f04f 0200 	mov.w	r2, #0
 800dca2:	f04f 0300 	mov.w	r3, #0
 800dca6:	4608      	mov	r0, r1
 800dca8:	f7fc fbfb 	bl	800a4a2 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	695b      	ldr	r3, [r3, #20]
 800dcb0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800dcb4:	f04f 0200 	mov.w	r2, #0
 800dcb8:	f04f 0300 	mov.w	r3, #0
 800dcbc:	4608      	mov	r0, r1
 800dcbe:	f7fc fbf0 	bl	800a4a2 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	695b      	ldr	r3, [r3, #20]
 800dcc6:	3321      	adds	r3, #33	; 0x21
 800dcc8:	2201      	movs	r2, #1
 800dcca:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800dccc:	f107 0318 	add.w	r3, r7, #24
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fe fa9c 	bl	800c20e <store_xdir>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800dcdc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d174      	bne.n	800ddce <f_open+0x2ea>
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	689b      	ldr	r3, [r3, #8]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d070      	beq.n	800ddce <f_open+0x2ea>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800dcec:	68f8      	ldr	r0, [r7, #12]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	f7fd faa7 	bl	800b248 <remove_chain>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	689a      	ldr	r2, [r3, #8]
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	3a01      	subs	r2, #1
 800dd08:	619a      	str	r2, [r3, #24]
 800dd0a:	e060      	b.n	800ddce <f_open+0x2ea>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dd0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd0e:	330e      	adds	r3, #14
 800dd10:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7fc fb99 	bl	800a44a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dd18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd1a:	3316      	adds	r3, #22
 800dd1c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fc fb93 	bl	800a44a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dd24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd26:	330b      	adds	r3, #11
 800dd28:	2220      	movs	r2, #32
 800dd2a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd30:	4611      	mov	r1, r2
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fd fe5a 	bl	800b9ec <ld_clust>
 800dd38:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd3e:	2200      	movs	r2, #0
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7fd fe72 	bl	800ba2a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dd46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd48:	331c      	adds	r3, #28
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fc fb7c 	bl	800a44a <st_dword>
					fs->wflag = 1;
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	2201      	movs	r2, #1
 800dd56:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dd58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d037      	beq.n	800ddce <f_open+0x2ea>
						dw = fs->winsect;
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd62:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 800dd64:	f107 0318 	add.w	r3, r7, #24
 800dd68:	2200      	movs	r2, #0
 800dd6a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7fd fa6b 	bl	800b248 <remove_chain>
 800dd72:	4603      	mov	r3, r0
 800dd74:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 800dd78:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d126      	bne.n	800ddce <f_open+0x2ea>
							res = move_window(fs, dw);
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7fc fe41 	bl	800aa0c <move_window>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dd94:	3a01      	subs	r2, #1
 800dd96:	619a      	str	r2, [r3, #24]
 800dd98:	e019      	b.n	800ddce <f_open+0x2ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dd9a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d115      	bne.n	800ddce <f_open+0x2ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dda2:	7fbb      	ldrb	r3, [r7, #30]
 800dda4:	f003 0310 	and.w	r3, r3, #16
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d003      	beq.n	800ddb4 <f_open+0x2d0>
					res = FR_NO_FILE;
 800ddac:	2304      	movs	r3, #4
 800ddae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800ddb2:	e00c      	b.n	800ddce <f_open+0x2ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ddb4:	79fb      	ldrb	r3, [r7, #7]
 800ddb6:	f003 0302 	and.w	r3, r3, #2
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d007      	beq.n	800ddce <f_open+0x2ea>
 800ddbe:	7fbb      	ldrb	r3, [r7, #30]
 800ddc0:	f003 0301 	and.w	r3, r3, #1
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <f_open+0x2ea>
						res = FR_DENIED;
 800ddc8:	2307      	movs	r3, #7
 800ddca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 800ddce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d128      	bne.n	800de28 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	f003 0308 	and.w	r3, r3, #8
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d003      	beq.n	800dde8 <f_open+0x304>
				mode |= FA_MODIFIED;
 800dde0:	79fb      	ldrb	r3, [r7, #7]
 800dde2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dde6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800ddf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ddf6:	79fb      	ldrb	r3, [r7, #7]
 800ddf8:	f023 0301 	bic.w	r3, r3, #1
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	bf14      	ite	ne
 800de00:	2301      	movne	r3, #1
 800de02:	2300      	moveq	r3, #0
 800de04:	b2db      	uxtb	r3, r3
 800de06:	461a      	mov	r2, r3
 800de08:	f107 0318 	add.w	r3, r7, #24
 800de0c:	4611      	mov	r1, r2
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fc fcca 	bl	800a7a8 <inc_lock>
 800de14:	4602      	mov	r2, r0
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d102      	bne.n	800de28 <f_open+0x344>
 800de22:	2302      	movs	r3, #2
 800de24:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 800de28:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f040 8106 	bne.w	800e03e <f_open+0x55a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	2b04      	cmp	r3, #4
 800de38:	d12b      	bne.n	800de92 <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800de3a:	6a3a      	ldr	r2, [r7, #32]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800de40:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800de44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800de48:	7ffa      	ldrb	r2, [r7, #31]
 800de4a:	431a      	orrs	r2, r3
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800de50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	695b      	ldr	r3, [r3, #20]
 800de5a:	3334      	adds	r3, #52	; 0x34
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7fc f9f9 	bl	800a254 <ld_dword>
 800de62:	4602      	mov	r2, r0
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	695b      	ldr	r3, [r3, #20]
 800de6c:	3338      	adds	r3, #56	; 0x38
 800de6e:	4618      	mov	r0, r3
 800de70:	f7fc fa13 	bl	800a29a <ld_qword>
 800de74:	4603      	mov	r3, r0
 800de76:	460c      	mov	r4, r1
 800de78:	68fa      	ldr	r2, [r7, #12]
 800de7a:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	695b      	ldr	r3, [r3, #20]
 800de82:	3321      	adds	r3, #33	; 0x21
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	f003 0302 	and.w	r3, r3, #2
 800de8a:	b2da      	uxtb	r2, r3
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	71da      	strb	r2, [r3, #7]
 800de90:	e013      	b.n	800deba <f_open+0x3d6>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de96:	4611      	mov	r1, r2
 800de98:	4618      	mov	r0, r3
 800de9a:	f7fd fda7 	bl	800b9ec <ld_clust>
 800de9e:	4602      	mov	r2, r0
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dea6:	331c      	adds	r3, #28
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fc f9d3 	bl	800a254 <ld_dword>
 800deae:	4603      	mov	r3, r0
 800deb0:	f04f 0400 	mov.w	r4, #0
 800deb4:	68fa      	ldr	r2, [r7, #12]
 800deb6:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2200      	movs	r2, #0
 800debe:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dec0:	697a      	ldr	r2, [r7, #20]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	88da      	ldrh	r2, [r3, #6]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	79fa      	ldrb	r2, [r7, #7]
 800ded2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2200      	movs	r2, #0
 800deda:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	f04f 0300 	mov.w	r3, #0
 800deea:	f04f 0400 	mov.w	r4, #0
 800deee:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	3354      	adds	r3, #84	; 0x54
 800def6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800defa:	2100      	movs	r1, #0
 800defc:	4618      	mov	r0, r3
 800defe:	f7fc fb78 	bl	800a5f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800df02:	79fb      	ldrb	r3, [r7, #7]
 800df04:	f003 0320 	and.w	r3, r3, #32
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f000 8098 	beq.w	800e03e <f_open+0x55a>
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800df14:	4323      	orrs	r3, r4
 800df16:	f000 8092 	beq.w	800e03e <f_open+0x55a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	895b      	ldrh	r3, [r3, #10]
 800df2a:	461a      	mov	r2, r3
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	899b      	ldrh	r3, [r3, #12]
 800df30:	fb03 f302 	mul.w	r3, r3, r2
 800df34:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800df44:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 800df48:	e024      	b.n	800df94 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800df50:	4618      	mov	r0, r3
 800df52:	f7fc fda7 	bl	800aaa4 <get_fat>
 800df56:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 800df5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d802      	bhi.n	800df68 <f_open+0x484>
 800df62:	2302      	movs	r3, #2
 800df64:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800df68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800df6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df70:	d102      	bne.n	800df78 <f_open+0x494>
 800df72:	2301      	movs	r3, #1
 800df74:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df7a:	469b      	mov	fp, r3
 800df7c:	f04f 0c00 	mov.w	ip, #0
 800df80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800df84:	460b      	mov	r3, r1
 800df86:	4614      	mov	r4, r2
 800df88:	ebb3 030b 	subs.w	r3, r3, fp
 800df8c:	eb64 040c 	sbc.w	r4, r4, ip
 800df90:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 800df94:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d109      	bne.n	800dfb0 <f_open+0x4cc>
 800df9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df9e:	4619      	mov	r1, r3
 800dfa0:	f04f 0200 	mov.w	r2, #0
 800dfa4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800dfa8:	42a2      	cmp	r2, r4
 800dfaa:	bf08      	it	eq
 800dfac:	4299      	cmpeq	r1, r3
 800dfae:	d3cc      	bcc.n	800df4a <f_open+0x466>
				}
				fp->clust = clst;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dfb6:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dfb8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d13e      	bne.n	800e03e <f_open+0x55a>
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	899b      	ldrh	r3, [r3, #12]
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	f04f 0400 	mov.w	r4, #0
 800dfca:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800dfce:	461a      	mov	r2, r3
 800dfd0:	4623      	mov	r3, r4
 800dfd2:	f7f2 f901 	bl	80001d8 <__aeabi_uldivmod>
 800dfd6:	461c      	mov	r4, r3
 800dfd8:	4613      	mov	r3, r2
 800dfda:	4323      	orrs	r3, r4
 800dfdc:	d02f      	beq.n	800e03e <f_open+0x55a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fc fd3e 	bl	800aa66 <clust2sect>
 800dfea:	66b8      	str	r0, [r7, #104]	; 0x68
 800dfec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d103      	bne.n	800dffa <f_open+0x516>
						res = FR_INT_ERR;
 800dff2:	2302      	movs	r3, #2
 800dff4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800dff8:	e021      	b.n	800e03e <f_open+0x55a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	899b      	ldrh	r3, [r3, #12]
 800dffe:	b29b      	uxth	r3, r3
 800e000:	f04f 0400 	mov.w	r4, #0
 800e004:	461a      	mov	r2, r3
 800e006:	4623      	mov	r3, r4
 800e008:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800e00c:	f7f2 f8e4 	bl	80001d8 <__aeabi_uldivmod>
 800e010:	4603      	mov	r3, r0
 800e012:	460c      	mov	r4, r1
 800e014:	461a      	mov	r2, r3
 800e016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e018:	441a      	add	r2, r3
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	7858      	ldrb	r0, [r3, #1]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e02c:	2301      	movs	r3, #1
 800e02e:	f7fc f89b 	bl	800a168 <disk_read>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <f_open+0x55a>
 800e038:	2301      	movs	r3, #1
 800e03a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e03e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800e042:	2b00      	cmp	r3, #0
 800e044:	d002      	beq.n	800e04c <f_open+0x568>
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2200      	movs	r2, #0
 800e04a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e04c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800e050:	4618      	mov	r0, r3
 800e052:	3788      	adds	r7, #136	; 0x88
 800e054:	46bd      	mov	sp, r7
 800e056:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800e05a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e05a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e05c:	b091      	sub	sp, #68	; 0x44
 800e05e:	af00      	add	r7, sp, #0
 800e060:	60f8      	str	r0, [r7, #12]
 800e062:	60b9      	str	r1, [r7, #8]
 800e064:	607a      	str	r2, [r7, #4]
 800e066:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	2200      	movs	r2, #0
 800e070:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f107 0214 	add.w	r2, r7, #20
 800e078:	4611      	mov	r1, r2
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7ff fcb6 	bl	800d9ec <validate>
 800e080:	4603      	mov	r3, r0
 800e082:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e086:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d108      	bne.n	800e0a0 <f_read+0x46>
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e094:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e098:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d002      	beq.n	800e0a6 <f_read+0x4c>
 800e0a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e0a4:	e16a      	b.n	800e37c <f_read+0x322>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0ac:	f003 0301 	and.w	r3, r3, #1
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d101      	bne.n	800e0b8 <f_read+0x5e>
 800e0b4:	2307      	movs	r3, #7
 800e0b6:	e161      	b.n	800e37c <f_read+0x322>
	remain = fp->obj.objsize - fp->fptr;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 800e0c4:	460b      	mov	r3, r1
 800e0c6:	4614      	mov	r4, r2
 800e0c8:	1b5b      	subs	r3, r3, r5
 800e0ca:	eb64 0406 	sbc.w	r4, r4, r6
 800e0ce:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f04f 0400 	mov.w	r4, #0
 800e0d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e0dc:	42a2      	cmp	r2, r4
 800e0de:	bf08      	it	eq
 800e0e0:	4299      	cmpeq	r1, r3
 800e0e2:	f080 8146 	bcs.w	800e372 <f_read+0x318>
 800e0e6:	6a3b      	ldr	r3, [r7, #32]
 800e0e8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e0ea:	e142      	b.n	800e372 <f_read+0x318>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	899b      	ldrh	r3, [r3, #12]
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	f04f 0400 	mov.w	r4, #0
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	4623      	mov	r3, r4
 800e100:	f7f2 f86a 	bl	80001d8 <__aeabi_uldivmod>
 800e104:	461c      	mov	r4, r3
 800e106:	4613      	mov	r3, r2
 800e108:	4323      	orrs	r3, r4
 800e10a:	f040 80eb 	bne.w	800e2e4 <f_read+0x28a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	899b      	ldrh	r3, [r3, #12]
 800e118:	b29b      	uxth	r3, r3
 800e11a:	f04f 0400 	mov.w	r4, #0
 800e11e:	461a      	mov	r2, r3
 800e120:	4623      	mov	r3, r4
 800e122:	f7f2 f859 	bl	80001d8 <__aeabi_uldivmod>
 800e126:	4603      	mov	r3, r0
 800e128:	460c      	mov	r4, r1
 800e12a:	461a      	mov	r2, r3
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	895b      	ldrh	r3, [r3, #10]
 800e130:	3b01      	subs	r3, #1
 800e132:	4013      	ands	r3, r2
 800e134:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d134      	bne.n	800e1a6 <f_read+0x14c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800e142:	4323      	orrs	r3, r4
 800e144:	d103      	bne.n	800e14e <f_read+0xf4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e14c:	e015      	b.n	800e17a <f_read+0x120>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e152:	2b00      	cmp	r3, #0
 800e154:	d009      	beq.n	800e16a <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800e15c:	461a      	mov	r2, r3
 800e15e:	4623      	mov	r3, r4
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	f7fd fa26 	bl	800b5b2 <clmt_clust>
 800e166:	63b8      	str	r0, [r7, #56]	; 0x38
 800e168:	e007      	b.n	800e17a <f_read+0x120>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e16a:	68fa      	ldr	r2, [r7, #12]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e170:	4619      	mov	r1, r3
 800e172:	4610      	mov	r0, r2
 800e174:	f7fc fc96 	bl	800aaa4 <get_fat>
 800e178:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d805      	bhi.n	800e18c <f_read+0x132>
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2202      	movs	r2, #2
 800e184:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e188:	2302      	movs	r3, #2
 800e18a:	e0f7      	b.n	800e37c <f_read+0x322>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e192:	d105      	bne.n	800e1a0 <f_read+0x146>
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2201      	movs	r2, #1
 800e198:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e19c:	2301      	movs	r3, #1
 800e19e:	e0ed      	b.n	800e37c <f_read+0x322>
				fp->clust = clst;				/* Update current cluster */
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1a4:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e1a6:	697a      	ldr	r2, [r7, #20]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	f7fc fc59 	bl	800aa66 <clust2sect>
 800e1b4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d105      	bne.n	800e1c8 <f_read+0x16e>
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2202      	movs	r2, #2
 800e1c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	e0d9      	b.n	800e37c <f_read+0x322>
			sect += csect;
 800e1c8:	69ba      	ldr	r2, [r7, #24]
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	4413      	add	r3, r2
 800e1ce:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	899b      	ldrh	r3, [r3, #12]
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1dc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d043      	beq.n	800e26c <f_read+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e1e4:	69fa      	ldr	r2, [r7, #28]
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e8:	4413      	add	r3, r2
 800e1ea:	697a      	ldr	r2, [r7, #20]
 800e1ec:	8952      	ldrh	r2, [r2, #10]
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d905      	bls.n	800e1fe <f_read+0x1a4>
					cc = fs->csize - csect;
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	895b      	ldrh	r3, [r3, #10]
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	1ad3      	subs	r3, r2, r3
 800e1fc:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	7858      	ldrb	r0, [r3, #1]
 800e202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e204:	69ba      	ldr	r2, [r7, #24]
 800e206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e208:	f7fb ffae 	bl	800a168 <disk_read>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d005      	beq.n	800e21e <f_read+0x1c4>
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2201      	movs	r2, #1
 800e216:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e21a:	2301      	movs	r3, #1
 800e21c:	e0ae      	b.n	800e37c <f_read+0x322>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e224:	b25b      	sxtb	r3, r3
 800e226:	2b00      	cmp	r3, #0
 800e228:	da18      	bge.n	800e25c <f_read+0x202>
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e234:	429a      	cmp	r2, r3
 800e236:	d911      	bls.n	800e25c <f_read+0x202>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	1ad3      	subs	r3, r2, r3
 800e240:	697a      	ldr	r2, [r7, #20]
 800e242:	8992      	ldrh	r2, [r2, #12]
 800e244:	fb02 f303 	mul.w	r3, r2, r3
 800e248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e24a:	18d0      	adds	r0, r2, r3
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	899b      	ldrh	r3, [r3, #12]
 800e256:	461a      	mov	r2, r3
 800e258:	f7fc f9aa 	bl	800a5b0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	899b      	ldrh	r3, [r3, #12]
 800e260:	461a      	mov	r2, r3
 800e262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e264:	fb02 f303 	mul.w	r3, r2, r3
 800e268:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800e26a:	e067      	b.n	800e33c <f_read+0x2e2>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e270:	69ba      	ldr	r2, [r7, #24]
 800e272:	429a      	cmp	r2, r3
 800e274:	d033      	beq.n	800e2de <f_read+0x284>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e27c:	b25b      	sxtb	r3, r3
 800e27e:	2b00      	cmp	r3, #0
 800e280:	da1b      	bge.n	800e2ba <f_read+0x260>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	7858      	ldrb	r0, [r3, #1]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e290:	2301      	movs	r3, #1
 800e292:	f7fb ff89 	bl	800a1a8 <disk_write>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d005      	beq.n	800e2a8 <f_read+0x24e>
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	e069      	b.n	800e37c <f_read+0x322>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2b2:	b2da      	uxtb	r2, r3
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	7858      	ldrb	r0, [r3, #1]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	69ba      	ldr	r2, [r7, #24]
 800e2c8:	f7fb ff4e 	bl	800a168 <disk_read>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d005      	beq.n	800e2de <f_read+0x284>
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e04e      	b.n	800e37c <f_read+0x322>
			}
#endif
			fp->sect = sect;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	69ba      	ldr	r2, [r7, #24]
 800e2e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	899b      	ldrh	r3, [r3, #12]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800e2f0:	697a      	ldr	r2, [r7, #20]
 800e2f2:	8992      	ldrh	r2, [r2, #12]
 800e2f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2f8:	fb02 f201 	mul.w	r2, r2, r1
 800e2fc:	1a9b      	subs	r3, r3, r2
 800e2fe:	1ac3      	subs	r3, r0, r3
 800e300:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	429a      	cmp	r2, r3
 800e308:	d901      	bls.n	800e30e <f_read+0x2b4>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f103 0554 	add.w	r5, r3, #84	; 0x54
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	899b      	ldrh	r3, [r3, #12]
 800e31e:	b29b      	uxth	r3, r3
 800e320:	f04f 0400 	mov.w	r4, #0
 800e324:	461a      	mov	r2, r3
 800e326:	4623      	mov	r3, r4
 800e328:	f7f1 ff56 	bl	80001d8 <__aeabi_uldivmod>
 800e32c:	461c      	mov	r4, r3
 800e32e:	4613      	mov	r3, r2
 800e330:	442b      	add	r3, r5
 800e332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e334:	4619      	mov	r1, r3
 800e336:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e338:	f7fc f93a 	bl	800a5b0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e33c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e340:	4413      	add	r3, r2
 800e342:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800e34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e34c:	461d      	mov	r5, r3
 800e34e:	f04f 0600 	mov.w	r6, #0
 800e352:	186b      	adds	r3, r5, r1
 800e354:	eb46 0402 	adc.w	r4, r6, r2
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e364:	441a      	add	r2, r3
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	601a      	str	r2, [r3, #0]
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e36e:	1ad3      	subs	r3, r2, r3
 800e370:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b00      	cmp	r3, #0
 800e376:	f47f aeb9 	bne.w	800e0ec <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3744      	adds	r7, #68	; 0x44
 800e380:	46bd      	mov	sp, r7
 800e382:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e384 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e386:	b095      	sub	sp, #84	; 0x54
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	e9c7 2300 	strd	r2, r3, [r7]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f107 0210 	add.w	r2, r7, #16
 800e396:	4611      	mov	r1, r2
 800e398:	4618      	mov	r0, r3
 800e39a:	f7ff fb27 	bl	800d9ec <validate>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e3a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d104      	bne.n	800e3b6 <f_lseek+0x32>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e3b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800e3b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10e      	bne.n	800e3dc <f_lseek+0x58>
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	2b04      	cmp	r3, #4
 800e3c4:	d10a      	bne.n	800e3dc <f_lseek+0x58>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	f7fc ff08 	bl	800b1e6 <fill_last_frag>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e3dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d002      	beq.n	800e3ea <f_lseek+0x66>
 800e3e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3e8:	e2d5      	b.n	800e996 <f_lseek+0x612>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f000 8104 	beq.w	800e5fc <f_lseek+0x278>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e3f4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e3f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e3fc:	bf08      	it	eq
 800e3fe:	f1b3 3fff 	cmpeq.w	r3, #4294967295
 800e402:	d15c      	bne.n	800e4be <f_lseek+0x13a>
			tbl = fp->cltbl;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e408:	637b      	str	r3, [r7, #52]	; 0x34
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e40c:	1d1a      	adds	r2, r3, #4
 800e40e:	637a      	str	r2, [r7, #52]	; 0x34
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	61fb      	str	r3, [r7, #28]
 800e414:	2302      	movs	r3, #2
 800e416:	63bb      	str	r3, [r7, #56]	; 0x38
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	689b      	ldr	r3, [r3, #8]
 800e41c:	643b      	str	r3, [r7, #64]	; 0x40
			if (cl) {
 800e41e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e420:	2b00      	cmp	r3, #0
 800e422:	d03c      	beq.n	800e49e <f_lseek+0x11a>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e426:	61bb      	str	r3, [r7, #24]
 800e428:	2300      	movs	r3, #0
 800e42a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42e:	3302      	adds	r3, #2
 800e430:	63bb      	str	r3, [r7, #56]	; 0x38
					do {
						pcl = cl; ncl++;
 800e432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e434:	617b      	str	r3, [r7, #20]
 800e436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e438:	3301      	adds	r3, #1
 800e43a:	63fb      	str	r3, [r7, #60]	; 0x3c
						cl = get_fat(&fp->obj, cl);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e440:	4618      	mov	r0, r3
 800e442:	f7fc fb2f 	bl	800aaa4 <get_fat>
 800e446:	6438      	str	r0, [r7, #64]	; 0x40
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d805      	bhi.n	800e45a <f_lseek+0xd6>
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2202      	movs	r2, #2
 800e452:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e456:	2302      	movs	r3, #2
 800e458:	e29d      	b.n	800e996 <f_lseek+0x612>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e460:	d105      	bne.n	800e46e <f_lseek+0xea>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2201      	movs	r2, #1
 800e466:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e46a:	2301      	movs	r3, #1
 800e46c:	e293      	b.n	800e996 <f_lseek+0x612>
					} while (cl == pcl + 1);
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	3301      	adds	r3, #1
 800e472:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e474:	429a      	cmp	r2, r3
 800e476:	d0dc      	beq.n	800e432 <f_lseek+0xae>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d809      	bhi.n	800e494 <f_lseek+0x110>
						*tbl++ = ncl; *tbl++ = tcl;
 800e480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e482:	1d1a      	adds	r2, r3, #4
 800e484:	637a      	str	r2, [r7, #52]	; 0x34
 800e486:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e488:	601a      	str	r2, [r3, #0]
 800e48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e48c:	1d1a      	adds	r2, r3, #4
 800e48e:	637a      	str	r2, [r7, #52]	; 0x34
 800e490:	69ba      	ldr	r2, [r7, #24]
 800e492:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	6a1b      	ldr	r3, [r3, #32]
 800e498:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d3c2      	bcc.n	800e424 <f_lseek+0xa0>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4a4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e4a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d803      	bhi.n	800e4b6 <f_lseek+0x132>
				*tbl = 0;		/* Terminate table */
 800e4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	601a      	str	r2, [r3, #0]
 800e4b4:	e26d      	b.n	800e992 <f_lseek+0x60e>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e4b6:	2311      	movs	r3, #17
 800e4b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e4bc:	e269      	b.n	800e992 <f_lseek+0x60e>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800e4c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e4c8:	42a2      	cmp	r2, r4
 800e4ca:	bf08      	it	eq
 800e4cc:	4299      	cmpeq	r1, r3
 800e4ce:	d204      	bcs.n	800e4da <f_lseek+0x156>
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800e4d6:	e9c7 3400 	strd	r3, r4, [r7]
			fp->fptr = ofs;				/* Set file pointer */
 800e4da:	68fa      	ldr	r2, [r7, #12]
 800e4dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e4e0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			if (ofs) {
 800e4e4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e4e8:	4323      	orrs	r3, r4
 800e4ea:	f000 8252 	beq.w	800e992 <f_lseek+0x60e>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e4ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e4f2:	f113 31ff 	adds.w	r1, r3, #4294967295
 800e4f6:	f144 32ff 	adc.w	r2, r4, #4294967295
 800e4fa:	4613      	mov	r3, r2
 800e4fc:	460a      	mov	r2, r1
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f7fd f857 	bl	800b5b2 <clmt_clust>
 800e504:	4602      	mov	r2, r0
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 800e50a:	693a      	ldr	r2, [r7, #16]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e510:	4619      	mov	r1, r3
 800e512:	4610      	mov	r0, r2
 800e514:	f7fc faa7 	bl	800aa66 <clust2sect>
 800e518:	6238      	str	r0, [r7, #32]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e51a:	6a3b      	ldr	r3, [r7, #32]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d105      	bne.n	800e52c <f_lseek+0x1a8>
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2202      	movs	r2, #2
 800e524:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e528:	2302      	movs	r3, #2
 800e52a:	e234      	b.n	800e996 <f_lseek+0x612>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e52c:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e530:	f113 30ff 	adds.w	r0, r3, #4294967295
 800e534:	f144 31ff 	adc.w	r1, r4, #4294967295
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	899b      	ldrh	r3, [r3, #12]
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	f04f 0400 	mov.w	r4, #0
 800e542:	461a      	mov	r2, r3
 800e544:	4623      	mov	r3, r4
 800e546:	f7f1 fe47 	bl	80001d8 <__aeabi_uldivmod>
 800e54a:	4603      	mov	r3, r0
 800e54c:	460c      	mov	r4, r1
 800e54e:	461a      	mov	r2, r3
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	895b      	ldrh	r3, [r3, #10]
 800e554:	3b01      	subs	r3, #1
 800e556:	4013      	ands	r3, r2
 800e558:	6a3a      	ldr	r2, [r7, #32]
 800e55a:	4413      	add	r3, r2
 800e55c:	623b      	str	r3, [r7, #32]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e564:	693b      	ldr	r3, [r7, #16]
 800e566:	899b      	ldrh	r3, [r3, #12]
 800e568:	b29b      	uxth	r3, r3
 800e56a:	f04f 0400 	mov.w	r4, #0
 800e56e:	461a      	mov	r2, r3
 800e570:	4623      	mov	r3, r4
 800e572:	f7f1 fe31 	bl	80001d8 <__aeabi_uldivmod>
 800e576:	461c      	mov	r4, r3
 800e578:	4613      	mov	r3, r2
 800e57a:	4323      	orrs	r3, r4
 800e57c:	f000 8209 	beq.w	800e992 <f_lseek+0x60e>
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e584:	6a3a      	ldr	r2, [r7, #32]
 800e586:	429a      	cmp	r2, r3
 800e588:	f000 8203 	beq.w	800e992 <f_lseek+0x60e>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e592:	b25b      	sxtb	r3, r3
 800e594:	2b00      	cmp	r3, #0
 800e596:	da1b      	bge.n	800e5d0 <f_lseek+0x24c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	7858      	ldrb	r0, [r3, #1]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	f7fb fdfe 	bl	800a1a8 <disk_write>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d005      	beq.n	800e5be <f_lseek+0x23a>
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e1eb      	b.n	800e996 <f_lseek+0x612>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e5c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5c8:	b2da      	uxtb	r2, r3
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	7858      	ldrb	r0, [r3, #1]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e5da:	2301      	movs	r3, #1
 800e5dc:	6a3a      	ldr	r2, [r7, #32]
 800e5de:	f7fb fdc3 	bl	800a168 <disk_read>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d005      	beq.n	800e5f4 <f_lseek+0x270>
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e1d0      	b.n	800e996 <f_lseek+0x612>
#endif
					fp->sect = dsc;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6a3a      	ldr	r2, [r7, #32]
 800e5f8:	645a      	str	r2, [r3, #68]	; 0x44
 800e5fa:	e1ca      	b.n	800e992 <f_lseek+0x60e>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	2b04      	cmp	r3, #4
 800e602:	d00b      	beq.n	800e61c <f_lseek+0x298>
 800e604:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e608:	2c01      	cmp	r4, #1
 800e60a:	bf08      	it	eq
 800e60c:	2b00      	cmpeq	r3, #0
 800e60e:	d305      	bcc.n	800e61c <f_lseek+0x298>
 800e610:	f04f 33ff 	mov.w	r3, #4294967295
 800e614:	f04f 0400 	mov.w	r4, #0
 800e618:	e9c7 3400 	strd	r3, r4, [r7]
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800e622:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e626:	42a2      	cmp	r2, r4
 800e628:	bf08      	it	eq
 800e62a:	4299      	cmpeq	r1, r3
 800e62c:	d20b      	bcs.n	800e646 <f_lseek+0x2c2>
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e634:	f003 0302 	and.w	r3, r3, #2
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d104      	bne.n	800e646 <f_lseek+0x2c2>
			ofs = fp->obj.objsize;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800e642:	e9c7 3400 	strd	r3, r4, [r7]
		}
		ifptr = fp->fptr;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800e64c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		fp->fptr = nsect = 0;
 800e650:	2300      	movs	r3, #0
 800e652:	647b      	str	r3, [r7, #68]	; 0x44
 800e654:	68fa      	ldr	r2, [r7, #12]
 800e656:	f04f 0300 	mov.w	r3, #0
 800e65a:	f04f 0400 	mov.w	r4, #0
 800e65e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if (ofs) {
 800e662:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e666:	4323      	orrs	r3, r4
 800e668:	f000 812e 	beq.w	800e8c8 <f_lseek+0x544>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	895b      	ldrh	r3, [r3, #10]
 800e670:	461a      	mov	r2, r3
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	899b      	ldrh	r3, [r3, #12]
 800e676:	fb03 f302 	mul.w	r3, r3, r2
 800e67a:	627b      	str	r3, [r7, #36]	; 0x24
			if (ifptr > 0 &&
 800e67c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e680:	4323      	orrs	r3, r4
 800e682:	d048      	beq.n	800e716 <f_lseek+0x392>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e684:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e688:	f113 30ff 	adds.w	r0, r3, #4294967295
 800e68c:	f144 31ff 	adc.w	r1, r4, #4294967295
 800e690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e692:	f04f 0400 	mov.w	r4, #0
 800e696:	461a      	mov	r2, r3
 800e698:	4623      	mov	r3, r4
 800e69a:	f7f1 fd9d 	bl	80001d8 <__aeabi_uldivmod>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	460c      	mov	r4, r1
 800e6a2:	461d      	mov	r5, r3
 800e6a4:	4626      	mov	r6, r4
 800e6a6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e6aa:	f113 30ff 	adds.w	r0, r3, #4294967295
 800e6ae:	f144 31ff 	adc.w	r1, r4, #4294967295
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b4:	f04f 0400 	mov.w	r4, #0
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	4623      	mov	r3, r4
 800e6bc:	f7f1 fd8c 	bl	80001d8 <__aeabi_uldivmod>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	460c      	mov	r4, r1
			if (ifptr > 0 &&
 800e6c4:	42a6      	cmp	r6, r4
 800e6c6:	bf08      	it	eq
 800e6c8:	429d      	cmpeq	r5, r3
 800e6ca:	d324      	bcc.n	800e716 <f_lseek+0x392>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e6cc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e6d0:	f113 31ff 	adds.w	r1, r3, #4294967295
 800e6d4:	f144 32ff 	adc.w	r2, r4, #4294967295
 800e6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	f04f 0400 	mov.w	r4, #0
 800e6e0:	ea6f 0503 	mvn.w	r5, r3
 800e6e4:	ea6f 0604 	mvn.w	r6, r4
 800e6e8:	ea05 0301 	and.w	r3, r5, r1
 800e6ec:	ea06 0402 	and.w	r4, r6, r2
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				ofs -= fp->fptr;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 800e6fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e700:	460b      	mov	r3, r1
 800e702:	4614      	mov	r4, r2
 800e704:	1b5b      	subs	r3, r3, r5
 800e706:	eb64 0406 	sbc.w	r4, r4, r6
 800e70a:	e9c7 3400 	strd	r3, r4, [r7]
				clst = fp->clust;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e712:	64bb      	str	r3, [r7, #72]	; 0x48
 800e714:	e024      	b.n	800e760 <f_lseek+0x3dc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e71c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d11b      	bne.n	800e75a <f_lseek+0x3d6>
					clst = create_chain(&fp->obj, 0);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2100      	movs	r1, #0
 800e726:	4618      	mov	r0, r3
 800e728:	f7fc fe42 	bl	800b3b0 <create_chain>
 800e72c:	64b8      	str	r0, [r7, #72]	; 0x48
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e72e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e730:	2b01      	cmp	r3, #1
 800e732:	d105      	bne.n	800e740 <f_lseek+0x3bc>
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2202      	movs	r2, #2
 800e738:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e73c:	2302      	movs	r3, #2
 800e73e:	e12a      	b.n	800e996 <f_lseek+0x612>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e746:	d105      	bne.n	800e754 <f_lseek+0x3d0>
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2201      	movs	r2, #1
 800e74c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e750:	2301      	movs	r3, #1
 800e752:	e120      	b.n	800e996 <f_lseek+0x612>
					fp->obj.sclust = clst;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e758:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e75e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			if (clst != 0) {
 800e760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e762:	2b00      	cmp	r3, #0
 800e764:	f000 80b0 	beq.w	800e8c8 <f_lseek+0x544>
				while (ofs > bcs) {						/* Cluster following loop */
 800e768:	e06a      	b.n	800e840 <f_lseek+0x4bc>
					ofs -= bcs; fp->fptr += bcs;
 800e76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76c:	461d      	mov	r5, r3
 800e76e:	f04f 0600 	mov.w	r6, #0
 800e772:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e776:	460b      	mov	r3, r1
 800e778:	4614      	mov	r4, r2
 800e77a:	1b5b      	subs	r3, r3, r5
 800e77c:	eb64 0406 	sbc.w	r4, r4, r6
 800e780:	e9c7 3400 	strd	r3, r4, [r7]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800e78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78c:	461d      	mov	r5, r3
 800e78e:	f04f 0600 	mov.w	r6, #0
 800e792:	186b      	adds	r3, r5, r1
 800e794:	eb46 0402 	adc.w	r4, r6, r2
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e7a4:	f003 0302 	and.w	r3, r3, #2
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d028      	beq.n	800e7fe <f_lseek+0x47a>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800e7b2:	68fa      	ldr	r2, [r7, #12]
 800e7b4:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800e7b8:	42a2      	cmp	r2, r4
 800e7ba:	bf08      	it	eq
 800e7bc:	4299      	cmpeq	r1, r3
 800e7be:	d20e      	bcs.n	800e7de <f_lseek+0x45a>
							fp->obj.objsize = fp->fptr;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800e7c6:	68fa      	ldr	r2, [r7, #12]
 800e7c8:	e9c2 3404 	strd	r3, r4, [r2, #16]
							fp->flag |= FA_MODIFIED;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e7d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7d6:	b2da      	uxtb	r2, r3
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fc fde4 	bl	800b3b0 <create_chain>
 800e7e8:	64b8      	str	r0, [r7, #72]	; 0x48
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e7ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d10c      	bne.n	800e80a <f_lseek+0x486>
							ofs = 0; break;
 800e7f0:	f04f 0300 	mov.w	r3, #0
 800e7f4:	f04f 0400 	mov.w	r4, #0
 800e7f8:	e9c7 3400 	strd	r3, r4, [r7]
 800e7fc:	e02a      	b.n	800e854 <f_lseek+0x4d0>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e802:	4618      	mov	r0, r3
 800e804:	f7fc f94e 	bl	800aaa4 <get_fat>
 800e808:	64b8      	str	r0, [r7, #72]	; 0x48
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e80a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e810:	d105      	bne.n	800e81e <f_lseek+0x49a>
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2201      	movs	r2, #1
 800e816:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e81a:	2301      	movs	r3, #1
 800e81c:	e0bb      	b.n	800e996 <f_lseek+0x612>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e820:	2b01      	cmp	r3, #1
 800e822:	d904      	bls.n	800e82e <f_lseek+0x4aa>
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	6a1b      	ldr	r3, [r3, #32]
 800e828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d305      	bcc.n	800e83a <f_lseek+0x4b6>
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2202      	movs	r2, #2
 800e832:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e836:	2302      	movs	r3, #2
 800e838:	e0ad      	b.n	800e996 <f_lseek+0x612>
					fp->clust = clst;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e83e:	641a      	str	r2, [r3, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800e840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e842:	4619      	mov	r1, r3
 800e844:	f04f 0200 	mov.w	r2, #0
 800e848:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e84c:	42a2      	cmp	r2, r4
 800e84e:	bf08      	it	eq
 800e850:	4299      	cmpeq	r1, r3
 800e852:	d38a      	bcc.n	800e76a <f_lseek+0x3e6>
				}
				fp->fptr += ofs;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800e85a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e85e:	185d      	adds	r5, r3, r1
 800e860:	eb44 0602 	adc.w	r6, r4, r2
 800e864:	68fa      	ldr	r2, [r7, #12]
 800e866:	e9c2 560e 	strd	r5, r6, [r2, #56]	; 0x38
				if (ofs % SS(fs)) {
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	899b      	ldrh	r3, [r3, #12]
 800e86e:	b29b      	uxth	r3, r3
 800e870:	f04f 0400 	mov.w	r4, #0
 800e874:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e878:	461a      	mov	r2, r3
 800e87a:	4623      	mov	r3, r4
 800e87c:	f7f1 fcac 	bl	80001d8 <__aeabi_uldivmod>
 800e880:	461c      	mov	r4, r3
 800e882:	4613      	mov	r3, r2
 800e884:	4323      	orrs	r3, r4
 800e886:	d01f      	beq.n	800e8c8 <f_lseek+0x544>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fc f8ea 	bl	800aa66 <clust2sect>
 800e892:	6478      	str	r0, [r7, #68]	; 0x44
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e896:	2b00      	cmp	r3, #0
 800e898:	d105      	bne.n	800e8a6 <f_lseek+0x522>
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2202      	movs	r2, #2
 800e89e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e8a2:	2302      	movs	r3, #2
 800e8a4:	e077      	b.n	800e996 <f_lseek+0x612>
					nsect += (DWORD)(ofs / SS(fs));
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	899b      	ldrh	r3, [r3, #12]
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	f04f 0400 	mov.w	r4, #0
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	4623      	mov	r3, r4
 800e8b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e8b8:	f7f1 fc8e 	bl	80001d8 <__aeabi_uldivmod>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	460c      	mov	r4, r1
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8c4:	4413      	add	r3, r2
 800e8c6:	647b      	str	r3, [r7, #68]	; 0x44
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800e8ce:	68fa      	ldr	r2, [r7, #12]
 800e8d0:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800e8d4:	42a2      	cmp	r2, r4
 800e8d6:	bf08      	it	eq
 800e8d8:	4299      	cmpeq	r1, r3
 800e8da:	d20e      	bcs.n	800e8fa <f_lseek+0x576>
			fp->obj.objsize = fp->fptr;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800e8e2:	68fa      	ldr	r2, [r7, #12]
 800e8e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
			fp->flag |= FA_MODIFIED;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e8ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8f2:	b2da      	uxtb	r2, r3
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	899b      	ldrh	r3, [r3, #12]
 800e904:	b29b      	uxth	r3, r3
 800e906:	f04f 0400 	mov.w	r4, #0
 800e90a:	461a      	mov	r2, r3
 800e90c:	4623      	mov	r3, r4
 800e90e:	f7f1 fc63 	bl	80001d8 <__aeabi_uldivmod>
 800e912:	461c      	mov	r4, r3
 800e914:	4613      	mov	r3, r2
 800e916:	4323      	orrs	r3, r4
 800e918:	d03b      	beq.n	800e992 <f_lseek+0x60e>
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e91e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e920:	429a      	cmp	r2, r3
 800e922:	d036      	beq.n	800e992 <f_lseek+0x60e>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e92a:	b25b      	sxtb	r3, r3
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	da1b      	bge.n	800e968 <f_lseek+0x5e4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	7858      	ldrb	r0, [r3, #1]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e93e:	2301      	movs	r3, #1
 800e940:	f7fb fc32 	bl	800a1a8 <disk_write>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	d005      	beq.n	800e956 <f_lseek+0x5d2>
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2201      	movs	r2, #1
 800e94e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e952:	2301      	movs	r3, #1
 800e954:	e01f      	b.n	800e996 <f_lseek+0x612>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e95c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e960:	b2da      	uxtb	r2, r3
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	7858      	ldrb	r0, [r3, #1]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e972:	2301      	movs	r3, #1
 800e974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e976:	f7fb fbf7 	bl	800a168 <disk_read>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d005      	beq.n	800e98c <f_lseek+0x608>
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2201      	movs	r2, #1
 800e984:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e988:	2301      	movs	r3, #1
 800e98a:	e004      	b.n	800e996 <f_lseek+0x612>
#endif
			fp->sect = nsect;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e990:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 800e992:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e996:	4618      	mov	r0, r3
 800e998:	3754      	adds	r7, #84	; 0x54
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e99e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e99e:	b590      	push	{r4, r7, lr}
 800e9a0:	b087      	sub	sp, #28
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d101      	bne.n	800e9b2 <f_opendir+0x14>
 800e9ae:	2309      	movs	r3, #9
 800e9b0:	e099      	b.n	800eae6 <f_opendir+0x148>

	/* Get logical drive */
	obj = &dp->obj;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e9b6:	f107 010c 	add.w	r1, r7, #12
 800e9ba:	463b      	mov	r3, r7
 800e9bc:	2200      	movs	r2, #0
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7fe fc82 	bl	800d2c8 <find_volume>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e9c8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	f040 8084 	bne.w	800ead8 <f_opendir+0x13a>
		obj->fs = fs;
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	4619      	mov	r1, r3
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f7fe fb1e 	bl	800d01c <follow_path>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e9e4:	7dfb      	ldrb	r3, [r7, #23]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d171      	bne.n	800eace <f_opendir+0x130>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e9f0:	b25b      	sxtb	r3, r3
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	db46      	blt.n	800ea84 <f_opendir+0xe6>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	799b      	ldrb	r3, [r3, #6]
 800e9fa:	f003 0310 	and.w	r3, r3, #16
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d03e      	beq.n	800ea80 <f_opendir+0xe2>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	2b04      	cmp	r3, #4
 800ea08:	d12f      	bne.n	800ea6a <f_opendir+0xcc>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	689a      	ldr	r2, [r3, #8]
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800ea18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ea1c:	693a      	ldr	r2, [r7, #16]
 800ea1e:	79d2      	ldrb	r2, [r2, #7]
 800ea20:	431a      	orrs	r2, r3
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	695b      	ldr	r3, [r3, #20]
 800ea32:	3334      	adds	r3, #52	; 0x34
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fb fc0d 	bl	800a254 <ld_dword>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	695b      	ldr	r3, [r3, #20]
 800ea44:	3338      	adds	r3, #56	; 0x38
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fb fc27 	bl	800a29a <ld_qword>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	460c      	mov	r4, r1
 800ea50:	693a      	ldr	r2, [r7, #16]
 800ea52:	e9c2 3404 	strd	r3, r4, [r2, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	695b      	ldr	r3, [r3, #20]
 800ea5a:	3321      	adds	r3, #33	; 0x21
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	f003 0302 	and.w	r3, r3, #2
 800ea62:	b2da      	uxtb	r2, r3
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	71da      	strb	r2, [r3, #7]
 800ea68:	e00c      	b.n	800ea84 <f_opendir+0xe6>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ea6a:	68fa      	ldr	r2, [r7, #12]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea70:	4619      	mov	r1, r3
 800ea72:	4610      	mov	r0, r2
 800ea74:	f7fc ffba 	bl	800b9ec <ld_clust>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	609a      	str	r2, [r3, #8]
 800ea7e:	e001      	b.n	800ea84 <f_opendir+0xe6>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ea80:	2305      	movs	r3, #5
 800ea82:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ea84:	7dfb      	ldrb	r3, [r7, #23]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d121      	bne.n	800eace <f_opendir+0x130>
				obj->id = fs->id;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	88da      	ldrh	r2, [r3, #6]
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ea92:	2100      	movs	r1, #0
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7fc fdd3 	bl	800b640 <dir_sdi>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ea9e:	7dfb      	ldrb	r3, [r7, #23]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d114      	bne.n	800eace <f_opendir+0x130>
					if (obj->sclust) {
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d00d      	beq.n	800eac8 <f_opendir+0x12a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800eaac:	2100      	movs	r1, #0
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f7fb fe7a 	bl	800a7a8 <inc_lock>
 800eab4:	4602      	mov	r2, r0
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d105      	bne.n	800eace <f_opendir+0x130>
 800eac2:	2312      	movs	r3, #18
 800eac4:	75fb      	strb	r3, [r7, #23]
 800eac6:	e002      	b.n	800eace <f_opendir+0x130>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	2200      	movs	r2, #0
 800eacc:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800eace:	7dfb      	ldrb	r3, [r7, #23]
 800ead0:	2b04      	cmp	r3, #4
 800ead2:	d101      	bne.n	800ead8 <f_opendir+0x13a>
 800ead4:	2305      	movs	r3, #5
 800ead6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ead8:	7dfb      	ldrb	r3, [r7, #23]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d002      	beq.n	800eae4 <f_opendir+0x146>
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	2200      	movs	r2, #0
 800eae2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eae4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	371c      	adds	r7, #28
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd90      	pop	{r4, r7, pc}

0800eaee <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800eaee:	b580      	push	{r7, lr}
 800eaf0:	b084      	sub	sp, #16
 800eaf2:	af00      	add	r7, sp, #0
 800eaf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f107 0208 	add.w	r2, r7, #8
 800eafc:	4611      	mov	r1, r2
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fe ff74 	bl	800d9ec <validate>
 800eb04:	4603      	mov	r3, r0
 800eb06:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb08:	7bfb      	ldrb	r3, [r7, #15]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d110      	bne.n	800eb30 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d006      	beq.n	800eb24 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fb fed2 	bl	800a8c4 <dec_lock>
 800eb20:	4603      	mov	r3, r0
 800eb22:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800eb24:	7bfb      	ldrb	r3, [r7, #15]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d102      	bne.n	800eb30 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800eb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b084      	sub	sp, #16
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
 800eb42:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f107 0208 	add.w	r2, r7, #8
 800eb4a:	4611      	mov	r1, r2
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fe ff4d 	bl	800d9ec <validate>
 800eb52:	4603      	mov	r3, r0
 800eb54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb56:	7bfb      	ldrb	r3, [r7, #15]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d126      	bne.n	800ebaa <f_readdir+0x70>
		if (!fno) {
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d106      	bne.n	800eb70 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800eb62:	2100      	movs	r1, #0
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f7fc fd6b 	bl	800b640 <dir_sdi>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	73fb      	strb	r3, [r7, #15]
 800eb6e:	e01c      	b.n	800ebaa <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800eb70:	2100      	movs	r1, #0
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7fd fc0d 	bl	800c392 <dir_read>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800eb7c:	7bfb      	ldrb	r3, [r7, #15]
 800eb7e:	2b04      	cmp	r3, #4
 800eb80:	d101      	bne.n	800eb86 <f_readdir+0x4c>
 800eb82:	2300      	movs	r3, #0
 800eb84:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800eb86:	7bfb      	ldrb	r3, [r7, #15]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d10e      	bne.n	800ebaa <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800eb8c:	6839      	ldr	r1, [r7, #0]
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7fd ffa0 	bl	800cad4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800eb94:	2100      	movs	r1, #0
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7fc fde6 	bl	800b768 <dir_next>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
 800eba2:	2b04      	cmp	r3, #4
 800eba4:	d101      	bne.n	800ebaa <f_readdir+0x70>
 800eba6:	2300      	movs	r3, #0
 800eba8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ebaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b098      	sub	sp, #96	; 0x60
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ebbe:	f107 0108 	add.w	r1, r7, #8
 800ebc2:	1d3b      	adds	r3, r7, #4
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fe fb7e 	bl	800d2c8 <find_volume>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ebd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d11f      	bne.n	800ec1a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	f107 0308 	add.w	r3, r7, #8
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7fe fa1a 	bl	800d01c <follow_path>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800ebee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d111      	bne.n	800ec1a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ebf6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ebfa:	b25b      	sxtb	r3, r3
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	da03      	bge.n	800ec08 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800ec00:	2306      	movs	r3, #6
 800ec02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ec06:	e008      	b.n	800ec1a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d005      	beq.n	800ec1a <f_stat+0x66>
 800ec0e:	f107 0308 	add.w	r3, r7, #8
 800ec12:	6839      	ldr	r1, [r7, #0]
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7fd ff5d 	bl	800cad4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800ec1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3760      	adds	r7, #96	; 0x60
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
	...

0800ec28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b087      	sub	sp, #28
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	4613      	mov	r3, r2
 800ec34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ec36:	2301      	movs	r3, #1
 800ec38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ec3e:	4b1f      	ldr	r3, [pc, #124]	; (800ecbc <FATFS_LinkDriverEx+0x94>)
 800ec40:	7a5b      	ldrb	r3, [r3, #9]
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d131      	bne.n	800ecac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ec48:	4b1c      	ldr	r3, [pc, #112]	; (800ecbc <FATFS_LinkDriverEx+0x94>)
 800ec4a:	7a5b      	ldrb	r3, [r3, #9]
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	461a      	mov	r2, r3
 800ec50:	4b1a      	ldr	r3, [pc, #104]	; (800ecbc <FATFS_LinkDriverEx+0x94>)
 800ec52:	2100      	movs	r1, #0
 800ec54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ec56:	4b19      	ldr	r3, [pc, #100]	; (800ecbc <FATFS_LinkDriverEx+0x94>)
 800ec58:	7a5b      	ldrb	r3, [r3, #9]
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	4a17      	ldr	r2, [pc, #92]	; (800ecbc <FATFS_LinkDriverEx+0x94>)
 800ec5e:	009b      	lsls	r3, r3, #2
 800ec60:	4413      	add	r3, r2
 800ec62:	68fa      	ldr	r2, [r7, #12]
 800ec64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ec66:	4b15      	ldr	r3, [pc, #84]	; (800ecbc <FATFS_LinkDriverEx+0x94>)
 800ec68:	7a5b      	ldrb	r3, [r3, #9]
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	4b13      	ldr	r3, [pc, #76]	; (800ecbc <FATFS_LinkDriverEx+0x94>)
 800ec70:	4413      	add	r3, r2
 800ec72:	79fa      	ldrb	r2, [r7, #7]
 800ec74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ec76:	4b11      	ldr	r3, [pc, #68]	; (800ecbc <FATFS_LinkDriverEx+0x94>)
 800ec78:	7a5b      	ldrb	r3, [r3, #9]
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	1c5a      	adds	r2, r3, #1
 800ec7e:	b2d1      	uxtb	r1, r2
 800ec80:	4a0e      	ldr	r2, [pc, #56]	; (800ecbc <FATFS_LinkDriverEx+0x94>)
 800ec82:	7251      	strb	r1, [r2, #9]
 800ec84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ec86:	7dbb      	ldrb	r3, [r7, #22]
 800ec88:	3330      	adds	r3, #48	; 0x30
 800ec8a:	b2da      	uxtb	r2, r3
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	3301      	adds	r3, #1
 800ec94:	223a      	movs	r2, #58	; 0x3a
 800ec96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	3302      	adds	r3, #2
 800ec9c:	222f      	movs	r2, #47	; 0x2f
 800ec9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	3303      	adds	r3, #3
 800eca4:	2200      	movs	r2, #0
 800eca6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ecac:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	371c      	adds	r7, #28
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	2000066c 	.word	0x2000066c

0800ecc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b082      	sub	sp, #8
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ecca:	2200      	movs	r2, #0
 800eccc:	6839      	ldr	r1, [r7, #0]
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7ff ffaa 	bl	800ec28 <FATFS_LinkDriverEx>
 800ecd4:	4603      	mov	r3, r0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3708      	adds	r7, #8
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
	...

0800ece0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b085      	sub	sp, #20
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	4603      	mov	r3, r0
 800ece8:	6039      	str	r1, [r7, #0]
 800ecea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ecec:	88fb      	ldrh	r3, [r7, #6]
 800ecee:	2b7f      	cmp	r3, #127	; 0x7f
 800ecf0:	d802      	bhi.n	800ecf8 <ff_convert+0x18>
		c = chr;
 800ecf2:	88fb      	ldrh	r3, [r7, #6]
 800ecf4:	81fb      	strh	r3, [r7, #14]
 800ecf6:	e025      	b.n	800ed44 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00b      	beq.n	800ed16 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ecfe:	88fb      	ldrh	r3, [r7, #6]
 800ed00:	2bff      	cmp	r3, #255	; 0xff
 800ed02:	d805      	bhi.n	800ed10 <ff_convert+0x30>
 800ed04:	88fb      	ldrh	r3, [r7, #6]
 800ed06:	3b80      	subs	r3, #128	; 0x80
 800ed08:	4a12      	ldr	r2, [pc, #72]	; (800ed54 <ff_convert+0x74>)
 800ed0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed0e:	e000      	b.n	800ed12 <ff_convert+0x32>
 800ed10:	2300      	movs	r3, #0
 800ed12:	81fb      	strh	r3, [r7, #14]
 800ed14:	e016      	b.n	800ed44 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ed16:	2300      	movs	r3, #0
 800ed18:	81fb      	strh	r3, [r7, #14]
 800ed1a:	e009      	b.n	800ed30 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ed1c:	89fb      	ldrh	r3, [r7, #14]
 800ed1e:	4a0d      	ldr	r2, [pc, #52]	; (800ed54 <ff_convert+0x74>)
 800ed20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed24:	88fa      	ldrh	r2, [r7, #6]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d006      	beq.n	800ed38 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ed2a:	89fb      	ldrh	r3, [r7, #14]
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	81fb      	strh	r3, [r7, #14]
 800ed30:	89fb      	ldrh	r3, [r7, #14]
 800ed32:	2b7f      	cmp	r3, #127	; 0x7f
 800ed34:	d9f2      	bls.n	800ed1c <ff_convert+0x3c>
 800ed36:	e000      	b.n	800ed3a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ed38:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ed3a:	89fb      	ldrh	r3, [r7, #14]
 800ed3c:	3380      	adds	r3, #128	; 0x80
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ed44:	89fb      	ldrh	r3, [r7, #14]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3714      	adds	r7, #20
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	0800fb14 	.word	0x0800fb14

0800ed58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b087      	sub	sp, #28
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	4603      	mov	r3, r0
 800ed60:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ed62:	88fb      	ldrh	r3, [r7, #6]
 800ed64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed68:	d201      	bcs.n	800ed6e <ff_wtoupper+0x16>
 800ed6a:	4b3e      	ldr	r3, [pc, #248]	; (800ee64 <ff_wtoupper+0x10c>)
 800ed6c:	e000      	b.n	800ed70 <ff_wtoupper+0x18>
 800ed6e:	4b3e      	ldr	r3, [pc, #248]	; (800ee68 <ff_wtoupper+0x110>)
 800ed70:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	1c9a      	adds	r2, r3, #2
 800ed76:	617a      	str	r2, [r7, #20]
 800ed78:	881b      	ldrh	r3, [r3, #0]
 800ed7a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ed7c:	8a7b      	ldrh	r3, [r7, #18]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d068      	beq.n	800ee54 <ff_wtoupper+0xfc>
 800ed82:	88fa      	ldrh	r2, [r7, #6]
 800ed84:	8a7b      	ldrh	r3, [r7, #18]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d364      	bcc.n	800ee54 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	1c9a      	adds	r2, r3, #2
 800ed8e:	617a      	str	r2, [r7, #20]
 800ed90:	881b      	ldrh	r3, [r3, #0]
 800ed92:	823b      	strh	r3, [r7, #16]
 800ed94:	8a3b      	ldrh	r3, [r7, #16]
 800ed96:	0a1b      	lsrs	r3, r3, #8
 800ed98:	81fb      	strh	r3, [r7, #14]
 800ed9a:	8a3b      	ldrh	r3, [r7, #16]
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800eda0:	88fa      	ldrh	r2, [r7, #6]
 800eda2:	8a79      	ldrh	r1, [r7, #18]
 800eda4:	8a3b      	ldrh	r3, [r7, #16]
 800eda6:	440b      	add	r3, r1
 800eda8:	429a      	cmp	r2, r3
 800edaa:	da49      	bge.n	800ee40 <ff_wtoupper+0xe8>
			switch (cmd) {
 800edac:	89fb      	ldrh	r3, [r7, #14]
 800edae:	2b08      	cmp	r3, #8
 800edb0:	d84f      	bhi.n	800ee52 <ff_wtoupper+0xfa>
 800edb2:	a201      	add	r2, pc, #4	; (adr r2, 800edb8 <ff_wtoupper+0x60>)
 800edb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb8:	0800eddd 	.word	0x0800eddd
 800edbc:	0800edef 	.word	0x0800edef
 800edc0:	0800ee05 	.word	0x0800ee05
 800edc4:	0800ee0d 	.word	0x0800ee0d
 800edc8:	0800ee15 	.word	0x0800ee15
 800edcc:	0800ee1d 	.word	0x0800ee1d
 800edd0:	0800ee25 	.word	0x0800ee25
 800edd4:	0800ee2d 	.word	0x0800ee2d
 800edd8:	0800ee35 	.word	0x0800ee35
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800eddc:	88fa      	ldrh	r2, [r7, #6]
 800edde:	8a7b      	ldrh	r3, [r7, #18]
 800ede0:	1ad3      	subs	r3, r2, r3
 800ede2:	005b      	lsls	r3, r3, #1
 800ede4:	697a      	ldr	r2, [r7, #20]
 800ede6:	4413      	add	r3, r2
 800ede8:	881b      	ldrh	r3, [r3, #0]
 800edea:	80fb      	strh	r3, [r7, #6]
 800edec:	e027      	b.n	800ee3e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800edee:	88fa      	ldrh	r2, [r7, #6]
 800edf0:	8a7b      	ldrh	r3, [r7, #18]
 800edf2:	1ad3      	subs	r3, r2, r3
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	f003 0301 	and.w	r3, r3, #1
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	88fa      	ldrh	r2, [r7, #6]
 800edfe:	1ad3      	subs	r3, r2, r3
 800ee00:	80fb      	strh	r3, [r7, #6]
 800ee02:	e01c      	b.n	800ee3e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ee04:	88fb      	ldrh	r3, [r7, #6]
 800ee06:	3b10      	subs	r3, #16
 800ee08:	80fb      	strh	r3, [r7, #6]
 800ee0a:	e018      	b.n	800ee3e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ee0c:	88fb      	ldrh	r3, [r7, #6]
 800ee0e:	3b20      	subs	r3, #32
 800ee10:	80fb      	strh	r3, [r7, #6]
 800ee12:	e014      	b.n	800ee3e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ee14:	88fb      	ldrh	r3, [r7, #6]
 800ee16:	3b30      	subs	r3, #48	; 0x30
 800ee18:	80fb      	strh	r3, [r7, #6]
 800ee1a:	e010      	b.n	800ee3e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ee1c:	88fb      	ldrh	r3, [r7, #6]
 800ee1e:	3b1a      	subs	r3, #26
 800ee20:	80fb      	strh	r3, [r7, #6]
 800ee22:	e00c      	b.n	800ee3e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ee24:	88fb      	ldrh	r3, [r7, #6]
 800ee26:	3308      	adds	r3, #8
 800ee28:	80fb      	strh	r3, [r7, #6]
 800ee2a:	e008      	b.n	800ee3e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ee2c:	88fb      	ldrh	r3, [r7, #6]
 800ee2e:	3b50      	subs	r3, #80	; 0x50
 800ee30:	80fb      	strh	r3, [r7, #6]
 800ee32:	e004      	b.n	800ee3e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ee34:	88fb      	ldrh	r3, [r7, #6]
 800ee36:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ee3a:	80fb      	strh	r3, [r7, #6]
 800ee3c:	bf00      	nop
			}
			break;
 800ee3e:	e008      	b.n	800ee52 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ee40:	89fb      	ldrh	r3, [r7, #14]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d195      	bne.n	800ed72 <ff_wtoupper+0x1a>
 800ee46:	8a3b      	ldrh	r3, [r7, #16]
 800ee48:	005b      	lsls	r3, r3, #1
 800ee4a:	697a      	ldr	r2, [r7, #20]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ee50:	e78f      	b.n	800ed72 <ff_wtoupper+0x1a>
			break;
 800ee52:	bf00      	nop
	}

	return chr;
 800ee54:	88fb      	ldrh	r3, [r7, #6]
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	371c      	adds	r7, #28
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	0800fc14 	.word	0x0800fc14
 800ee68:	0800fe08 	.word	0x0800fe08

0800ee6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ee70:	2201      	movs	r2, #1
 800ee72:	490e      	ldr	r1, [pc, #56]	; (800eeac <MX_USB_HOST_Init+0x40>)
 800ee74:	480e      	ldr	r0, [pc, #56]	; (800eeb0 <MX_USB_HOST_Init+0x44>)
 800ee76:	f7f9 fddd 	bl	8008a34 <USBH_Init>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d001      	beq.n	800ee84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ee80:	f7f1 ffec 	bl	8000e5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800ee84:	490b      	ldr	r1, [pc, #44]	; (800eeb4 <MX_USB_HOST_Init+0x48>)
 800ee86:	480a      	ldr	r0, [pc, #40]	; (800eeb0 <MX_USB_HOST_Init+0x44>)
 800ee88:	f7f9 fe62 	bl	8008b50 <USBH_RegisterClass>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d001      	beq.n	800ee96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ee92:	f7f1 ffe3 	bl	8000e5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ee96:	4806      	ldr	r0, [pc, #24]	; (800eeb0 <MX_USB_HOST_Init+0x44>)
 800ee98:	f7f9 fee6 	bl	8008c68 <USBH_Start>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d001      	beq.n	800eea6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800eea2:	f7f1 ffdb 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800eea6:	bf00      	nop
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	0800eecd 	.word	0x0800eecd
 800eeb0:	20002968 	.word	0x20002968
 800eeb4:	20000010 	.word	0x20000010

0800eeb8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800eebc:	4802      	ldr	r0, [pc, #8]	; (800eec8 <MX_USB_HOST_Process+0x10>)
 800eebe:	f7f9 fee3 	bl	8008c88 <USBH_Process>
}
 800eec2:	bf00      	nop
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	20002968 	.word	0x20002968

0800eecc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	460b      	mov	r3, r1
 800eed6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eed8:	78fb      	ldrb	r3, [r7, #3]
 800eeda:	3b01      	subs	r3, #1
 800eedc:	2b04      	cmp	r3, #4
 800eede:	d823      	bhi.n	800ef28 <USBH_UserProcess+0x5c>
 800eee0:	a201      	add	r2, pc, #4	; (adr r2, 800eee8 <USBH_UserProcess+0x1c>)
 800eee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee6:	bf00      	nop
 800eee8:	0800ef29 	.word	0x0800ef29
 800eeec:	0800ef09 	.word	0x0800ef09
 800eef0:	0800ef29 	.word	0x0800ef29
 800eef4:	0800ef1d 	.word	0x0800ef1d
 800eef8:	0800eefd 	.word	0x0800eefd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800eefc:	4b0d      	ldr	r3, [pc, #52]	; (800ef34 <USBH_UserProcess+0x68>)
 800eefe:	2203      	movs	r2, #3
 800ef00:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 800ef02:	f7f2 f9e3 	bl	80012cc <Unmount_USB>
  break;
 800ef06:	e010      	b.n	800ef2a <USBH_UserProcess+0x5e>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ef08:	4b0a      	ldr	r3, [pc, #40]	; (800ef34 <USBH_UserProcess+0x68>)
 800ef0a:	2202      	movs	r2, #2
 800ef0c:	701a      	strb	r2, [r3, #0]
  //getfilecount();
  glcd_handle.listCount = 0;
 800ef0e:	4b0a      	ldr	r3, [pc, #40]	; (800ef38 <USBH_UserProcess+0x6c>)
 800ef10:	2200      	movs	r2, #0
 800ef12:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
  getfilename();
 800ef16:	f7f2 f9fd 	bl	8001314 <getfilename>
  break;
 800ef1a:	e006      	b.n	800ef2a <USBH_UserProcess+0x5e>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ef1c:	4b05      	ldr	r3, [pc, #20]	; (800ef34 <USBH_UserProcess+0x68>)
 800ef1e:	2201      	movs	r2, #1
 800ef20:	701a      	strb	r2, [r3, #0]
  Mount_USB();
 800ef22:	f7f2 f9ad 	bl	8001280 <Mount_USB>
  break;
 800ef26:	e000      	b.n	800ef2a <USBH_UserProcess+0x5e>

  default:
  break;
 800ef28:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ef2a:	bf00      	nop
 800ef2c:	3708      	adds	r7, #8
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	20000678 	.word	0x20000678
 800ef38:	200000b4 	.word	0x200000b4

0800ef3c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b08a      	sub	sp, #40	; 0x28
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef44:	f107 0314 	add.w	r3, r7, #20
 800ef48:	2200      	movs	r2, #0
 800ef4a:	601a      	str	r2, [r3, #0]
 800ef4c:	605a      	str	r2, [r3, #4]
 800ef4e:	609a      	str	r2, [r3, #8]
 800ef50:	60da      	str	r2, [r3, #12]
 800ef52:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ef5c:	d147      	bne.n	800efee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef5e:	2300      	movs	r3, #0
 800ef60:	613b      	str	r3, [r7, #16]
 800ef62:	4b25      	ldr	r3, [pc, #148]	; (800eff8 <HAL_HCD_MspInit+0xbc>)
 800ef64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef66:	4a24      	ldr	r2, [pc, #144]	; (800eff8 <HAL_HCD_MspInit+0xbc>)
 800ef68:	f043 0301 	orr.w	r3, r3, #1
 800ef6c:	6313      	str	r3, [r2, #48]	; 0x30
 800ef6e:	4b22      	ldr	r3, [pc, #136]	; (800eff8 <HAL_HCD_MspInit+0xbc>)
 800ef70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef72:	f003 0301 	and.w	r3, r3, #1
 800ef76:	613b      	str	r3, [r7, #16]
 800ef78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ef7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ef80:	2300      	movs	r3, #0
 800ef82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef84:	2300      	movs	r3, #0
 800ef86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef88:	f107 0314 	add.w	r3, r7, #20
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	481b      	ldr	r0, [pc, #108]	; (800effc <HAL_HCD_MspInit+0xc0>)
 800ef90:	f7f2 fd00 	bl	8001994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ef94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ef98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef9a:	2302      	movs	r3, #2
 800ef9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800efa2:	2303      	movs	r3, #3
 800efa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800efa6:	230a      	movs	r3, #10
 800efa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800efaa:	f107 0314 	add.w	r3, r7, #20
 800efae:	4619      	mov	r1, r3
 800efb0:	4812      	ldr	r0, [pc, #72]	; (800effc <HAL_HCD_MspInit+0xc0>)
 800efb2:	f7f2 fcef 	bl	8001994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800efb6:	4b10      	ldr	r3, [pc, #64]	; (800eff8 <HAL_HCD_MspInit+0xbc>)
 800efb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efba:	4a0f      	ldr	r2, [pc, #60]	; (800eff8 <HAL_HCD_MspInit+0xbc>)
 800efbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efc0:	6353      	str	r3, [r2, #52]	; 0x34
 800efc2:	2300      	movs	r3, #0
 800efc4:	60fb      	str	r3, [r7, #12]
 800efc6:	4b0c      	ldr	r3, [pc, #48]	; (800eff8 <HAL_HCD_MspInit+0xbc>)
 800efc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efca:	4a0b      	ldr	r2, [pc, #44]	; (800eff8 <HAL_HCD_MspInit+0xbc>)
 800efcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800efd0:	6453      	str	r3, [r2, #68]	; 0x44
 800efd2:	4b09      	ldr	r3, [pc, #36]	; (800eff8 <HAL_HCD_MspInit+0xbc>)
 800efd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800efda:	60fb      	str	r3, [r7, #12]
 800efdc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800efde:	2200      	movs	r2, #0
 800efe0:	2100      	movs	r1, #0
 800efe2:	2043      	movs	r0, #67	; 0x43
 800efe4:	f7f2 fc6f 	bl	80018c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800efe8:	2043      	movs	r0, #67	; 0x43
 800efea:	f7f2 fc88 	bl	80018fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800efee:	bf00      	nop
 800eff0:	3728      	adds	r7, #40	; 0x28
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	40023800 	.word	0x40023800
 800effc:	40020000 	.word	0x40020000

0800f000 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fa fa0d 	bl	800942e <USBH_LL_IncTimer>
}
 800f014:	bf00      	nop
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fa fa45 	bl	80094ba <USBH_LL_Connect>
}
 800f030:	bf00      	nop
 800f032:	3708      	adds	r7, #8
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f046:	4618      	mov	r0, r3
 800f048:	f7fa fa4e 	bl	80094e8 <USBH_LL_Disconnect>
}
 800f04c:	bf00      	nop
 800f04e:	3708      	adds	r7, #8
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	460b      	mov	r3, r1
 800f05e:	70fb      	strb	r3, [r7, #3]
 800f060:	4613      	mov	r3, r2
 800f062:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f064:	bf00      	nop
 800f066:	370c      	adds	r7, #12
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr

0800f070 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f07e:	4618      	mov	r0, r3
 800f080:	f7fa f9ff 	bl	8009482 <USBH_LL_PortEnabled>
}
 800f084:	bf00      	nop
 800f086:	3708      	adds	r7, #8
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}

0800f08c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fa f9ff 	bl	800949e <USBH_LL_PortDisabled>
}
 800f0a0:	bf00      	nop
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	d12a      	bne.n	800f110 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f0ba:	4a18      	ldr	r2, [pc, #96]	; (800f11c <USBH_LL_Init+0x74>)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4a15      	ldr	r2, [pc, #84]	; (800f11c <USBH_LL_Init+0x74>)
 800f0c6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f0ca:	4b14      	ldr	r3, [pc, #80]	; (800f11c <USBH_LL_Init+0x74>)
 800f0cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f0d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f0d2:	4b12      	ldr	r3, [pc, #72]	; (800f11c <USBH_LL_Init+0x74>)
 800f0d4:	2208      	movs	r2, #8
 800f0d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f0d8:	4b10      	ldr	r3, [pc, #64]	; (800f11c <USBH_LL_Init+0x74>)
 800f0da:	2201      	movs	r2, #1
 800f0dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f0de:	4b0f      	ldr	r3, [pc, #60]	; (800f11c <USBH_LL_Init+0x74>)
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f0e4:	4b0d      	ldr	r3, [pc, #52]	; (800f11c <USBH_LL_Init+0x74>)
 800f0e6:	2202      	movs	r2, #2
 800f0e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f0ea:	4b0c      	ldr	r3, [pc, #48]	; (800f11c <USBH_LL_Init+0x74>)
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f0f0:	480a      	ldr	r0, [pc, #40]	; (800f11c <USBH_LL_Init+0x74>)
 800f0f2:	f7f2 fe1b 	bl	8001d2c <HAL_HCD_Init>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d001      	beq.n	800f100 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f0fc:	f7f1 feae 	bl	8000e5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f100:	4806      	ldr	r0, [pc, #24]	; (800f11c <USBH_LL_Init+0x74>)
 800f102:	f7f3 fa1f 	bl	8002544 <HAL_HCD_GetCurrentFrame>
 800f106:	4603      	mov	r3, r0
 800f108:	4619      	mov	r1, r3
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f7fa f980 	bl	8009410 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f110:	2300      	movs	r3, #0
}
 800f112:	4618      	mov	r0, r3
 800f114:	3708      	adds	r7, #8
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
 800f11a:	bf00      	nop
 800f11c:	20002d40 	.word	0x20002d40

0800f120 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f128:	2300      	movs	r3, #0
 800f12a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f12c:	2300      	movs	r3, #0
 800f12e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f136:	4618      	mov	r0, r3
 800f138:	f7f3 f98c 	bl	8002454 <HAL_HCD_Start>
 800f13c:	4603      	mov	r3, r0
 800f13e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f140:	7bfb      	ldrb	r3, [r7, #15]
 800f142:	4618      	mov	r0, r3
 800f144:	f000 f990 	bl	800f468 <USBH_Get_USB_Status>
 800f148:	4603      	mov	r3, r0
 800f14a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f14c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f156:	b580      	push	{r7, lr}
 800f158:	b084      	sub	sp, #16
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f162:	2300      	movs	r3, #0
 800f164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7f3 f994 	bl	800249a <HAL_HCD_Stop>
 800f172:	4603      	mov	r3, r0
 800f174:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f176:	7bfb      	ldrb	r3, [r7, #15]
 800f178:	4618      	mov	r0, r3
 800f17a:	f000 f975 	bl	800f468 <USBH_Get_USB_Status>
 800f17e:	4603      	mov	r3, r0
 800f180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f182:	7bbb      	ldrb	r3, [r7, #14]
}
 800f184:	4618      	mov	r0, r3
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f194:	2301      	movs	r3, #1
 800f196:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7f3 f9de 	bl	8002560 <HAL_HCD_GetCurrentSpeed>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d007      	beq.n	800f1ba <USBH_LL_GetSpeed+0x2e>
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d302      	bcc.n	800f1b4 <USBH_LL_GetSpeed+0x28>
 800f1ae:	2b02      	cmp	r3, #2
 800f1b0:	d006      	beq.n	800f1c0 <USBH_LL_GetSpeed+0x34>
 800f1b2:	e008      	b.n	800f1c6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f1b8:	e008      	b.n	800f1cc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	73fb      	strb	r3, [r7, #15]
    break;
 800f1be:	e005      	b.n	800f1cc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f1c0:	2302      	movs	r3, #2
 800f1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f1c4:	e002      	b.n	800f1cc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	73fb      	strb	r3, [r7, #15]
    break;
 800f1ca:	bf00      	nop
  }
  return  speed;
 800f1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3710      	adds	r7, #16
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b084      	sub	sp, #16
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7f3 f971 	bl	80024d4 <HAL_HCD_ResetPort>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f1f6:	7bfb      	ldrb	r3, [r7, #15]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f000 f935 	bl	800f468 <USBH_Get_USB_Status>
 800f1fe:	4603      	mov	r3, r0
 800f200:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f202:	7bbb      	ldrb	r3, [r7, #14]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	460b      	mov	r3, r1
 800f216:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f21e:	78fa      	ldrb	r2, [r7, #3]
 800f220:	4611      	mov	r1, r2
 800f222:	4618      	mov	r0, r3
 800f224:	f7f3 f979 	bl	800251a <HAL_HCD_HC_GetXferCount>
 800f228:	4603      	mov	r3, r0
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f232:	b590      	push	{r4, r7, lr}
 800f234:	b089      	sub	sp, #36	; 0x24
 800f236:	af04      	add	r7, sp, #16
 800f238:	6078      	str	r0, [r7, #4]
 800f23a:	4608      	mov	r0, r1
 800f23c:	4611      	mov	r1, r2
 800f23e:	461a      	mov	r2, r3
 800f240:	4603      	mov	r3, r0
 800f242:	70fb      	strb	r3, [r7, #3]
 800f244:	460b      	mov	r3, r1
 800f246:	70bb      	strb	r3, [r7, #2]
 800f248:	4613      	mov	r3, r2
 800f24a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f24c:	2300      	movs	r3, #0
 800f24e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f250:	2300      	movs	r3, #0
 800f252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f25a:	787c      	ldrb	r4, [r7, #1]
 800f25c:	78ba      	ldrb	r2, [r7, #2]
 800f25e:	78f9      	ldrb	r1, [r7, #3]
 800f260:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f262:	9302      	str	r3, [sp, #8]
 800f264:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f268:	9301      	str	r3, [sp, #4]
 800f26a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	4623      	mov	r3, r4
 800f272:	f7f2 fdbd 	bl	8001df0 <HAL_HCD_HC_Init>
 800f276:	4603      	mov	r3, r0
 800f278:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f27a:	7bfb      	ldrb	r3, [r7, #15]
 800f27c:	4618      	mov	r0, r3
 800f27e:	f000 f8f3 	bl	800f468 <USBH_Get_USB_Status>
 800f282:	4603      	mov	r3, r0
 800f284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f286:	7bbb      	ldrb	r3, [r7, #14]
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3714      	adds	r7, #20
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd90      	pop	{r4, r7, pc}

0800f290 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	460b      	mov	r3, r1
 800f29a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f29c:	2300      	movs	r3, #0
 800f29e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f2aa:	78fa      	ldrb	r2, [r7, #3]
 800f2ac:	4611      	mov	r1, r2
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7f2 fe36 	bl	8001f20 <HAL_HCD_HC_Halt>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f2b8:	7bfb      	ldrb	r3, [r7, #15]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f000 f8d4 	bl	800f468 <USBH_Get_USB_Status>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}

0800f2ce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f2ce:	b590      	push	{r4, r7, lr}
 800f2d0:	b089      	sub	sp, #36	; 0x24
 800f2d2:	af04      	add	r7, sp, #16
 800f2d4:	6078      	str	r0, [r7, #4]
 800f2d6:	4608      	mov	r0, r1
 800f2d8:	4611      	mov	r1, r2
 800f2da:	461a      	mov	r2, r3
 800f2dc:	4603      	mov	r3, r0
 800f2de:	70fb      	strb	r3, [r7, #3]
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	70bb      	strb	r3, [r7, #2]
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f2f6:	787c      	ldrb	r4, [r7, #1]
 800f2f8:	78ba      	ldrb	r2, [r7, #2]
 800f2fa:	78f9      	ldrb	r1, [r7, #3]
 800f2fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f300:	9303      	str	r3, [sp, #12]
 800f302:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f304:	9302      	str	r3, [sp, #8]
 800f306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f308:	9301      	str	r3, [sp, #4]
 800f30a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	4623      	mov	r3, r4
 800f312:	f7f2 fe29 	bl	8001f68 <HAL_HCD_HC_SubmitRequest>
 800f316:	4603      	mov	r3, r0
 800f318:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f31a:	7bfb      	ldrb	r3, [r7, #15]
 800f31c:	4618      	mov	r0, r3
 800f31e:	f000 f8a3 	bl	800f468 <USBH_Get_USB_Status>
 800f322:	4603      	mov	r3, r0
 800f324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f326:	7bbb      	ldrb	r3, [r7, #14]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3714      	adds	r7, #20
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd90      	pop	{r4, r7, pc}

0800f330 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	460b      	mov	r3, r1
 800f33a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f342:	78fa      	ldrb	r2, [r7, #3]
 800f344:	4611      	mov	r1, r2
 800f346:	4618      	mov	r0, r3
 800f348:	f7f3 f8d2 	bl	80024f0 <HAL_HCD_HC_GetURBState>
 800f34c:	4603      	mov	r3, r0
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3708      	adds	r7, #8
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}

0800f356 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f356:	b580      	push	{r7, lr}
 800f358:	b082      	sub	sp, #8
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
 800f35e:	460b      	mov	r3, r1
 800f360:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d103      	bne.n	800f374 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f36c:	78fb      	ldrb	r3, [r7, #3]
 800f36e:	4618      	mov	r0, r3
 800f370:	f000 f8a6 	bl	800f4c0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f374:	20c8      	movs	r0, #200	; 0xc8
 800f376:	f7f2 f9a9 	bl	80016cc <HAL_Delay>
  return USBH_OK;
 800f37a:	2300      	movs	r3, #0
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	460b      	mov	r3, r1
 800f38e:	70fb      	strb	r3, [r7, #3]
 800f390:	4613      	mov	r3, r2
 800f392:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f39a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f39c:	78fa      	ldrb	r2, [r7, #3]
 800f39e:	68f9      	ldr	r1, [r7, #12]
 800f3a0:	4613      	mov	r3, r2
 800f3a2:	009b      	lsls	r3, r3, #2
 800f3a4:	4413      	add	r3, r2
 800f3a6:	00db      	lsls	r3, r3, #3
 800f3a8:	440b      	add	r3, r1
 800f3aa:	333b      	adds	r3, #59	; 0x3b
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d00a      	beq.n	800f3c8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f3b2:	78fa      	ldrb	r2, [r7, #3]
 800f3b4:	68f9      	ldr	r1, [r7, #12]
 800f3b6:	4613      	mov	r3, r2
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	4413      	add	r3, r2
 800f3bc:	00db      	lsls	r3, r3, #3
 800f3be:	440b      	add	r3, r1
 800f3c0:	3350      	adds	r3, #80	; 0x50
 800f3c2:	78ba      	ldrb	r2, [r7, #2]
 800f3c4:	701a      	strb	r2, [r3, #0]
 800f3c6:	e009      	b.n	800f3dc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f3c8:	78fa      	ldrb	r2, [r7, #3]
 800f3ca:	68f9      	ldr	r1, [r7, #12]
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	009b      	lsls	r3, r3, #2
 800f3d0:	4413      	add	r3, r2
 800f3d2:	00db      	lsls	r3, r3, #3
 800f3d4:	440b      	add	r3, r1
 800f3d6:	3351      	adds	r3, #81	; 0x51
 800f3d8:	78ba      	ldrb	r2, [r7, #2]
 800f3da:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f3dc:	2300      	movs	r3, #0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3714      	adds	r7, #20
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr

0800f3ea <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f3ea:	b480      	push	{r7}
 800f3ec:	b085      	sub	sp, #20
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f400:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f402:	78fa      	ldrb	r2, [r7, #3]
 800f404:	68b9      	ldr	r1, [r7, #8]
 800f406:	4613      	mov	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4413      	add	r3, r2
 800f40c:	00db      	lsls	r3, r3, #3
 800f40e:	440b      	add	r3, r1
 800f410:	333b      	adds	r3, #59	; 0x3b
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d00a      	beq.n	800f42e <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f418:	78fa      	ldrb	r2, [r7, #3]
 800f41a:	68b9      	ldr	r1, [r7, #8]
 800f41c:	4613      	mov	r3, r2
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	4413      	add	r3, r2
 800f422:	00db      	lsls	r3, r3, #3
 800f424:	440b      	add	r3, r1
 800f426:	3350      	adds	r3, #80	; 0x50
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	73fb      	strb	r3, [r7, #15]
 800f42c:	e009      	b.n	800f442 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f42e:	78fa      	ldrb	r2, [r7, #3]
 800f430:	68b9      	ldr	r1, [r7, #8]
 800f432:	4613      	mov	r3, r2
 800f434:	009b      	lsls	r3, r3, #2
 800f436:	4413      	add	r3, r2
 800f438:	00db      	lsls	r3, r3, #3
 800f43a:	440b      	add	r3, r1
 800f43c:	3351      	adds	r3, #81	; 0x51
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f442:	7bfb      	ldrb	r3, [r7, #15]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3714      	adds	r7, #20
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f7f2 f937 	bl	80016cc <HAL_Delay>
}
 800f45e:	bf00      	nop
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
	...

0800f468 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	4603      	mov	r3, r0
 800f470:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f472:	2300      	movs	r3, #0
 800f474:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f476:	79fb      	ldrb	r3, [r7, #7]
 800f478:	2b03      	cmp	r3, #3
 800f47a:	d817      	bhi.n	800f4ac <USBH_Get_USB_Status+0x44>
 800f47c:	a201      	add	r2, pc, #4	; (adr r2, 800f484 <USBH_Get_USB_Status+0x1c>)
 800f47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f482:	bf00      	nop
 800f484:	0800f495 	.word	0x0800f495
 800f488:	0800f49b 	.word	0x0800f49b
 800f48c:	0800f4a1 	.word	0x0800f4a1
 800f490:	0800f4a7 	.word	0x0800f4a7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f494:	2300      	movs	r3, #0
 800f496:	73fb      	strb	r3, [r7, #15]
    break;
 800f498:	e00b      	b.n	800f4b2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f49a:	2302      	movs	r3, #2
 800f49c:	73fb      	strb	r3, [r7, #15]
    break;
 800f49e:	e008      	b.n	800f4b2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f4a4:	e005      	b.n	800f4b2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f4a6:	2302      	movs	r3, #2
 800f4a8:	73fb      	strb	r3, [r7, #15]
    break;
 800f4aa:	e002      	b.n	800f4b2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f4ac:	2302      	movs	r3, #2
 800f4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f4b0:	bf00      	nop
  }
  return usb_status;
 800f4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3714      	adds	r7, #20
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f4ca:	79fb      	ldrb	r3, [r7, #7]
 800f4cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f4ce:	79fb      	ldrb	r3, [r7, #7]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d102      	bne.n	800f4da <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	73fb      	strb	r3, [r7, #15]
 800f4d8:	e001      	b.n	800f4de <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f4de:	7bfb      	ldrb	r3, [r7, #15]
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	2101      	movs	r1, #1
 800f4e4:	4803      	ldr	r0, [pc, #12]	; (800f4f4 <MX_DriverVbusFS+0x34>)
 800f4e6:	f7f2 fbef 	bl	8001cc8 <HAL_GPIO_WritePin>
}
 800f4ea:	bf00      	nop
 800f4ec:	3710      	adds	r7, #16
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	40020800 	.word	0x40020800

0800f4f8 <__errno>:
 800f4f8:	4b01      	ldr	r3, [pc, #4]	; (800f500 <__errno+0x8>)
 800f4fa:	6818      	ldr	r0, [r3, #0]
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	20000030 	.word	0x20000030

0800f504 <__libc_init_array>:
 800f504:	b570      	push	{r4, r5, r6, lr}
 800f506:	4e0d      	ldr	r6, [pc, #52]	; (800f53c <__libc_init_array+0x38>)
 800f508:	4c0d      	ldr	r4, [pc, #52]	; (800f540 <__libc_init_array+0x3c>)
 800f50a:	1ba4      	subs	r4, r4, r6
 800f50c:	10a4      	asrs	r4, r4, #2
 800f50e:	2500      	movs	r5, #0
 800f510:	42a5      	cmp	r5, r4
 800f512:	d109      	bne.n	800f528 <__libc_init_array+0x24>
 800f514:	4e0b      	ldr	r6, [pc, #44]	; (800f544 <__libc_init_array+0x40>)
 800f516:	4c0c      	ldr	r4, [pc, #48]	; (800f548 <__libc_init_array+0x44>)
 800f518:	f000 f8fe 	bl	800f718 <_init>
 800f51c:	1ba4      	subs	r4, r4, r6
 800f51e:	10a4      	asrs	r4, r4, #2
 800f520:	2500      	movs	r5, #0
 800f522:	42a5      	cmp	r5, r4
 800f524:	d105      	bne.n	800f532 <__libc_init_array+0x2e>
 800f526:	bd70      	pop	{r4, r5, r6, pc}
 800f528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f52c:	4798      	blx	r3
 800f52e:	3501      	adds	r5, #1
 800f530:	e7ee      	b.n	800f510 <__libc_init_array+0xc>
 800f532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f536:	4798      	blx	r3
 800f538:	3501      	adds	r5, #1
 800f53a:	e7f2      	b.n	800f522 <__libc_init_array+0x1e>
 800f53c:	0800fecc 	.word	0x0800fecc
 800f540:	0800fecc 	.word	0x0800fecc
 800f544:	0800fecc 	.word	0x0800fecc
 800f548:	0800fed0 	.word	0x0800fed0

0800f54c <malloc>:
 800f54c:	4b02      	ldr	r3, [pc, #8]	; (800f558 <malloc+0xc>)
 800f54e:	4601      	mov	r1, r0
 800f550:	6818      	ldr	r0, [r3, #0]
 800f552:	f000 b86d 	b.w	800f630 <_malloc_r>
 800f556:	bf00      	nop
 800f558:	20000030 	.word	0x20000030

0800f55c <free>:
 800f55c:	4b02      	ldr	r3, [pc, #8]	; (800f568 <free+0xc>)
 800f55e:	4601      	mov	r1, r0
 800f560:	6818      	ldr	r0, [r3, #0]
 800f562:	f000 b817 	b.w	800f594 <_free_r>
 800f566:	bf00      	nop
 800f568:	20000030 	.word	0x20000030

0800f56c <memcpy>:
 800f56c:	b510      	push	{r4, lr}
 800f56e:	1e43      	subs	r3, r0, #1
 800f570:	440a      	add	r2, r1
 800f572:	4291      	cmp	r1, r2
 800f574:	d100      	bne.n	800f578 <memcpy+0xc>
 800f576:	bd10      	pop	{r4, pc}
 800f578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f57c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f580:	e7f7      	b.n	800f572 <memcpy+0x6>

0800f582 <memset>:
 800f582:	4402      	add	r2, r0
 800f584:	4603      	mov	r3, r0
 800f586:	4293      	cmp	r3, r2
 800f588:	d100      	bne.n	800f58c <memset+0xa>
 800f58a:	4770      	bx	lr
 800f58c:	f803 1b01 	strb.w	r1, [r3], #1
 800f590:	e7f9      	b.n	800f586 <memset+0x4>
	...

0800f594 <_free_r>:
 800f594:	b538      	push	{r3, r4, r5, lr}
 800f596:	4605      	mov	r5, r0
 800f598:	2900      	cmp	r1, #0
 800f59a:	d045      	beq.n	800f628 <_free_r+0x94>
 800f59c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5a0:	1f0c      	subs	r4, r1, #4
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	bfb8      	it	lt
 800f5a6:	18e4      	addlt	r4, r4, r3
 800f5a8:	f000 f8b4 	bl	800f714 <__malloc_lock>
 800f5ac:	4a1f      	ldr	r2, [pc, #124]	; (800f62c <_free_r+0x98>)
 800f5ae:	6813      	ldr	r3, [r2, #0]
 800f5b0:	4610      	mov	r0, r2
 800f5b2:	b933      	cbnz	r3, 800f5c2 <_free_r+0x2e>
 800f5b4:	6063      	str	r3, [r4, #4]
 800f5b6:	6014      	str	r4, [r2, #0]
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5be:	f000 b8aa 	b.w	800f716 <__malloc_unlock>
 800f5c2:	42a3      	cmp	r3, r4
 800f5c4:	d90c      	bls.n	800f5e0 <_free_r+0x4c>
 800f5c6:	6821      	ldr	r1, [r4, #0]
 800f5c8:	1862      	adds	r2, r4, r1
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	bf04      	itt	eq
 800f5ce:	681a      	ldreq	r2, [r3, #0]
 800f5d0:	685b      	ldreq	r3, [r3, #4]
 800f5d2:	6063      	str	r3, [r4, #4]
 800f5d4:	bf04      	itt	eq
 800f5d6:	1852      	addeq	r2, r2, r1
 800f5d8:	6022      	streq	r2, [r4, #0]
 800f5da:	6004      	str	r4, [r0, #0]
 800f5dc:	e7ec      	b.n	800f5b8 <_free_r+0x24>
 800f5de:	4613      	mov	r3, r2
 800f5e0:	685a      	ldr	r2, [r3, #4]
 800f5e2:	b10a      	cbz	r2, 800f5e8 <_free_r+0x54>
 800f5e4:	42a2      	cmp	r2, r4
 800f5e6:	d9fa      	bls.n	800f5de <_free_r+0x4a>
 800f5e8:	6819      	ldr	r1, [r3, #0]
 800f5ea:	1858      	adds	r0, r3, r1
 800f5ec:	42a0      	cmp	r0, r4
 800f5ee:	d10b      	bne.n	800f608 <_free_r+0x74>
 800f5f0:	6820      	ldr	r0, [r4, #0]
 800f5f2:	4401      	add	r1, r0
 800f5f4:	1858      	adds	r0, r3, r1
 800f5f6:	4282      	cmp	r2, r0
 800f5f8:	6019      	str	r1, [r3, #0]
 800f5fa:	d1dd      	bne.n	800f5b8 <_free_r+0x24>
 800f5fc:	6810      	ldr	r0, [r2, #0]
 800f5fe:	6852      	ldr	r2, [r2, #4]
 800f600:	605a      	str	r2, [r3, #4]
 800f602:	4401      	add	r1, r0
 800f604:	6019      	str	r1, [r3, #0]
 800f606:	e7d7      	b.n	800f5b8 <_free_r+0x24>
 800f608:	d902      	bls.n	800f610 <_free_r+0x7c>
 800f60a:	230c      	movs	r3, #12
 800f60c:	602b      	str	r3, [r5, #0]
 800f60e:	e7d3      	b.n	800f5b8 <_free_r+0x24>
 800f610:	6820      	ldr	r0, [r4, #0]
 800f612:	1821      	adds	r1, r4, r0
 800f614:	428a      	cmp	r2, r1
 800f616:	bf04      	itt	eq
 800f618:	6811      	ldreq	r1, [r2, #0]
 800f61a:	6852      	ldreq	r2, [r2, #4]
 800f61c:	6062      	str	r2, [r4, #4]
 800f61e:	bf04      	itt	eq
 800f620:	1809      	addeq	r1, r1, r0
 800f622:	6021      	streq	r1, [r4, #0]
 800f624:	605c      	str	r4, [r3, #4]
 800f626:	e7c7      	b.n	800f5b8 <_free_r+0x24>
 800f628:	bd38      	pop	{r3, r4, r5, pc}
 800f62a:	bf00      	nop
 800f62c:	2000067c 	.word	0x2000067c

0800f630 <_malloc_r>:
 800f630:	b570      	push	{r4, r5, r6, lr}
 800f632:	1ccd      	adds	r5, r1, #3
 800f634:	f025 0503 	bic.w	r5, r5, #3
 800f638:	3508      	adds	r5, #8
 800f63a:	2d0c      	cmp	r5, #12
 800f63c:	bf38      	it	cc
 800f63e:	250c      	movcc	r5, #12
 800f640:	2d00      	cmp	r5, #0
 800f642:	4606      	mov	r6, r0
 800f644:	db01      	blt.n	800f64a <_malloc_r+0x1a>
 800f646:	42a9      	cmp	r1, r5
 800f648:	d903      	bls.n	800f652 <_malloc_r+0x22>
 800f64a:	230c      	movs	r3, #12
 800f64c:	6033      	str	r3, [r6, #0]
 800f64e:	2000      	movs	r0, #0
 800f650:	bd70      	pop	{r4, r5, r6, pc}
 800f652:	f000 f85f 	bl	800f714 <__malloc_lock>
 800f656:	4a21      	ldr	r2, [pc, #132]	; (800f6dc <_malloc_r+0xac>)
 800f658:	6814      	ldr	r4, [r2, #0]
 800f65a:	4621      	mov	r1, r4
 800f65c:	b991      	cbnz	r1, 800f684 <_malloc_r+0x54>
 800f65e:	4c20      	ldr	r4, [pc, #128]	; (800f6e0 <_malloc_r+0xb0>)
 800f660:	6823      	ldr	r3, [r4, #0]
 800f662:	b91b      	cbnz	r3, 800f66c <_malloc_r+0x3c>
 800f664:	4630      	mov	r0, r6
 800f666:	f000 f83d 	bl	800f6e4 <_sbrk_r>
 800f66a:	6020      	str	r0, [r4, #0]
 800f66c:	4629      	mov	r1, r5
 800f66e:	4630      	mov	r0, r6
 800f670:	f000 f838 	bl	800f6e4 <_sbrk_r>
 800f674:	1c43      	adds	r3, r0, #1
 800f676:	d124      	bne.n	800f6c2 <_malloc_r+0x92>
 800f678:	230c      	movs	r3, #12
 800f67a:	6033      	str	r3, [r6, #0]
 800f67c:	4630      	mov	r0, r6
 800f67e:	f000 f84a 	bl	800f716 <__malloc_unlock>
 800f682:	e7e4      	b.n	800f64e <_malloc_r+0x1e>
 800f684:	680b      	ldr	r3, [r1, #0]
 800f686:	1b5b      	subs	r3, r3, r5
 800f688:	d418      	bmi.n	800f6bc <_malloc_r+0x8c>
 800f68a:	2b0b      	cmp	r3, #11
 800f68c:	d90f      	bls.n	800f6ae <_malloc_r+0x7e>
 800f68e:	600b      	str	r3, [r1, #0]
 800f690:	50cd      	str	r5, [r1, r3]
 800f692:	18cc      	adds	r4, r1, r3
 800f694:	4630      	mov	r0, r6
 800f696:	f000 f83e 	bl	800f716 <__malloc_unlock>
 800f69a:	f104 000b 	add.w	r0, r4, #11
 800f69e:	1d23      	adds	r3, r4, #4
 800f6a0:	f020 0007 	bic.w	r0, r0, #7
 800f6a4:	1ac3      	subs	r3, r0, r3
 800f6a6:	d0d3      	beq.n	800f650 <_malloc_r+0x20>
 800f6a8:	425a      	negs	r2, r3
 800f6aa:	50e2      	str	r2, [r4, r3]
 800f6ac:	e7d0      	b.n	800f650 <_malloc_r+0x20>
 800f6ae:	428c      	cmp	r4, r1
 800f6b0:	684b      	ldr	r3, [r1, #4]
 800f6b2:	bf16      	itet	ne
 800f6b4:	6063      	strne	r3, [r4, #4]
 800f6b6:	6013      	streq	r3, [r2, #0]
 800f6b8:	460c      	movne	r4, r1
 800f6ba:	e7eb      	b.n	800f694 <_malloc_r+0x64>
 800f6bc:	460c      	mov	r4, r1
 800f6be:	6849      	ldr	r1, [r1, #4]
 800f6c0:	e7cc      	b.n	800f65c <_malloc_r+0x2c>
 800f6c2:	1cc4      	adds	r4, r0, #3
 800f6c4:	f024 0403 	bic.w	r4, r4, #3
 800f6c8:	42a0      	cmp	r0, r4
 800f6ca:	d005      	beq.n	800f6d8 <_malloc_r+0xa8>
 800f6cc:	1a21      	subs	r1, r4, r0
 800f6ce:	4630      	mov	r0, r6
 800f6d0:	f000 f808 	bl	800f6e4 <_sbrk_r>
 800f6d4:	3001      	adds	r0, #1
 800f6d6:	d0cf      	beq.n	800f678 <_malloc_r+0x48>
 800f6d8:	6025      	str	r5, [r4, #0]
 800f6da:	e7db      	b.n	800f694 <_malloc_r+0x64>
 800f6dc:	2000067c 	.word	0x2000067c
 800f6e0:	20000680 	.word	0x20000680

0800f6e4 <_sbrk_r>:
 800f6e4:	b538      	push	{r3, r4, r5, lr}
 800f6e6:	4c06      	ldr	r4, [pc, #24]	; (800f700 <_sbrk_r+0x1c>)
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	4608      	mov	r0, r1
 800f6ee:	6023      	str	r3, [r4, #0]
 800f6f0:	f7f1 fd7a 	bl	80011e8 <_sbrk>
 800f6f4:	1c43      	adds	r3, r0, #1
 800f6f6:	d102      	bne.n	800f6fe <_sbrk_r+0x1a>
 800f6f8:	6823      	ldr	r3, [r4, #0]
 800f6fa:	b103      	cbz	r3, 800f6fe <_sbrk_r+0x1a>
 800f6fc:	602b      	str	r3, [r5, #0]
 800f6fe:	bd38      	pop	{r3, r4, r5, pc}
 800f700:	20003004 	.word	0x20003004

0800f704 <strcpy>:
 800f704:	4603      	mov	r3, r0
 800f706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f70a:	f803 2b01 	strb.w	r2, [r3], #1
 800f70e:	2a00      	cmp	r2, #0
 800f710:	d1f9      	bne.n	800f706 <strcpy+0x2>
 800f712:	4770      	bx	lr

0800f714 <__malloc_lock>:
 800f714:	4770      	bx	lr

0800f716 <__malloc_unlock>:
 800f716:	4770      	bx	lr

0800f718 <_init>:
 800f718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f71a:	bf00      	nop
 800f71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f71e:	bc08      	pop	{r3}
 800f720:	469e      	mov	lr, r3
 800f722:	4770      	bx	lr

0800f724 <_fini>:
 800f724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f726:	bf00      	nop
 800f728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f72a:	bc08      	pop	{r3}
 800f72c:	469e      	mov	lr, r3
 800f72e:	4770      	bx	lr
